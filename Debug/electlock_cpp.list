
electlock_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005120  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005310  08005310  00020134  2**0
                  CONTENTS
  4 .ARM          00000000  08005310  08005310  00020134  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005310  08005310  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005318  08005318  00015318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000134  20000000  08005320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000134  08005454  00020134  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  08005454  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023667  00000000  00000000  000201a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a45  00000000  00000000  0004380e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  00048258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000122d  00000000  00000000  00049a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027731  00000000  00000000  0004ac4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b071  00000000  00000000  0007237e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0ac8  00000000  00000000  0008d3ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000069bc  00000000  00000000  0016deb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00174874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000134 	.word	0x20000134
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08005294 	.word	0x08005294

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000138 	.word	0x20000138
 80001c8:	08005294 	.word	0x08005294

080001cc <_ZN11AdjustClockC1EP6AppArg>:
 *      Author: owner
 */

#include "AdjustClock.hpp"

AdjustClock::AdjustClock(AppArg *apparg):
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b082      	sub	sp, #8
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	6078      	str	r0, [r7, #4]
 80001d4:	6039      	str	r1, [r7, #0]
    Application(apparg)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	6839      	ldr	r1, [r7, #0]
 80001da:	4618      	mov	r0, r3
 80001dc:	f000 fa2c 	bl	8000638 <_ZN11ApplicationC1EP6AppArg>
 80001e0:	4a25      	ldr	r2, [pc, #148]	; (8000278 <_ZN11AdjustClockC1EP6AppArg+0xac>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	601a      	str	r2, [r3, #0]
{
  HAL_RTC_GetTime(apparg->hrtc.get(), &gTime, RTC_FORMAT_BIN);
 80001e6:	683b      	ldr	r3, [r7, #0]
 80001e8:	330c      	adds	r3, #12
 80001ea:	4618      	mov	r0, r3
 80001ec:	f000 f980 	bl	80004f0 <_ZNKSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE3getEv>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3304      	adds	r3, #4
 80001f4:	2200      	movs	r2, #0
 80001f6:	4619      	mov	r1, r3
 80001f8:	f004 fa2f 	bl	800465a <HAL_RTC_GetTime>
  HAL_RTC_GetDate(apparg->hrtc.get(), &gDate, RTC_FORMAT_BIN);
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	330c      	adds	r3, #12
 8000200:	4618      	mov	r0, r3
 8000202:	f000 f975 	bl	80004f0 <_ZNKSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE3getEv>
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	3318      	adds	r3, #24
 800020a:	2200      	movs	r2, #0
 800020c:	4619      	mov	r1, r3
 800020e:	f004 fa80 	bl	8004712 <HAL_RTC_GetDate>

  gTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	2200      	movs	r2, #0
 8000216:	611a      	str	r2, [r3, #16]
  gTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2200      	movs	r2, #0
 800021c:	615a      	str	r2, [r3, #20]

  hour = gTime.Hours;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	791b      	ldrb	r3, [r3, #4]
 8000222:	b25a      	sxtb	r2, r3
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	771a      	strb	r2, [r3, #28]
  min = gTime.Minutes;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	795b      	ldrb	r3, [r3, #5]
 800022c:	b25a      	sxtb	r2, r3
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	775a      	strb	r2, [r3, #29]
  sec = gTime.Seconds;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	799b      	ldrb	r3, [r3, #6]
 8000236:	b25a      	sxtb	r2, r3
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	779a      	strb	r2, [r3, #30]

  setHour(hour);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8000242:	b2db      	uxtb	r3, r3
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fc35 	bl	8000ab4 <_Z7setHourh>
  setMinute(min);
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8000250:	b2db      	uxtb	r3, r3
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fc5a 	bl	8000b0c <_Z9setMinuteh>
  setSecond(sec);
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	f993 301e 	ldrsb.w	r3, [r3, #30]
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
 8000262:	f000 fc73 	bl	8000b4c <_Z9setSecondh>

  mode_hms = 0;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2200      	movs	r2, #0
 800026a:	f883 2020 	strb.w	r2, [r3, #32]
}
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4618      	mov	r0, r3
 8000272:	3708      	adds	r7, #8
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	080052b4 	.word	0x080052b4

0800027c <_ZN11AdjustClock3runEP6AppArg>:

AdjustClock::~AdjustClock(){};

void AdjustClock::run(AppArg *apparg)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
  move_num = 0;
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2200      	movs	r2, #0
 800028a:	77da      	strb	r2, [r3, #31]
  if (apparg->sw2->getFirstPress() || apparg->sw2->getHold())
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	3304      	adds	r3, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f000 f93a 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000296:	4603      	mov	r3, r0
 8000298:	4618      	mov	r0, r3
 800029a:	f000 fabf 	bl	800081c <_ZN8InputPin13getFirstPressEv>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d10b      	bne.n	80002bc <_ZN11AdjustClock3runEP6AppArg+0x40>
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	3304      	adds	r3, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f92e 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 80002ae:	4603      	mov	r3, r0
 80002b0:	4618      	mov	r0, r3
 80002b2:	f000 fad5 	bl	8000860 <_ZN8InputPin7getHoldEv>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <_ZN11AdjustClock3runEP6AppArg+0x44>
 80002bc:	2301      	movs	r3, #1
 80002be:	e000      	b.n	80002c2 <_ZN11AdjustClock3runEP6AppArg+0x46>
 80002c0:	2300      	movs	r3, #0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d002      	beq.n	80002cc <_ZN11AdjustClock3runEP6AppArg+0x50>
  {
    move_num = 1;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	2201      	movs	r2, #1
 80002ca:	77da      	strb	r2, [r3, #31]
  }

  if (apparg->sw3->getFirstPress() || apparg->sw3->getHold())
 80002cc:	683b      	ldr	r3, [r7, #0]
 80002ce:	3308      	adds	r3, #8
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f91a 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 80002d6:	4603      	mov	r3, r0
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 fa9f 	bl	800081c <_ZN8InputPin13getFirstPressEv>
 80002de:	4603      	mov	r3, r0
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d10b      	bne.n	80002fc <_ZN11AdjustClock3runEP6AppArg+0x80>
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	3308      	adds	r3, #8
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f90e 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 80002ee:	4603      	mov	r3, r0
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 fab5 	bl	8000860 <_ZN8InputPin7getHoldEv>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <_ZN11AdjustClock3runEP6AppArg+0x84>
 80002fc:	2301      	movs	r3, #1
 80002fe:	e000      	b.n	8000302 <_ZN11AdjustClock3runEP6AppArg+0x86>
 8000300:	2300      	movs	r3, #0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d002      	beq.n	800030c <_ZN11AdjustClock3runEP6AppArg+0x90>
  {
    move_num = -1;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	22ff      	movs	r2, #255	; 0xff
 800030a:	77da      	strb	r2, [r3, #31]
  }

  if (apparg->sw1->getFirstPress())
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	f000 f8fb 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000314:	4603      	mov	r3, r0
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fa80 	bl	800081c <_ZN8InputPin13getFirstPressEv>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d037      	beq.n	8000392 <_ZN11AdjustClock3runEP6AppArg+0x116>
  {
    mode_hms++;
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000328:	3301      	adds	r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	f883 2020 	strb.w	r2, [r3, #32]
    if (mode_hms > 2)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000338:	2b02      	cmp	r3, #2
 800033a:	d92a      	bls.n	8000392 <_ZN11AdjustClock3runEP6AppArg+0x116>
    {
      mode_hms = 0;
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	2200      	movs	r2, #0
 8000340:	f883 2020 	strb.w	r2, [r3, #32]
      gTime.Hours = hour;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f993 301c 	ldrsb.w	r3, [r3, #28]
 800034a:	b2da      	uxtb	r2, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	711a      	strb	r2, [r3, #4]
      gTime.Minutes = min;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8000356:	b2da      	uxtb	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	715a      	strb	r2, [r3, #5]
      gTime.Seconds = sec;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8000362:	b2da      	uxtb	r2, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	719a      	strb	r2, [r3, #6]
      if (HAL_RTC_SetTime(apparg->hrtc.get(), &gTime, RTC_FORMAT_BIN) != HAL_OK)
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	330c      	adds	r3, #12
 800036c:	4618      	mov	r0, r3
 800036e:	f000 f8bf 	bl	80004f0 <_ZNKSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE3getEv>
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3304      	adds	r3, #4
 8000376:	2200      	movs	r2, #0
 8000378:	4619      	mov	r1, r3
 800037a:	f004 f8d1 	bl	8004520 <HAL_RTC_SetTime>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	bf14      	ite	ne
 8000384:	2301      	movne	r3, #1
 8000386:	2300      	moveq	r3, #0
 8000388:	b2db      	uxtb	r3, r3
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <_ZN11AdjustClock3runEP6AppArg+0x116>
      {
        // エラーハンドリング
        Error_Handler();
 800038e:	f001 f833 	bl	80013f8 <Error_Handler>
      }
    }
  }

  switch (mode_hms)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000398:	2b02      	cmp	r3, #2
 800039a:	d05e      	beq.n	800045a <_ZN11AdjustClock3runEP6AppArg+0x1de>
 800039c:	2b02      	cmp	r3, #2
 800039e:	f300 8088 	bgt.w	80004b2 <_ZN11AdjustClock3runEP6AppArg+0x236>
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d002      	beq.n	80003ac <_ZN11AdjustClock3runEP6AppArg+0x130>
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d02b      	beq.n	8000402 <_ZN11AdjustClock3runEP6AppArg+0x186>
    sec += move_num;
    sec = sec < 0 ? 59 : sec;
    sec = sec % 60;
    break;
  default:
    break;
 80003aa:	e082      	b.n	80004b2 <_ZN11AdjustClock3runEP6AppArg+0x236>
    hour += move_num;
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	f993 301f 	ldrsb.w	r3, [r3, #31]
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	4413      	add	r3, r2
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	b25a      	sxtb	r2, r3
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	771a      	strb	r2, [r3, #28]
    hour = hour < 0 ? 11 : hour;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	db03      	blt.n	80003d8 <_ZN11AdjustClock3runEP6AppArg+0x15c>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80003d6:	e000      	b.n	80003da <_ZN11AdjustClock3runEP6AppArg+0x15e>
 80003d8:	220b      	movs	r2, #11
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	771a      	strb	r2, [r3, #28]
    hour = hour % 24;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	f993 201c 	ldrsb.w	r2, [r3, #28]
 80003e4:	4b40      	ldr	r3, [pc, #256]	; (80004e8 <_ZN11AdjustClock3runEP6AppArg+0x26c>)
 80003e6:	fb83 1302 	smull	r1, r3, r3, r2
 80003ea:	1099      	asrs	r1, r3, #2
 80003ec:	17d3      	asrs	r3, r2, #31
 80003ee:	1ac9      	subs	r1, r1, r3
 80003f0:	460b      	mov	r3, r1
 80003f2:	005b      	lsls	r3, r3, #1
 80003f4:	440b      	add	r3, r1
 80003f6:	00db      	lsls	r3, r3, #3
 80003f8:	1ad3      	subs	r3, r2, r3
 80003fa:	b25a      	sxtb	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	771a      	strb	r2, [r3, #28]
    break;
 8000400:	e058      	b.n	80004b4 <_ZN11AdjustClock3runEP6AppArg+0x238>
    min += move_num;
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8000408:	b2da      	uxtb	r2, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	4413      	add	r3, r2
 8000414:	b2db      	uxtb	r3, r3
 8000416:	b25a      	sxtb	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	775a      	strb	r2, [r3, #29]
    min = min < 0 ? 59 : min;
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8000422:	2b00      	cmp	r3, #0
 8000424:	db03      	blt.n	800042e <_ZN11AdjustClock3runEP6AppArg+0x1b2>
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f993 201d 	ldrsb.w	r2, [r3, #29]
 800042c:	e000      	b.n	8000430 <_ZN11AdjustClock3runEP6AppArg+0x1b4>
 800042e:	223b      	movs	r2, #59	; 0x3b
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	775a      	strb	r2, [r3, #29]
    min = min % 60;
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	f993 201d 	ldrsb.w	r2, [r3, #29]
 800043a:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <_ZN11AdjustClock3runEP6AppArg+0x270>)
 800043c:	fb83 1302 	smull	r1, r3, r3, r2
 8000440:	4413      	add	r3, r2
 8000442:	1159      	asrs	r1, r3, #5
 8000444:	17d3      	asrs	r3, r2, #31
 8000446:	1ac9      	subs	r1, r1, r3
 8000448:	460b      	mov	r3, r1
 800044a:	011b      	lsls	r3, r3, #4
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	1ad3      	subs	r3, r2, r3
 8000452:	b25a      	sxtb	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	775a      	strb	r2, [r3, #29]
    break;
 8000458:	e02c      	b.n	80004b4 <_ZN11AdjustClock3runEP6AppArg+0x238>
    sec += move_num;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8000460:	b2da      	uxtb	r2, r3
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8000468:	b2db      	uxtb	r3, r3
 800046a:	4413      	add	r3, r2
 800046c:	b2db      	uxtb	r3, r3
 800046e:	b25a      	sxtb	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	779a      	strb	r2, [r3, #30]
    sec = sec < 0 ? 59 : sec;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f993 301e 	ldrsb.w	r3, [r3, #30]
 800047a:	2b00      	cmp	r3, #0
 800047c:	db03      	blt.n	8000486 <_ZN11AdjustClock3runEP6AppArg+0x20a>
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f993 201e 	ldrsb.w	r2, [r3, #30]
 8000484:	e000      	b.n	8000488 <_ZN11AdjustClock3runEP6AppArg+0x20c>
 8000486:	223b      	movs	r2, #59	; 0x3b
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	779a      	strb	r2, [r3, #30]
    sec = sec % 60;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	f993 201e 	ldrsb.w	r2, [r3, #30]
 8000492:	4b16      	ldr	r3, [pc, #88]	; (80004ec <_ZN11AdjustClock3runEP6AppArg+0x270>)
 8000494:	fb83 1302 	smull	r1, r3, r3, r2
 8000498:	4413      	add	r3, r2
 800049a:	1159      	asrs	r1, r3, #5
 800049c:	17d3      	asrs	r3, r2, #31
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	460b      	mov	r3, r1
 80004a2:	011b      	lsls	r3, r3, #4
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	1ad3      	subs	r3, r2, r3
 80004aa:	b25a      	sxtb	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	779a      	strb	r2, [r3, #30]
    break;
 80004b0:	e000      	b.n	80004b4 <_ZN11AdjustClock3runEP6AppArg+0x238>
    break;
 80004b2:	bf00      	nop
  }

  setHour(hour);
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	4618      	mov	r0, r3
 80004be:	f000 faf9 	bl	8000ab4 <_Z7setHourh>
  setMinute(min);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 fb1e 	bl	8000b0c <_Z9setMinuteh>
  setSecond(sec);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 fb37 	bl	8000b4c <_Z9setSecondh>
 80004de:	bf00      	nop
 80004e0:	3708      	adds	r7, #8
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2aaaaaab 	.word	0x2aaaaaab
 80004ec:	88888889 	.word	0x88888889

080004f0 <_ZNKSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4618      	mov	r0, r3
 80004fc:	f000 f811 	bl	8000522 <_ZNKSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 8000500:	4603      	mov	r3, r0
 8000502:	4618      	mov	r0, r3
 8000504:	3708      	adds	r7, #8
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 800050a:	b580      	push	{r7, lr}
 800050c:	b082      	sub	sp, #8
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
	return get();
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f000 f813 	bl	800053e <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EE3getEv>
 8000518:	4603      	mov	r3, r0
      }
 800051a:	4618      	mov	r0, r3
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_ZNKSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8000522:	b580      	push	{r7, lr}
 8000524:	b082      	sub	sp, #8
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	4618      	mov	r0, r3
 800052e:	f000 f813 	bl	8000558 <_ZSt3getILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8000532:	4603      	mov	r3, r0
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}

0800053e <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 800053e:	b580      	push	{r7, lr}
 8000540:	b082      	sub	sp, #8
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f812 	bl	8000572 <_ZNKSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 800054e:	4603      	mov	r3, r0
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <_ZSt3getILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    { return std::__get_helper<__i>(__t); }

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	4618      	mov	r0, r3
 8000564:	f000 f813 	bl	800058e <_ZSt12__get_helperILj0EP17RTC_HandleTypeDefJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8000568:	4603      	mov	r3, r0
 800056a:	4618      	mov	r0, r3
 800056c:	3708      	adds	r7, #8
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <_ZNKSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8000572:	b580      	push	{r7, lr}
 8000574:	b082      	sub	sp, #8
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4618      	mov	r0, r3
 800057e:	f000 f812 	bl	80005a6 <_ZSt3getILj0EJP8InputPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8000582:	4603      	mov	r3, r0
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4618      	mov	r0, r3
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <_ZSt12__get_helperILj0EP17RTC_HandleTypeDefJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f000 f812 	bl	80005c0 <_ZNSt11_Tuple_implILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEE7_M_headERKS4_>
 800059c:	4603      	mov	r3, r0
 800059e:	4618      	mov	r0, r3
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <_ZSt3getILj0EJP8InputPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 f812 	bl	80005da <_ZSt12__get_helperILj0EP8InputPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80005b6:	4603      	mov	r3, r0
 80005b8:	4618      	mov	r0, r3
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <_ZNSt11_Tuple_implILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 f811 	bl	80005f2 <_ZNSt10_Head_baseILj0EP17RTC_HandleTypeDefLb0EE7_M_headERKS2_>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4618      	mov	r0, r3
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}

080005da <_ZSt12__get_helperILj0EP8InputPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80005e2:	6878      	ldr	r0, [r7, #4]
 80005e4:	f000 f810 	bl	8000608 <_ZNSt11_Tuple_implILj0EJP8InputPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 80005e8:	4603      	mov	r3, r0
 80005ea:	4618      	mov	r0, r3
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <_ZNSt10_Head_baseILj0EP17RTC_HandleTypeDefLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80005f2:	b480      	push	{r7}
 80005f4:	b083      	sub	sp, #12
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <_ZNSt11_Tuple_implILj0EJP8InputPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f805 	bl	8000622 <_ZNSt10_Head_baseILj0EP8InputPinLb0EE7_M_headERKS2_>
 8000618:	4603      	mov	r3, r0
 800061a:	4618      	mov	r0, r3
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <_ZNSt10_Head_baseILj0EP8InputPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8000622:	b480      	push	{r7}
 8000624:	b083      	sub	sp, #12
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4618      	mov	r0, r3
 800062e:	370c      	adds	r7, #12
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <_ZN11ApplicationC1EP6AppArg>:

#include "Application.hpp"



Application::Application(AppArg *apparg){};
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
 8000642:	4a05      	ldr	r2, [pc, #20]	; (8000658 <_ZN11ApplicationC1EP6AppArg+0x20>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	4618      	mov	r0, r3
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	080052c0 	.word	0x080052c0

0800065c <_ZN11ApplicationD1Ev>:

Application::~Application(){};
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <_ZN11ApplicationD1Ev+0x1c>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	080052c0 	.word	0x080052c0

0800067c <_ZN11Application3runEP6AppArg>:

 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_ZN8InputPinC1EP12GPIO_TypeDeftb>:
 */


#include "InputPin.hpp"

InputPin::InputPin(GPIO_TypeDef *ptrPort, uint16_t pin, bool logic_invert){
 8000692:	b580      	push	{r7, lr}
 8000694:	b084      	sub	sp, #16
 8000696:	af00      	add	r7, sp, #0
 8000698:	60f8      	str	r0, [r7, #12]
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	4611      	mov	r1, r2
 800069e:	461a      	mov	r2, r3
 80006a0:	460b      	mov	r3, r1
 80006a2:	80fb      	strh	r3, [r7, #6]
 80006a4:	4613      	mov	r3, r2
 80006a6:	717b      	strb	r3, [r7, #5]
	_ptrPort = ptrPort;
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	601a      	str	r2, [r3, #0]
	_pin = pin;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	88fa      	ldrh	r2, [r7, #6]
 80006b2:	809a      	strh	r2, [r3, #4]
	_logic_invert = logic_invert;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	797a      	ldrb	r2, [r7, #5]
 80006b8:	719a      	strb	r2, [r3, #6]

	_HOLD_MS = 1000;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80006c0:	811a      	strh	r2, [r3, #8]

	_pin_state = (HAL_GPIO_ReadPin(_ptrPort, _pin) == GPIO_PIN_SET);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	889b      	ldrh	r3, [r3, #4]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4610      	mov	r0, r2
 80006ce:	f002 faff 	bl	8002cd0 <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	bf0c      	ite	eq
 80006d8:	2301      	moveq	r3, #1
 80006da:	2300      	movne	r3, #0
 80006dc:	b2da      	uxtb	r2, r3
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	745a      	strb	r2, [r3, #17]
	_pin_state ^= _logic_invert;
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	7c5a      	ldrb	r2, [r3, #17]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	799b      	ldrb	r3, [r3, #6]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	745a      	strb	r2, [r3, #17]
	_b_pin_state = _pin_state;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	7c5a      	ldrb	r2, [r3, #17]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	749a      	strb	r2, [r3, #18]

	_state = INPUTPIN_STATE_IDLE;
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	2200      	movs	r2, #0
 8000704:	741a      	strb	r2, [r3, #16]
}
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	4618      	mov	r0, r3
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}

08000710 <_ZN8InputPin5fetchEv>:

void InputPin::fetch(){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	_b_pin_state = _pin_state;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	7c5a      	ldrb	r2, [r3, #17]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	749a      	strb	r2, [r3, #18]
	_pin_state = (HAL_GPIO_ReadPin(_ptrPort, _pin) == GPIO_PIN_SET);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	889b      	ldrh	r3, [r3, #4]
 8000728:	4619      	mov	r1, r3
 800072a:	4610      	mov	r0, r2
 800072c:	f002 fad0 	bl	8002cd0 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b01      	cmp	r3, #1
 8000734:	bf0c      	ite	eq
 8000736:	2301      	moveq	r3, #1
 8000738:	2300      	movne	r3, #0
 800073a:	b2da      	uxtb	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	745a      	strb	r2, [r3, #17]
	_pin_state ^= _logic_invert;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7c5a      	ldrb	r2, [r3, #17]
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	799b      	ldrb	r3, [r3, #6]
 8000748:	429a      	cmp	r2, r3
 800074a:	bf14      	ite	ne
 800074c:	2301      	movne	r3, #1
 800074e:	2300      	moveq	r3, #0
 8000750:	b2da      	uxtb	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	745a      	strb	r2, [r3, #17]
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <_ZN8InputPin6updateEv>:

void InputPin::update(){
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	uint32_t time_now = HAL_GetTick();
 8000768:	f001 fff6 	bl	8002758 <HAL_GetTick>
 800076c:	60f8      	str	r0, [r7, #12]

	switch(_state){
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	7c1b      	ldrb	r3, [r3, #16]
 8000772:	3b05      	subs	r3, #5
 8000774:	2b01      	cmp	r3, #1
 8000776:	d803      	bhi.n	8000780 <_ZN8InputPin6updateEv+0x20>
	case INPUTPIN_FIRST_RELEASE:
	case INPUTPIN_FIRST_HOLD_RELEASE:
		_state = INPUTPIN_STATE_IDLE;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2200      	movs	r2, #0
 800077c:	741a      	strb	r2, [r3, #16]
		break;
 800077e:	bf00      	nop
	}
	if (_pin_state == true){
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7c5b      	ldrb	r3, [r3, #17]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d12c      	bne.n	80007e2 <_ZN8InputPin6updateEv+0x82>
		switch(_state){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	7c1b      	ldrb	r3, [r3, #16]
 800078c:	2b04      	cmp	r3, #4
 800078e:	d83c      	bhi.n	800080a <_ZN8InputPin6updateEv+0xaa>
 8000790:	a201      	add	r2, pc, #4	; (adr r2, 8000798 <_ZN8InputPin6updateEv+0x38>)
 8000792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000796:	bf00      	nop
 8000798:	080007ad 	.word	0x080007ad
 800079c:	080007bb 	.word	0x080007bb
 80007a0:	080007c3 	.word	0x080007c3
 80007a4:	080007db 	.word	0x080007db
 80007a8:	0800080b 	.word	0x0800080b
		case INPUTPIN_STATE_IDLE:
			_state = INPUTPIN_FIRST_PRESS;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2201      	movs	r2, #1
 80007b0:	741a      	strb	r2, [r3, #16]
			_time_press = time_now;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	60da      	str	r2, [r3, #12]
			break;
 80007b8:	e027      	b.n	800080a <_ZN8InputPin6updateEv+0xaa>
		case INPUTPIN_FIRST_PRESS:
			_state = INPUTPIN_STATE_PRESS;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2202      	movs	r2, #2
 80007be:	741a      	strb	r2, [r3, #16]
			break;
 80007c0:	e023      	b.n	800080a <_ZN8InputPin6updateEv+0xaa>
		case INPUTPIN_STATE_PRESS:
			if ((time_now - _time_press) > _HOLD_MS){
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	68db      	ldr	r3, [r3, #12]
 80007c6:	68fa      	ldr	r2, [r7, #12]
 80007c8:	1ad3      	subs	r3, r2, r3
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	8912      	ldrh	r2, [r2, #8]
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d91a      	bls.n	8000808 <_ZN8InputPin6updateEv+0xa8>
				_state = INPUTPIN_FIRST_HOLD;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2203      	movs	r2, #3
 80007d6:	741a      	strb	r2, [r3, #16]
			}
			break;
 80007d8:	e016      	b.n	8000808 <_ZN8InputPin6updateEv+0xa8>
		case INPUTPIN_FIRST_HOLD:
			_state = INPUTPIN_STATE_HOLD;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2204      	movs	r2, #4
 80007de:	741a      	strb	r2, [r3, #16]
			break;
 80007e0:	e013      	b.n	800080a <_ZN8InputPin6updateEv+0xaa>
		case INPUTPIN_STATE_HOLD:
			break;
		}
	}else{
		switch(_state){
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7c1b      	ldrb	r3, [r3, #16]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	dc02      	bgt.n	80007f0 <_ZN8InputPin6updateEv+0x90>
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	dc04      	bgt.n	80007f8 <_ZN8InputPin6updateEv+0x98>
 80007ee:	e00c      	b.n	800080a <_ZN8InputPin6updateEv+0xaa>
 80007f0:	3b03      	subs	r3, #3
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d809      	bhi.n	800080a <_ZN8InputPin6updateEv+0xaa>
 80007f6:	e003      	b.n	8000800 <_ZN8InputPin6updateEv+0xa0>
		case INPUTPIN_FIRST_PRESS:
		case INPUTPIN_STATE_PRESS:
			_state = INPUTPIN_FIRST_RELEASE;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2205      	movs	r2, #5
 80007fc:	741a      	strb	r2, [r3, #16]
			break;
 80007fe:	e004      	b.n	800080a <_ZN8InputPin6updateEv+0xaa>
		case INPUTPIN_FIRST_HOLD:
		case INPUTPIN_STATE_HOLD:
			_state = INPUTPIN_FIRST_HOLD_RELEASE;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2206      	movs	r2, #6
 8000804:	741a      	strb	r2, [r3, #16]
			break;
 8000806:	e000      	b.n	800080a <_ZN8InputPin6updateEv+0xaa>
			break;
 8000808:	bf00      	nop
		}
	}
	_b_pin_state = _pin_state;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7c5a      	ldrb	r2, [r3, #17]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	749a      	strb	r2, [r3, #18]
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop

0800081c <_ZN8InputPin13getFirstPressEv>:

bool InputPin::get(){
  return _pin_state;
}

bool InputPin::getFirstPress(){
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	return _state == INPUTPIN_FIRST_PRESS;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	7c1b      	ldrb	r3, [r3, #16]
 8000828:	2b01      	cmp	r3, #1
 800082a:	bf0c      	ite	eq
 800082c:	2301      	moveq	r3, #1
 800082e:	2300      	movne	r3, #0
 8000830:	b2db      	uxtb	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <_ZN8InputPin12getFirstHoldEv>:

bool InputPin::getPress(){
	return _state == INPUTPIN_STATE_PRESS;
}

bool InputPin::getFirstHold(){
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	return _state == INPUTPIN_FIRST_HOLD;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7c1b      	ldrb	r3, [r3, #16]
 800084a:	2b03      	cmp	r3, #3
 800084c:	bf0c      	ite	eq
 800084e:	2301      	moveq	r3, #1
 8000850:	2300      	movne	r3, #0
 8000852:	b2db      	uxtb	r3, r3
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <_ZN8InputPin7getHoldEv>:

bool InputPin::getHold(){
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	return _state == INPUTPIN_STATE_HOLD;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	7c1b      	ldrb	r3, [r3, #16]
 800086c:	2b04      	cmp	r3, #4
 800086e:	bf0c      	ite	eq
 8000870:	2301      	moveq	r3, #1
 8000872:	2300      	movne	r3, #0
 8000874:	b2db      	uxtb	r3, r3
}
 8000876:	4618      	mov	r0, r3
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
	...

08000884 <_ZN11SimpleClockC1EP6AppArg>:
 *      Author: owner
 */

#include "SimpleClock.hpp"

SimpleClock::SimpleClock(AppArg *apparg) : Application(apparg)
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6839      	ldr	r1, [r7, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fed0 	bl	8000638 <_ZN11ApplicationC1EP6AppArg>
 8000898:	4a09      	ldr	r2, [pc, #36]	; (80008c0 <_ZN11SimpleClockC1EP6AppArg+0x3c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]
{
  setHour(0);
 800089e:	2000      	movs	r0, #0
 80008a0:	f000 f908 	bl	8000ab4 <_Z7setHourh>
  setMinute(0);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 f931 	bl	8000b0c <_Z9setMinuteh>
  setSecond(0);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 f94e 	bl	8000b4c <_Z9setSecondh>

  disp_mode = false;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	771a      	strb	r2, [r3, #28]
};
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	080052cc 	.word	0x080052cc

080008c4 <_ZN11SimpleClock3runEP6AppArg>:

SimpleClock::~SimpleClock(){};

void SimpleClock::run(AppArg *apparg)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
  HAL_RTC_GetTime(apparg->hrtc.get(), &gTime, RTC_FORMAT_BIN);
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	330c      	adds	r3, #12
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fe0c 	bl	80004f0 <_ZNKSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE3getEv>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3304      	adds	r3, #4
 80008dc:	2200      	movs	r2, #0
 80008de:	4619      	mov	r1, r3
 80008e0:	f003 febb 	bl	800465a <HAL_RTC_GetTime>
  HAL_RTC_GetDate(apparg->hrtc.get(), &gDate, RTC_FORMAT_BIN);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	330c      	adds	r3, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fe01 	bl	80004f0 <_ZNKSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE3getEv>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3318      	adds	r3, #24
 80008f2:	2200      	movs	r2, #0
 80008f4:	4619      	mov	r1, r3
 80008f6:	f003 ff0c 	bl	8004712 <HAL_RTC_GetDate>

  if (apparg->sw2->getFirstHold())
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	3304      	adds	r3, #4
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fe03 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000904:	4603      	mov	r3, r0
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff99 	bl	800083e <_ZN8InputPin12getFirstHoldEv>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d006      	beq.n	8000920 <_ZN11SimpleClock3runEP6AppArg+0x5c>
  {
    disp_mode = !disp_mode;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	7f1b      	ldrb	r3, [r3, #28]
 8000916:	f083 0301 	eor.w	r3, r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	771a      	strb	r2, [r3, #28]
  }

  if (disp_mode)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	7f1b      	ldrb	r3, [r3, #28]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d004      	beq.n	8000932 <_ZN11SimpleClock3runEP6AppArg+0x6e>
  {
    start_ms = HAL_GetTick();
 8000928:	f001 ff16 	bl	8002758 <HAL_GetTick>
 800092c:	4603      	mov	r3, r0
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <_ZN11SimpleClock3runEP6AppArg+0x94>)
 8000930:	6013      	str	r3, [r2, #0]
  }


  setHour(gTime.Hours);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	791b      	ldrb	r3, [r3, #4]
 8000936:	4618      	mov	r0, r3
 8000938:	f000 f8bc 	bl	8000ab4 <_Z7setHourh>
  setMinute(gTime.Minutes);
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	795b      	ldrb	r3, [r3, #5]
 8000940:	4618      	mov	r0, r3
 8000942:	f000 f8e3 	bl	8000b0c <_Z9setMinuteh>
  setSecond(gTime.Seconds);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	799b      	ldrb	r3, [r3, #6]
 800094a:	4618      	mov	r0, r3
 800094c:	f000 f8fe 	bl	8000b4c <_Z9setSecondh>
};
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000218 	.word	0x20000218

0800095c <_Z6setHiZP12GPIO_TypeDeft>:
		{ LD3, LD6},
};



void setHiZ(GPIO_TypeDef* port, uint16_t pin){
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8000978:	887b      	ldrh	r3, [r7, #2]
 800097a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(port , &GPIO_InitStruct);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4619      	mov	r1, r3
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f002 f826 	bl	80029dc <HAL_GPIO_Init>
}
 8000990:	bf00      	nop
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_Z6outputP12GPIO_TypeDeft13GPIO_PinState>:

void output(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state){
 8000998:	b580      	push	{r7, lr}
 800099a:	b088      	sub	sp, #32
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	807b      	strh	r3, [r7, #2]
 80009a4:	4613      	mov	r3, r2
 80009a6:	707b      	strb	r3, [r7, #1]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a8:	f107 030c 	add.w	r3, r7, #12
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 80009b8:	887b      	ldrh	r3, [r7, #2]
 80009ba:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80009c8:	f107 030c 	add.w	r3, r7, #12
 80009cc:	4619      	mov	r1, r3
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f002 f804 	bl	80029dc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(port, pin, state);
 80009d4:	787a      	ldrb	r2, [r7, #1]
 80009d6:	887b      	ldrh	r3, [r7, #2]
 80009d8:	4619      	mov	r1, r3
 80009da:	6878      	ldr	r0, [r7, #4]
 80009dc:	f002 f990 	bl	8002d00 <HAL_GPIO_WritePin>
}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <_Z5unlitv>:

void unlit(){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i<11; i++){
 80009ee:	2300      	movs	r3, #0
 80009f0:	71fb      	strb	r3, [r7, #7]
 80009f2:	e00e      	b.n	8000a12 <_Z5unlitv+0x2a>
		setHiZ(gpio_port[i], gpio_pin[i]);
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <_Z5unlitv+0x3c>)
 80009f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	490a      	ldr	r1, [pc, #40]	; (8000a28 <_Z5unlitv+0x40>)
 8000a00:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a04:	4619      	mov	r1, r3
 8000a06:	4610      	mov	r0, r2
 8000a08:	f7ff ffa8 	bl	800095c <_Z6setHiZP12GPIO_TypeDeft>
	for (uint8_t i=0; i<11; i++){
 8000a0c:	79fb      	ldrb	r3, [r7, #7]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	71fb      	strb	r3, [r7, #7]
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b0a      	cmp	r3, #10
 8000a16:	d9ed      	bls.n	80009f4 <_Z5unlitv+0xc>
	}
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000000 	.word	0x20000000
 8000a28:	2000002c 	.word	0x2000002c

08000a2c <_Z6litLEDh>:

void litLED(uint8_t num){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* p_port, *n_port;
	uint16_t p_pin, n_pin;

	unlit();
 8000a36:	f7ff ffd7 	bl	80009e8 <_Z5unlitv>

	p_port = gpio_port[led_wiring[num][1]];
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <_Z6litLEDh+0x7c>)
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	785b      	ldrb	r3, [r3, #1]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <_Z6litLEDh+0x80>)
 8000a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a4c:	617b      	str	r3, [r7, #20]
	p_pin = gpio_pin[led_wiring[num][1]];
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <_Z6litLEDh+0x7c>)
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	785b      	ldrb	r3, [r3, #1]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_Z6litLEDh+0x84>)
 8000a5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a60:	827b      	strh	r3, [r7, #18]
	n_port = gpio_port[led_wiring[num][0]];
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <_Z6litLEDh+0x7c>)
 8000a66:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <_Z6litLEDh+0x80>)
 8000a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a72:	60fb      	str	r3, [r7, #12]
	n_pin = gpio_pin[led_wiring[num][0]];
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4a0c      	ldr	r2, [pc, #48]	; (8000aa8 <_Z6litLEDh+0x7c>)
 8000a78:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <_Z6litLEDh+0x84>)
 8000a80:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000a84:	817b      	strh	r3, [r7, #10]
	output(p_port, p_pin, GPIO_PIN_SET);
 8000a86:	8a7b      	ldrh	r3, [r7, #18]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	6978      	ldr	r0, [r7, #20]
 8000a8e:	f7ff ff83 	bl	8000998 <_Z6outputP12GPIO_TypeDeft13GPIO_PinState>
	output(n_port, n_pin, GPIO_PIN_RESET);
 8000a92:	897b      	ldrh	r3, [r7, #10]
 8000a94:	2200      	movs	r2, #0
 8000a96:	4619      	mov	r1, r3
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f7ff ff7d 	bl	8000998 <_Z6outputP12GPIO_TypeDeft13GPIO_PinState>
}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000044 	.word	0x20000044
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	2000002c 	.word	0x2000002c

08000ab4 <_Z7setHourh>:


void setHour(uint8_t _hour)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  static uint8_t _b = 0xff;
  if (_b == _hour)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <_Z7setHourh+0x4c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d015      	beq.n	8000af4 <_Z7setHourh+0x40>
    return;
  _hour = _hour < 0 ? 0 : _hour;
  _hour = _hour > 23 ? 23 : _hour;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b17      	cmp	r3, #23
 8000acc:	bf28      	it	cs
 8000ace:	2317      	movcs	r3, #23
 8000ad0:	71fb      	strb	r3, [r7, #7]
  hour = _hour % 12;
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <_Z7setHourh+0x50>)
 8000ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8000ada:	08d9      	lsrs	r1, r3, #3
 8000adc:	460b      	mov	r3, r1
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	440b      	add	r3, r1
 8000ae2:	009b      	lsls	r3, r3, #2
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <_Z7setHourh+0x54>)
 8000aea:	701a      	strb	r2, [r3, #0]
  _b = _hour;
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <_Z7setHourh+0x4c>)
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	7013      	strb	r3, [r2, #0]
 8000af2:	e000      	b.n	8000af6 <_Z7setHourh+0x42>
    return;
 8000af4:	bf00      	nop
}
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	200000d4 	.word	0x200000d4
 8000b04:	aaaaaaab 	.word	0xaaaaaaab
 8000b08:	20000150 	.word	0x20000150

08000b0c <_Z9setMinuteh>:

void setMinute(uint8_t _minute)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	71fb      	strb	r3, [r7, #7]
  static uint8_t _b = 0xff;
  if (_b == _minute)
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <_Z9setMinuteh+0x38>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d00b      	beq.n	8000b38 <_Z9setMinuteh+0x2c>
    return;
  _minute = _minute < 0 ? 0 : _minute;
  _minute = _minute > 59 ? 59 : _minute;
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	2b3b      	cmp	r3, #59	; 0x3b
 8000b24:	bf28      	it	cs
 8000b26:	233b      	movcs	r3, #59	; 0x3b
 8000b28:	71fb      	strb	r3, [r7, #7]
  minute = _minute;
 8000b2a:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <_Z9setMinuteh+0x3c>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	7013      	strb	r3, [r2, #0]
  _b = _minute;
 8000b30:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <_Z9setMinuteh+0x38>)
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	7013      	strb	r3, [r2, #0]
 8000b36:	e000      	b.n	8000b3a <_Z9setMinuteh+0x2e>
    return;
 8000b38:	bf00      	nop
}
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	200000d5 	.word	0x200000d5
 8000b48:	20000151 	.word	0x20000151

08000b4c <_Z9setSecondh>:

void setSecond(uint8_t _second)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]
  static uint8_t _b = 0xff;
  if (_b == _second)
 8000b56:	4b0b      	ldr	r3, [pc, #44]	; (8000b84 <_Z9setSecondh+0x38>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	79fa      	ldrb	r2, [r7, #7]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d00b      	beq.n	8000b78 <_Z9setSecondh+0x2c>
    return;
  _second = _second < 0 ? 0 : _second;
  _second = _second > 59 ? 59 : _second;
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	2b3b      	cmp	r3, #59	; 0x3b
 8000b64:	bf28      	it	cs
 8000b66:	233b      	movcs	r3, #59	; 0x3b
 8000b68:	71fb      	strb	r3, [r7, #7]
  second = _second;
 8000b6a:	4a07      	ldr	r2, [pc, #28]	; (8000b88 <_Z9setSecondh+0x3c>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	7013      	strb	r3, [r2, #0]
  _b = _second;
 8000b70:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <_Z9setSecondh+0x38>)
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	7013      	strb	r3, [r2, #0]
 8000b76:	e000      	b.n	8000b7a <_Z9setSecondh+0x2e>
    return;
 8000b78:	bf00      	nop
}
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	200000d6 	.word	0x200000d6
 8000b88:	20000152 	.word	0x20000152

08000b8c <_ZNSt5tupleIJP6AppArgSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f805 	bl	8000ba6 <_ZNSt11_Tuple_implILj0EJP6AppArgSt14default_deleteIS0_EEEC2Ev>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <_ZNSt11_Tuple_implILj0EJP6AppArgSt14default_deleteIS0_EEEC2Ev>:
      constexpr _Tuple_impl()
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f000 f809 	bl	8000bc6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6AppArgEEEC2Ev>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f000 f81c 	bl	8000bf4 <_ZNSt10_Head_baseILj0EP6AppArgLb0EEC2Ev>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6AppArgEEEC2Ev>:
      _Tuple_impl()
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f000 f805 	bl	8000bde <_ZNSt10_Head_baseILj1ESt14default_deleteI6AppArgELb1EEC2Ev>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <_ZNSt10_Head_baseILj1ESt14default_deleteI6AppArgELb1EEC2Ev>:
      constexpr _Head_base()
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4618      	mov	r0, r3
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <_ZNSt10_Head_baseILj0EP6AppArgLb0EEC2Ev>:
      constexpr _Head_base()
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_Z14EnterStop2Modev>:
    Error_Handler();
  }
}

void EnterStop2Mode(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  // TIM6割り込みを無効にする
  HAL_TIM_Base_Stop_IT(&htim6);
 8000c14:	4804      	ldr	r0, [pc, #16]	; (8000c28 <_Z14EnterStop2Modev+0x18>)
 8000c16:	f003 ff45 	bl	8004aa4 <HAL_TIM_Base_Stop_IT>

  unlit();
 8000c1a:	f7ff fee5 	bl	80009e8 <_Z5unlitv>
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f002 fac0 	bl	80031a4 <HAL_PWREx_EnterSTOP2Mode>
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200001cc 	.word	0x200001cc

08000c2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  static uint8_t phaze = 0;

  if (htim == &htim6)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a1c      	ldr	r2, [pc, #112]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d130      	bne.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x72>
  {
    if (++phaze >= 3)
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b19      	ldr	r3, [pc, #100]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c46:	701a      	strb	r2, [r3, #0]
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	bf8c      	ite	hi
 8000c50:	2301      	movhi	r3, #1
 8000c52:	2300      	movls	r3, #0
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d002      	beq.n	8000c60 <HAL_TIM_PeriodElapsedCallback+0x34>
      phaze = 0;
 8000c5a:	4b14      	ldr	r3, [pc, #80]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	701a      	strb	r2, [r3, #0]

    switch (phaze)
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d014      	beq.n	8000c92 <HAL_TIM_PeriodElapsedCallback+0x66>
 8000c68:	2b02      	cmp	r3, #2
 8000c6a:	dc18      	bgt.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x72>
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d002      	beq.n	8000c76 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d008      	beq.n	8000c86 <HAL_TIM_PeriodElapsedCallback+0x5a>
    case 2:
      litLED(second);
      break;
    }
  }
}
 8000c74:	e013      	b.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x72>
      litLED(60 + hour);
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	333c      	adds	r3, #60	; 0x3c
 8000c7c:	b2db      	uxtb	r3, r3
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fed4 	bl	8000a2c <_Z6litLEDh>
      break;
 8000c84:	e00b      	b.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x72>
      litLED(minute);
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fece 	bl	8000a2c <_Z6litLEDh>
      break;
 8000c90:	e005      	b.n	8000c9e <HAL_TIM_PeriodElapsedCallback+0x72>
      litLED(second);
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fec8 	bl	8000a2c <_Z6litLEDh>
      break;
 8000c9c:	bf00      	nop
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	200001cc 	.word	0x200001cc
 8000cac:	20000220 	.word	0x20000220
 8000cb0:	20000150 	.word	0x20000150
 8000cb4:	20000151 	.word	0x20000151
 8000cb8:	20000152 	.word	0x20000152

08000cbc <_ZNSt15__uniq_ptr_dataI6AppArgSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	4611      	mov	r1, r2
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 fc5e 	bl	800158e <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EEaSEOS3_>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	4611      	mov	r1, r2
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ffe5 	bl	8000cbc <_ZNSt15__uniq_ptr_dataI6AppArgSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <_ZNSt15__uniq_ptr_dataI8InputPinSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f000 fcb3 	bl	8001678 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EEaSEOS3_>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4618      	mov	r0, r3
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ffe5 	bl	8000cfc <_ZNSt15__uniq_ptr_dataI8InputPinSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <_ZNSt15__uniq_ptr_dataI17RTC_HandleTypeDefSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	683a      	ldr	r2, [r7, #0]
 8000d4a:	4611      	mov	r1, r2
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f000 fcee 	bl	800172e <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EEaSEOS3_>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4618      	mov	r0, r3
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ffe5 	bl	8000d3c <_ZNSt15__uniq_ptr_dataI17RTC_HandleTypeDefSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d7c:	b5b0      	push	{r4, r5, r7, lr}
 8000d7e:	b094      	sub	sp, #80	; 0x50
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d82:	f001 fc80 	bl	8002686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d86:	f000 f973 	bl	8001070 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8a:	f000 fa91 	bl	80012b0 <_ZL12MX_GPIO_Initv>
  MX_RTC_Init();
 8000d8e:	f000 fa21 	bl	80011d4 <_ZL11MX_RTC_Initv>
  MX_I2C3_Init();
 8000d92:	f000 f9d1 	bl	8001138 <_ZL12MX_I2C3_Initv>
  MX_TIM6_Init();
 8000d96:	f000 fa4b 	bl	8001230 <_ZL12MX_TIM6_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  apparg = std::make_unique<AppArg>();
 8000d9a:	f107 0320 	add.w	r3, r7, #32
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 fbb9 	bl	8001516 <_ZSt11make_uniqueI6AppArgJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000da4:	f107 0320 	add.w	r3, r7, #32
 8000da8:	4619      	mov	r1, r3
 8000daa:	48ac      	ldr	r0, [pc, #688]	; (800105c <main+0x2e0>)
 8000dac:	f7ff ff96 	bl	8000cdc <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EEaSEOS3_>
 8000db0:	f107 0320 	add.w	r3, r7, #32
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fbc8 	bl	800154a <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EED1Ev>
  apparg->sw1 = std::make_unique<InputPin>(SW1_GPIO_Port, SW1_Pin, INPUTPIN_NEGATIVE_LOGIC);
 8000dba:	48a8      	ldr	r0, [pc, #672]	; (800105c <main+0x2e0>)
 8000dbc:	f000 fc03 	bl	80015c6 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461c      	mov	r4, r3
 8000dc4:	4ba6      	ldr	r3, [pc, #664]	; (8001060 <main+0x2e4>)
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dcc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000dce:	2301      	movs	r3, #1
 8000dd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000dd4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000dd8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000ddc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000de0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000de4:	f000 fbfb 	bl	80015de <_ZSt11make_uniqueI8InputPinJP12GPIO_TypeDeftbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000de8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dec:	4619      	mov	r1, r3
 8000dee:	4620      	mov	r0, r4
 8000df0:	f7ff ff94 	bl	8000d1c <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEaSEOS3_>
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fc1b 	bl	8001634 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>
  apparg->sw2 = std::make_unique<InputPin>(SW2_GPIO_Port, SW2_Pin, INPUTPIN_NEGATIVE_LOGIC);
 8000dfe:	4897      	ldr	r0, [pc, #604]	; (800105c <main+0x2e0>)
 8000e00:	f000 fbe1 	bl	80015c6 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000e04:	4603      	mov	r3, r0
 8000e06:	1d1c      	adds	r4, r3, #4
 8000e08:	4b95      	ldr	r3, [pc, #596]	; (8001060 <main+0x2e4>)
 8000e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	873b      	strh	r3, [r7, #56]	; 0x38
 8000e10:	2301      	movs	r3, #1
 8000e12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000e16:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000e1a:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8000e1e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000e22:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000e26:	f000 fbda 	bl	80015de <_ZSt11make_uniqueI8InputPinJP12GPIO_TypeDeftbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000e2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4620      	mov	r0, r4
 8000e32:	f7ff ff73 	bl	8000d1c <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEaSEOS3_>
 8000e36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f000 fbfa 	bl	8001634 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>
  apparg->sw3 = std::make_unique<InputPin>(SW3_GPIO_Port, SW3_Pin, INPUTPIN_NEGATIVE_LOGIC);
 8000e40:	4886      	ldr	r0, [pc, #536]	; (800105c <main+0x2e0>)
 8000e42:	f000 fbc0 	bl	80015c6 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f103 0408 	add.w	r4, r3, #8
 8000e4c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e50:	643b      	str	r3, [r7, #64]	; 0x40
 8000e52:	2308      	movs	r3, #8
 8000e54:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000e5e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000e62:	f107 0347 	add.w	r3, r7, #71	; 0x47
 8000e66:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000e6a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000e6e:	f000 fbb6 	bl	80015de <_ZSt11make_uniqueI8InputPinJP12GPIO_TypeDeftbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000e72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e76:	4619      	mov	r1, r3
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f7ff ff4f 	bl	8000d1c <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEaSEOS3_>
 8000e7e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 fbd6 	bl	8001634 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>

  apparg->hrtc = std::make_unique<RTC_HandleTypeDef>(hrtc);
 8000e88:	4874      	ldr	r0, [pc, #464]	; (800105c <main+0x2e0>)
 8000e8a:	f000 fb9c 	bl	80015c6 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	f103 040c 	add.w	r4, r3, #12
 8000e94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e98:	4972      	ldr	r1, [pc, #456]	; (8001064 <main+0x2e8>)
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fc08 	bl	80016b0 <_ZSt11make_uniqueI17RTC_HandleTypeDefJRS0_EENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000ea0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	f7ff ff58 	bl	8000d5c <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EEaSEOS3_>
 8000eac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fc1a 	bl	80016ea <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EED1Ev>

  HAL_TIM_Base_Start_IT(&htim6);
 8000eb6:	486c      	ldr	r0, [pc, #432]	; (8001068 <main+0x2ec>)
 8000eb8:	f003 fda0 	bl	80049fc <HAL_TIM_Base_Start_IT>

  start_ms = HAL_GetTick();
 8000ebc:	f001 fc4c 	bl	8002758 <HAL_GetTick>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a6a      	ldr	r2, [pc, #424]	; (800106c <main+0x2f0>)
 8000ec4:	6013      	str	r3, [r2, #0]

  std::unique_ptr<Application> app;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
  app.reset(new SimpleClock(apparg.get()));
 8000eca:	4864      	ldr	r0, [pc, #400]	; (800105c <main+0x2e0>)
 8000ecc:	f000 fc4b 	bl	8001766 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EE3getEv>
 8000ed0:	4605      	mov	r5, r0
 8000ed2:	2020      	movs	r0, #32
 8000ed4:	f004 f82a 	bl	8004f2c <_Znwj>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461c      	mov	r4, r3
 8000edc:	4629      	mov	r1, r5
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f7ff fcd0 	bl	8000884 <_ZN11SimpleClockC1EP6AppArg>
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4621      	mov	r1, r4
 8000eea:	4618      	mov	r0, r3
 8000eec:	f000 fc48 	bl	8001780 <_ZNSt10unique_ptrI11ApplicationSt14default_deleteIS0_EE5resetEPS0_>

  RTC_TimeTypeDef gTime;
  RTC_DateTypeDef gDate;

  uint8_t mode = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    apparg->sw1->fetch();
 8000ef6:	4859      	ldr	r0, [pc, #356]	; (800105c <main+0x2e0>)
 8000ef8:	f000 fb65 	bl	80015c6 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fb03 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fc02 	bl	8000710 <_ZN8InputPin5fetchEv>
    apparg->sw2->fetch();
 8000f0c:	4853      	ldr	r0, [pc, #332]	; (800105c <main+0x2e0>)
 8000f0e:	f000 fb5a 	bl	80015c6 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000f12:	4603      	mov	r3, r0
 8000f14:	3304      	adds	r3, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff faf7 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff fbf6 	bl	8000710 <_ZN8InputPin5fetchEv>
    apparg->sw3->fetch();
 8000f24:	484d      	ldr	r0, [pc, #308]	; (800105c <main+0x2e0>)
 8000f26:	f000 fb4e 	bl	80015c6 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	3308      	adds	r3, #8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff faeb 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fbea 	bl	8000710 <_ZN8InputPin5fetchEv>
    apparg->sw1->update();
 8000f3c:	4847      	ldr	r0, [pc, #284]	; (800105c <main+0x2e0>)
 8000f3e:	f000 fb42 	bl	80015c6 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fae0 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fc07 	bl	8000760 <_ZN8InputPin6updateEv>
    apparg->sw2->update();
 8000f52:	4842      	ldr	r0, [pc, #264]	; (800105c <main+0x2e0>)
 8000f54:	f000 fb37 	bl	80015c6 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	3304      	adds	r3, #4
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fad4 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fbfb 	bl	8000760 <_ZN8InputPin6updateEv>
    apparg->sw3->update();
 8000f6a:	483c      	ldr	r0, [pc, #240]	; (800105c <main+0x2e0>)
 8000f6c:	f000 fb2b 	bl	80015c6 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000f70:	4603      	mov	r3, r0
 8000f72:	3308      	adds	r3, #8
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fac8 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fbef 	bl	8000760 <_ZN8InputPin6updateEv>

    if (apparg->sw1->getFirstHold())
 8000f82:	4836      	ldr	r0, [pc, #216]	; (800105c <main+0x2e0>)
 8000f84:	f000 fb1f 	bl	80015c6 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fabd 	bl	800050a <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fc53 	bl	800083e <_ZN8InputPin12getFirstHoldEv>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d03a      	beq.n	8001014 <main+0x298>
    {
      mode++;
 8000f9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      if (mode > 1)
 8000fa8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d902      	bls.n	8000fb6 <main+0x23a>
        mode = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      
      switch (mode){
 8000fb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d002      	beq.n	8000fc4 <main+0x248>
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d014      	beq.n	8000fec <main+0x270>
 8000fc2:	e027      	b.n	8001014 <main+0x298>
        case 0:
          app.reset(new SimpleClock(apparg.get()));
 8000fc4:	4825      	ldr	r0, [pc, #148]	; (800105c <main+0x2e0>)
 8000fc6:	f000 fbce 	bl	8001766 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EE3getEv>
 8000fca:	4605      	mov	r5, r0
 8000fcc:	2020      	movs	r0, #32
 8000fce:	f003 ffad 	bl	8004f2c <_Znwj>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	461c      	mov	r4, r3
 8000fd6:	4629      	mov	r1, r5
 8000fd8:	4620      	mov	r0, r4
 8000fda:	f7ff fc53 	bl	8000884 <_ZN11SimpleClockC1EP6AppArg>
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4621      	mov	r1, r4
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fbcb 	bl	8001780 <_ZNSt10unique_ptrI11ApplicationSt14default_deleteIS0_EE5resetEPS0_>
          break;
 8000fea:	e013      	b.n	8001014 <main+0x298>
        case 1:
          app.reset(new AdjustClock(apparg.get()));
 8000fec:	481b      	ldr	r0, [pc, #108]	; (800105c <main+0x2e0>)
 8000fee:	f000 fbba 	bl	8001766 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EE3getEv>
 8000ff2:	4605      	mov	r5, r0
 8000ff4:	2024      	movs	r0, #36	; 0x24
 8000ff6:	f003 ff99 	bl	8004f2c <_Znwj>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461c      	mov	r4, r3
 8000ffe:	4629      	mov	r1, r5
 8001000:	4620      	mov	r0, r4
 8001002:	f7ff f8e3 	bl	80001cc <_ZN11AdjustClockC1EP6AppArg>
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	4621      	mov	r1, r4
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fbb7 	bl	8001780 <_ZNSt10unique_ptrI11ApplicationSt14default_deleteIS0_EE5resetEPS0_>
          break;
 8001012:	bf00      	nop
      }
    }

    app->run(apparg.get());
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4618      	mov	r0, r3
 800101a:	f000 fbc5 	bl	80017a8 <_ZNKSt10unique_ptrI11ApplicationSt14default_deleteIS0_EEptEv>
 800101e:	4604      	mov	r4, r0
 8001020:	6823      	ldr	r3, [r4, #0]
 8001022:	681d      	ldr	r5, [r3, #0]
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <main+0x2e0>)
 8001026:	f000 fb9e 	bl	8001766 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EE3getEv>
 800102a:	4603      	mov	r3, r0
 800102c:	4619      	mov	r1, r3
 800102e:	4620      	mov	r0, r4
 8001030:	47a8      	blx	r5

    // 5秒経ったらSTOP2モードに入?��?
    if ((HAL_GetTick() - start_ms) > 5000)
 8001032:	f001 fb91 	bl	8002758 <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <main+0x2f0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001042:	4293      	cmp	r3, r2
 8001044:	bf8c      	ite	hi
 8001046:	2301      	movhi	r3, #1
 8001048:	2300      	movls	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <main+0x2d8>
    {
      EnterStop2Mode();
 8001050:	f7ff fdde 	bl	8000c10 <_Z14EnterStop2Modev>
    }
    HAL_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f001 fb8b 	bl	8002770 <HAL_Delay>
    apparg->sw1->fetch();
 800105a:	e74c      	b.n	8000ef6 <main+0x17a>
 800105c:	2000021c 	.word	0x2000021c
 8001060:	48000400 	.word	0x48000400
 8001064:	200001a8 	.word	0x200001a8
 8001068:	200001cc 	.word	0x200001cc
 800106c:	20000218 	.word	0x20000218

08001070 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b096      	sub	sp, #88	; 0x58
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2244      	movs	r2, #68	; 0x44
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f004 f834 	bl	80050ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	463b      	mov	r3, r7
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
 8001090:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001092:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001096:	f002 f82f 	bl	80030f8 <HAL_PWREx_ControlVoltageScaling>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	bf14      	ite	ne
 80010a0:	2301      	movne	r3, #1
 80010a2:	2300      	moveq	r3, #0
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 80010aa:	f000 f9a5 	bl	80013f8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 80010ae:	f001 ff95 	bl	8002fdc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <_Z18SystemClock_Configv+0xc4>)
 80010b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010b8:	4a1e      	ldr	r2, [pc, #120]	; (8001134 <_Z18SystemClock_Configv+0xc4>)
 80010ba:	f023 0318 	bic.w	r3, r3, #24
 80010be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 80010c2:	2314      	movs	r3, #20
 80010c4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010ca:	2301      	movs	r3, #1
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80010d2:	2340      	movs	r3, #64	; 0x40
 80010d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 f88c 	bl	80031fc <HAL_RCC_OscConfig>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	bf14      	ite	ne
 80010ea:	2301      	movne	r3, #1
 80010ec:	2300      	moveq	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80010f4:	f000 f980 	bl	80013f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010f8:	230f      	movs	r3, #15
 80010fa:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80010fc:	2300      	movs	r3, #0
 80010fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f002 fc87 	bl	8003a24 <HAL_RCC_ClockConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	bf14      	ite	ne
 800111c:	2301      	movne	r3, #1
 800111e:	2300      	moveq	r3, #0
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001126:	f000 f967 	bl	80013f8 <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3758      	adds	r7, #88	; 0x58
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000

08001138 <_ZL12MX_I2C3_Initv>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <_ZL12MX_I2C3_Initv+0x94>)
 800113e:	4a24      	ldr	r2, [pc, #144]	; (80011d0 <_ZL12MX_I2C3_Initv+0x98>)
 8001140:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000103;
 8001142:	4b22      	ldr	r3, [pc, #136]	; (80011cc <_ZL12MX_I2C3_Initv+0x94>)
 8001144:	f240 1203 	movw	r2, #259	; 0x103
 8001148:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800114a:	4b20      	ldr	r3, [pc, #128]	; (80011cc <_ZL12MX_I2C3_Initv+0x94>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <_ZL12MX_I2C3_Initv+0x94>)
 8001152:	2201      	movs	r2, #1
 8001154:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <_ZL12MX_I2C3_Initv+0x94>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800115c:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <_ZL12MX_I2C3_Initv+0x94>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001162:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <_ZL12MX_I2C3_Initv+0x94>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <_ZL12MX_I2C3_Initv+0x94>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800116e:	4b17      	ldr	r3, [pc, #92]	; (80011cc <_ZL12MX_I2C3_Initv+0x94>)
 8001170:	2200      	movs	r2, #0
 8001172:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001174:	4815      	ldr	r0, [pc, #84]	; (80011cc <_ZL12MX_I2C3_Initv+0x94>)
 8001176:	f001 fdfe 	bl	8002d76 <HAL_I2C_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	bf14      	ite	ne
 8001180:	2301      	movne	r3, #1
 8001182:	2300      	moveq	r3, #0
 8001184:	b2db      	uxtb	r3, r3
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 800118a:	f000 f935 	bl	80013f8 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118e:	2100      	movs	r1, #0
 8001190:	480e      	ldr	r0, [pc, #56]	; (80011cc <_ZL12MX_I2C3_Initv+0x94>)
 8001192:	f001 fe8b 	bl	8002eac <HAL_I2CEx_ConfigAnalogFilter>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	bf14      	ite	ne
 800119c:	2301      	movne	r3, #1
 800119e:	2300      	moveq	r3, #0
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <_ZL12MX_I2C3_Initv+0x72>
  {
    Error_Handler();
 80011a6:	f000 f927 	bl	80013f8 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80011aa:	2100      	movs	r1, #0
 80011ac:	4807      	ldr	r0, [pc, #28]	; (80011cc <_ZL12MX_I2C3_Initv+0x94>)
 80011ae:	f001 fec8 	bl	8002f42 <HAL_I2CEx_ConfigDigitalFilter>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	bf14      	ite	ne
 80011b8:	2301      	movne	r3, #1
 80011ba:	2300      	moveq	r3, #0
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <_ZL12MX_I2C3_Initv+0x8e>
  {
    Error_Handler();
 80011c2:	f000 f919 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000154 	.word	0x20000154
 80011d0:	40005c00 	.word	0x40005c00

080011d4 <_ZL11MX_RTC_Initv>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_ZL11MX_RTC_Initv+0x54>)
 80011da:	4a14      	ldr	r2, [pc, #80]	; (800122c <_ZL11MX_RTC_Initv+0x58>)
 80011dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011de:	4b12      	ldr	r3, [pc, #72]	; (8001228 <_ZL11MX_RTC_Initv+0x54>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011e4:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_ZL11MX_RTC_Initv+0x54>)
 80011e6:	227f      	movs	r2, #127	; 0x7f
 80011e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011ea:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <_ZL11MX_RTC_Initv+0x54>)
 80011ec:	22ff      	movs	r2, #255	; 0xff
 80011ee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <_ZL11MX_RTC_Initv+0x54>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80011f6:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <_ZL11MX_RTC_Initv+0x54>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011fc:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <_ZL11MX_RTC_Initv+0x54>)
 80011fe:	2200      	movs	r2, #0
 8001200:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <_ZL11MX_RTC_Initv+0x54>)
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001208:	4807      	ldr	r0, [pc, #28]	; (8001228 <_ZL11MX_RTC_Initv+0x54>)
 800120a:	f003 f901 	bl	8004410 <HAL_RTC_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	bf14      	ite	ne
 8001214:	2301      	movne	r3, #1
 8001216:	2300      	moveq	r3, #0
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <_ZL11MX_RTC_Initv+0x4e>
  {
    Error_Handler();
 800121e:	f000 f8eb 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200001a8 	.word	0x200001a8
 800122c:	40002800 	.word	0x40002800

08001230 <_ZL12MX_TIM6_Initv>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001236:	1d3b      	adds	r3, r7, #4
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <_ZL12MX_TIM6_Initv+0x78>)
 8001242:	4a1a      	ldr	r2, [pc, #104]	; (80012ac <_ZL12MX_TIM6_Initv+0x7c>)
 8001244:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <_ZL12MX_TIM6_Initv+0x78>)
 8001248:	2207      	movs	r2, #7
 800124a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <_ZL12MX_TIM6_Initv+0x78>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1023;
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <_ZL12MX_TIM6_Initv+0x78>)
 8001254:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001258:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800125a:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <_ZL12MX_TIM6_Initv+0x78>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001260:	4811      	ldr	r0, [pc, #68]	; (80012a8 <_ZL12MX_TIM6_Initv+0x78>)
 8001262:	f003 fb73 	bl	800494c <HAL_TIM_Base_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf14      	ite	ne
 800126c:	2301      	movne	r3, #1
 800126e:	2300      	moveq	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8001276:	f000 f8bf 	bl	80013f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4619      	mov	r1, r3
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <_ZL12MX_TIM6_Initv+0x78>)
 8001288:	f003 fdca 	bl	8004e20 <HAL_TIMEx_MasterConfigSynchronization>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	bf14      	ite	ne
 8001292:	2301      	movne	r3, #1
 8001294:	2300      	moveq	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800129c:	f000 f8ac 	bl	80013f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	200001cc 	.word	0x200001cc
 80012ac:	40001000 	.word	0x40001000

080012b0 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c6:	4b4a      	ldr	r3, [pc, #296]	; (80013f0 <_ZL12MX_GPIO_Initv+0x140>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	4a49      	ldr	r2, [pc, #292]	; (80013f0 <_ZL12MX_GPIO_Initv+0x140>)
 80012cc:	f043 0304 	orr.w	r3, r3, #4
 80012d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d2:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <_ZL12MX_GPIO_Initv+0x140>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	f003 0304 	and.w	r3, r3, #4
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <_ZL12MX_GPIO_Initv+0x140>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	4a43      	ldr	r2, [pc, #268]	; (80013f0 <_ZL12MX_GPIO_Initv+0x140>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ea:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <_ZL12MX_GPIO_Initv+0x140>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	4b3e      	ldr	r3, [pc, #248]	; (80013f0 <_ZL12MX_GPIO_Initv+0x140>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fa:	4a3d      	ldr	r2, [pc, #244]	; (80013f0 <_ZL12MX_GPIO_Initv+0x140>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <_ZL12MX_GPIO_Initv+0x140>)
 8001304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin | LED4_Pin | LED11_Pin | LED7_Pin | LED6_Pin | LED8_Pin, GPIO_PIN_RESET);
 800130e:	2200      	movs	r2, #0
 8001310:	f641 7110 	movw	r1, #7952	; 0x1f10
 8001314:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001318:	f001 fcf2 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin | LED10_Pin | LED9_Pin | LED5_Pin | LED1_Pin, GPIO_PIN_RESET);
 800131c:	2200      	movs	r2, #0
 800131e:	f44f 519b 	mov.w	r1, #4960	; 0x1360
 8001322:	4834      	ldr	r0, [pc, #208]	; (80013f4 <_ZL12MX_GPIO_Initv+0x144>)
 8001324:	f001 fcec 	bl	8002d00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 8001328:	2308      	movs	r3, #8
 800132a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800132c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	4619      	mov	r1, r3
 800133c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001340:	f001 fb4c 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED4_Pin LED11_Pin LED7_Pin
                           LED6_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED2_Pin | LED4_Pin | LED11_Pin | LED7_Pin | LED6_Pin | LED8_Pin;
 8001344:	f641 7310 	movw	r3, #7952	; 0x1f10
 8001348:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f001 fb3c 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001364:	2301      	movs	r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	4619      	mov	r1, r3
 8001376:	481f      	ldr	r0, [pc, #124]	; (80013f4 <_ZL12MX_GPIO_Initv+0x144>)
 8001378:	f001 fb30 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED10_Pin LED9_Pin LED5_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin | LED10_Pin | LED9_Pin | LED5_Pin | LED1_Pin;
 800137c:	f44f 539b 	mov.w	r3, #4960	; 0x1360
 8001380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	4619      	mov	r1, r3
 8001394:	4817      	ldr	r0, [pc, #92]	; (80013f4 <_ZL12MX_GPIO_Initv+0x144>)
 8001396:	f001 fb21 	bl	80029dc <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin | SW2_Pin;
 800139a:	f248 0380 	movw	r3, #32896	; 0x8080
 800139e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	4619      	mov	r1, r3
 80013b0:	4810      	ldr	r0, [pc, #64]	; (80013f4 <_ZL12MX_GPIO_Initv+0x144>)
 80013b2:	f001 fb13 	bl	80029dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2009      	movs	r0, #9
 80013bc:	f001 fad7 	bl	800296e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013c0:	2009      	movs	r0, #9
 80013c2:	f001 faf0 	bl	80029a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	2017      	movs	r0, #23
 80013cc:	f001 facf 	bl	800296e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013d0:	2017      	movs	r0, #23
 80013d2:	f001 fae8 	bl	80029a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2028      	movs	r0, #40	; 0x28
 80013dc:	f001 fac7 	bl	800296e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013e0:	2028      	movs	r0, #40	; 0x28
 80013e2:	f001 fae0 	bl	80029a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013e6:	bf00      	nop
 80013e8:	3720      	adds	r7, #32
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	48000400 	.word	0x48000400

080013f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013fc:	b672      	cpsid	i
}
 80013fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001400:	e7fe      	b.n	8001400 <Error_Handler+0x8>

08001402 <_ZNSt5tupleIJP8InputPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4618      	mov	r0, r3
 800140e:	f000 f9d7 	bl	80017c0 <_ZNSt11_Tuple_implILj0EJP8InputPinSt14default_deleteIS0_EEEC1Ev>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ffeb 	bl	8001402 <_ZNSt5tupleIJP8InputPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <_ZNSt15__uniq_ptr_dataI8InputPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ffeb 	bl	800141c <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EEC1Ev>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}

08001450 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	: _M_t()
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ffe8 	bl	8001436 <_ZNSt15__uniq_ptr_dataI8InputPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <_ZNSt5tupleIJP17RTC_HandleTypeDefSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f9b0 	bl	80017e0 <_ZNSt11_Tuple_implILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEEC1Ev>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ffeb 	bl	8001470 <_ZNSt5tupleIJP17RTC_HandleTypeDefSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_ZNSt15__uniq_ptr_dataI17RTC_HandleTypeDefSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ffeb 	bl	800148a <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1Ev>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
	: _M_t()
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ffe8 	bl	80014a4 <_ZNSt15__uniq_ptr_dataI17RTC_HandleTypeDefSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}

080014de <_ZN6AppArgC1Ev>:


  std::unique_ptr<RTC_HandleTypeDef> hrtc;

  
}AppArg;
 80014de:	b580      	push	{r7, lr}
 80014e0:	b082      	sub	sp, #8
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ffb1 	bl	8001450 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEC1IS2_vEEv>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3304      	adds	r3, #4
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ffac 	bl	8001450 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEC1IS2_vEEv>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3308      	adds	r3, #8
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ffa7 	bl	8001450 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEC1IS2_vEEv>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	330c      	adds	r3, #12
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ffd9 	bl	80014be <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1IS2_vEEv>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <_ZSt11make_uniqueI6AppArgJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
  /// @endcond

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 8001516:	b590      	push	{r4, r7, lr}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800151e:	2010      	movs	r0, #16
 8001520:	f003 fd04 	bl	8004f2c <_Znwj>
 8001524:	4603      	mov	r3, r0
 8001526:	461c      	mov	r4, r3
 8001528:	4622      	mov	r2, r4
 800152a:	2300      	movs	r3, #0
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	6053      	str	r3, [r2, #4]
 8001530:	6093      	str	r3, [r2, #8]
 8001532:	60d3      	str	r3, [r2, #12]
 8001534:	4620      	mov	r0, r4
 8001536:	f7ff ffd2 	bl	80014de <_ZN6AppArgC1Ev>
 800153a:	4621      	mov	r1, r4
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f000 f96f 	bl	8001820 <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	bd90      	pop	{r4, r7, pc}

0800154a <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800154a:	b590      	push	{r4, r7, lr}
 800154c:	b085      	sub	sp, #20
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	f000 f972 	bl	800183e <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 800155a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00c      	beq.n	800157e <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f000 f977 	bl	8001858 <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EE11get_deleterEv>
 800156a:	4604      	mov	r4, r0
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 f980 	bl	8001872 <_ZSt4moveIRP6AppArgEONSt16remove_referenceIT_E4typeEOS4_>
 8001572:	4603      	mov	r3, r0
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4619      	mov	r1, r3
 8001578:	4620      	mov	r0, r4
 800157a:	f000 f9a1 	bl	80018c0 <_ZNKSt14default_deleteI6AppArgEclEPS0_>
	__ptr = pointer();
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
      }
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4618      	mov	r0, r3
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	bd90      	pop	{r4, r7, pc}

0800158e <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8001598:	6838      	ldr	r0, [r7, #0]
 800159a:	f000 f9c4 	bl	8001926 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE7releaseEv>
 800159e:	4603      	mov	r3, r0
 80015a0:	4619      	mov	r1, r3
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f000 f99f 	bl	80018e6 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 80015a8:	6838      	ldr	r0, [r7, #0]
 80015aa:	f000 f9d1 	bl	8001950 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE10_M_deleterEv>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f000 f9da 	bl	800196a <_ZSt7forwardISt14default_deleteI6AppArgEEOT_RNSt16remove_referenceIS3_E4typeE>
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f9ca 	bl	8001950 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 80015bc:	687b      	ldr	r3, [r7, #4]
      }
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	return get();
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8c9 	bl	8001766 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EE3getEv>
 80015d4:	4603      	mov	r3, r0
      }
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <_ZSt11make_uniqueI8InputPinJP12GPIO_TypeDeftbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80015de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80015ee:	68b8      	ldr	r0, [r7, #8]
 80015f0:	f000 f9c6 	bl	8001980 <_ZSt7forwardIP12GPIO_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80015f4:	4603      	mov	r3, r0
 80015f6:	681c      	ldr	r4, [r3, #0]
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f9cc 	bl	8001996 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 80015fe:	4603      	mov	r3, r0
 8001600:	881d      	ldrh	r5, [r3, #0]
 8001602:	6838      	ldr	r0, [r7, #0]
 8001604:	f000 f9d2 	bl	80019ac <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 8001608:	4603      	mov	r3, r0
 800160a:	781e      	ldrb	r6, [r3, #0]
 800160c:	2014      	movs	r0, #20
 800160e:	f003 fc8d 	bl	8004f2c <_Znwj>
 8001612:	4603      	mov	r3, r0
 8001614:	4698      	mov	r8, r3
 8001616:	4633      	mov	r3, r6
 8001618:	462a      	mov	r2, r5
 800161a:	4621      	mov	r1, r4
 800161c:	4640      	mov	r0, r8
 800161e:	f7ff f838 	bl	8000692 <_ZN8InputPinC1EP12GPIO_TypeDeftb>
 8001622:	4641      	mov	r1, r8
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f000 f9dc 	bl	80019e2 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 800162a:	68f8      	ldr	r0, [r7, #12]
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001634 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f9de 	bl	8001a00 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 8001644:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d00c      	beq.n	8001668 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f9e3 	bl	8001a1a <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EE11get_deleterEv>
 8001654:	4604      	mov	r4, r0
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f9ec 	bl	8001a34 <_ZSt4moveIRP8InputPinEONSt16remove_referenceIT_E4typeEOS4_>
 800165c:	4603      	mov	r3, r0
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	4620      	mov	r0, r4
 8001664:	f000 f9f1 	bl	8001a4a <_ZNKSt14default_deleteI8InputPinEclEPS0_>
	__ptr = pointer();
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
      }
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	bd90      	pop	{r4, r7, pc}

08001678 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8001682:	6838      	ldr	r0, [r7, #0]
 8001684:	f000 fa11 	bl	8001aaa <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE7releaseEv>
 8001688:	4603      	mov	r3, r0
 800168a:	4619      	mov	r1, r3
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 f9ec 	bl	8001a6a <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8001692:	6838      	ldr	r0, [r7, #0]
 8001694:	f000 fa1e 	bl	8001ad4 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE10_M_deleterEv>
 8001698:	4603      	mov	r3, r0
 800169a:	4618      	mov	r0, r3
 800169c:	f000 fa27 	bl	8001aee <_ZSt7forwardISt14default_deleteI8InputPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f000 fa17 	bl	8001ad4 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 80016a6:	687b      	ldr	r3, [r7, #4]
      }
 80016a8:	4618      	mov	r0, r3
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_ZSt11make_uniqueI17RTC_HandleTypeDefJRS0_EENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 80016b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80016ba:	6838      	ldr	r0, [r7, #0]
 80016bc:	f000 fa22 	bl	8001b04 <_ZSt7forwardIR17RTC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80016c0:	4605      	mov	r5, r0
 80016c2:	2024      	movs	r0, #36	; 0x24
 80016c4:	f003 fc32 	bl	8004f2c <_Znwj>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461e      	mov	r6, r3
 80016cc:	4634      	mov	r4, r6
 80016ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	6023      	str	r3, [r4, #0]
 80016da:	4631      	mov	r1, r6
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 fa2c 	bl	8001b3a <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ea <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80016ea:	b590      	push	{r4, r7, lr}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f000 fa2f 	bl	8001b58 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 80016fa:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d00c      	beq.n	800171e <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f000 fa34 	bl	8001b72 <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE11get_deleterEv>
 800170a:	4604      	mov	r4, r0
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 fa3d 	bl	8001b8c <_ZSt4moveIRP17RTC_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8001712:	4603      	mov	r3, r0
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4619      	mov	r1, r3
 8001718:	4620      	mov	r0, r4
 800171a:	f000 fa42 	bl	8001ba2 <_ZNKSt14default_deleteI17RTC_HandleTypeDefEclEPS0_>
	__ptr = pointer();
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
      }
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	bd90      	pop	{r4, r7, pc}

0800172e <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
 8001736:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8001738:	6838      	ldr	r0, [r7, #0]
 800173a:	f000 fa62 	bl	8001c02 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE7releaseEv>
 800173e:	4603      	mov	r3, r0
 8001740:	4619      	mov	r1, r3
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fa3d 	bl	8001bc2 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8001748:	6838      	ldr	r0, [r7, #0]
 800174a:	f000 fa6f 	bl	8001c2c <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE10_M_deleterEv>
 800174e:	4603      	mov	r3, r0
 8001750:	4618      	mov	r0, r3
 8001752:	f000 fa78 	bl	8001c46 <_ZSt7forwardISt14default_deleteI17RTC_HandleTypeDefEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 fa68 	bl	8001c2c <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800175c:	687b      	ldr	r3, [r7, #4]
      }
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fa9e 	bl	8001cb2 <_ZNKSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 8001776:	4603      	mov	r3, r0
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_ZNSt10unique_ptrI11ApplicationSt14default_deleteIS0_EE5resetEPS0_>:
      reset(pointer __p = pointer()) noexcept
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
	_M_t.reset(std::move(__p));
 800178a:	687c      	ldr	r4, [r7, #4]
 800178c:	463b      	mov	r3, r7
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fa71 	bl	8001c76 <_ZSt4moveIRP11ApplicationEONSt16remove_referenceIT_E4typeEOS4_>
 8001794:	4603      	mov	r3, r0
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	4620      	mov	r0, r4
 800179c:	f000 fa97 	bl	8001cce <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE5resetEPS0_>
      }
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}

080017a8 <_ZNKSt10unique_ptrI11ApplicationSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	return get();
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f000 faac 	bl	8001d0e <_ZNKSt10unique_ptrI11ApplicationSt14default_deleteIS0_EE3getEv>
 80017b6:	4603      	mov	r3, r0
      }
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_ZNSt11_Tuple_implILj0EJP8InputPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 faad 	bl	8001d28 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8InputPinEEEC1Ev>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f000 fab5 	bl	8001d40 <_ZNSt10_Head_baseILj0EP8InputPinLb0EEC1Ev>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_ZNSt11_Tuple_implILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 fab7 	bl	8001d5c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17RTC_HandleTypeDefEEEC1Ev>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 fabf 	bl	8001d74 <_ZNSt10_Head_baseILj0EP17RTC_HandleTypeDefLb0EEC1Ev>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_ZNSt15__uniq_ptr_dataI6AppArgSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fabd 	bl	8001d90 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EEC1EPS0_>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4618      	mov	r0, r3
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6839      	ldr	r1, [r7, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ffe6 	bl	8001800 <_ZNSt15__uniq_ptr_dataI6AppArgSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4618      	mov	r0, r3
 800184a:	f000 fab5 	bl	8001db8 <_ZSt3getILj0EJP6AppArgSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800184e:	4603      	mov	r3, r0
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 f874 	bl	8001950 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE10_M_deleterEv>
 8001868:	4603      	mov	r3, r0
 800186a:	4618      	mov	r0, r3
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <_ZSt4moveIRP6AppArgEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <_ZN6AppArgD1Ev>:
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	330c      	adds	r3, #12
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff28 	bl	80016ea <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EED1Ev>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3308      	adds	r3, #8
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff fec8 	bl	8001634 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3304      	adds	r3, #4
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fec3 	bl	8001634 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff febf 	bl	8001634 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <_ZNKSt14default_deleteI6AppArgEclEPS0_>:
      operator()(_Tp* __ptr) const
 80018c0:	b590      	push	{r4, r7, lr}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
	delete __ptr;
 80018ca:	683c      	ldr	r4, [r7, #0]
 80018cc:	2c00      	cmp	r4, #0
 80018ce:	d006      	beq.n	80018de <_ZNKSt14default_deleteI6AppArgEclEPS0_+0x1e>
 80018d0:	4620      	mov	r0, r4
 80018d2:	f7ff ffd9 	bl	8001888 <_ZN6AppArgD1Ev>
 80018d6:	2110      	movs	r1, #16
 80018d8:	4620      	mov	r0, r4
 80018da:	f003 fb25 	bl	8004f28 <_ZdlPvj>
      }
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd90      	pop	{r4, r7, pc}

080018e6 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff ffa4 	bl	800183e <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 80018f6:	4603      	mov	r3, r0
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ff9e 	bl	800183e <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 8001902:	4602      	mov	r2, r0
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f81e 	bl	8001950 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE10_M_deleterEv>
 8001914:	4603      	mov	r3, r0
 8001916:	68f9      	ldr	r1, [r7, #12]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ffd1 	bl	80018c0 <_ZNKSt14default_deleteI6AppArgEclEPS0_>
      }
 800191e:	bf00      	nop
 8001920:	3710      	adds	r7, #16
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8001926:	b580      	push	{r7, lr}
 8001928:	b084      	sub	sp, #16
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f7ff ff85 	bl	800183e <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 8001934:	4603      	mov	r3, r0
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ff7f 	bl	800183e <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 8001940:	4603      	mov	r3, r0
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
	return __p;
 8001946:	68fb      	ldr	r3, [r7, #12]
      }
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fa39 	bl	8001dd2 <_ZSt3getILj1EJP6AppArgSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001960:	4603      	mov	r3, r0
 8001962:	4618      	mov	r0, r3
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <_ZSt7forwardISt14default_deleteI6AppArgEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4618      	mov	r0, r3
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_ZSt7forwardIP12GPIO_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <_ZNSt15__uniq_ptr_dataI8InputPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
 80019ca:	6039      	str	r1, [r7, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	683a      	ldr	r2, [r7, #0]
 80019d0:	4611      	mov	r1, r2
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 fa09 	bl	8001dea <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EEC1EPS0_>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff ffe6 	bl	80019c2 <_ZNSt15__uniq_ptr_dataI8InputPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fa01 	bl	8001e12 <_ZSt3getILj0EJP8InputPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	b082      	sub	sp, #8
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 f855 	bl	8001ad4 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE10_M_deleterEv>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <_ZSt4moveIRP8InputPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <_ZNKSt14default_deleteI8InputPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <_ZNKSt14default_deleteI8InputPinEclEPS0_+0x18>
 8001a5a:	2114      	movs	r1, #20
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 fa63 	bl	8004f28 <_ZdlPvj>
      }
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b084      	sub	sp, #16
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ffc3 	bl	8001a00 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ffbd 	bl	8001a00 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 8001a86:	4602      	mov	r2, r0
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f81e 	bl	8001ad4 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE10_M_deleterEv>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	68f9      	ldr	r1, [r7, #12]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ffd4 	bl	8001a4a <_ZNKSt14default_deleteI8InputPinEclEPS0_>
      }
 8001aa2:	bf00      	nop
 8001aa4:	3710      	adds	r7, #16
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b084      	sub	sp, #16
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff ffa4 	bl	8001a00 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff9e 	bl	8001a00 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
	return __p;
 8001aca:	68fb      	ldr	r3, [r7, #12]
      }
 8001acc:	4618      	mov	r0, r3
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 f9a4 	bl	8001e2c <_ZSt3getILj1EJP8InputPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_ZSt7forwardISt14default_deleteI8InputPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <_ZSt7forwardIR17RTC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <_ZNSt15__uniq_ptr_dataI17RTC_HandleTypeDefSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 f98a 	bl	8001e44 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1EPS0_>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6839      	ldr	r1, [r7, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff ffe6 	bl	8001b1a <_ZNSt15__uniq_ptr_dataI17RTC_HandleTypeDefSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4618      	mov	r0, r3
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f982 	bl	8001e6c <_ZSt3getILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f000 f855 	bl	8001c2c <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE10_M_deleterEv>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <_ZSt4moveIRP17RTC_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_ZNKSt14default_deleteI17RTC_HandleTypeDefEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b082      	sub	sp, #8
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <_ZNKSt14default_deleteI17RTC_HandleTypeDefEclEPS0_+0x18>
 8001bb2:	2124      	movs	r1, #36	; 0x24
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f003 f9b7 	bl	8004f28 <_ZdlPvj>
      }
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
 8001bca:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ffc3 	bl	8001b58 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ffbd 	bl	8001b58 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 8001bde:	4602      	mov	r2, r0
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 f81e 	bl	8001c2c <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE10_M_deleterEv>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	68f9      	ldr	r1, [r7, #12]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7ff ffd4 	bl	8001ba2 <_ZNKSt14default_deleteI17RTC_HandleTypeDefEclEPS0_>
      }
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b084      	sub	sp, #16
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffa4 	bl	8001b58 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 8001c10:	4603      	mov	r3, r0
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ff9e 	bl	8001b58 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
	return __p;
 8001c22:	68fb      	ldr	r3, [r7, #12]
      }
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}

08001c2c <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f925 	bl	8001e86 <_ZSt3getILj1EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <_ZSt7forwardISt14default_deleteI17RTC_HandleTypeDefEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f000 f919 	bl	8001e9e <_ZSt3getILj0EJP11ApplicationSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_ZSt4moveIRP11ApplicationEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8001c76:	b480      	push	{r7}
 8001c78:	b083      	sub	sp, #12
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <_ZNKSt14default_deleteI11ApplicationEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001c8c:	b590      	push	{r4, r7, lr}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001c96:	683c      	ldr	r4, [r7, #0]
 8001c98:	2c00      	cmp	r4, #0
 8001c9a:	d006      	beq.n	8001caa <_ZNKSt14default_deleteI11ApplicationEclEPS0_+0x1e>
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7fe fcdd 	bl	800065c <_ZN11ApplicationD1Ev>
 8001ca2:	2104      	movs	r1, #4
 8001ca4:	4620      	mov	r0, r4
 8001ca6:	f003 f93f 	bl	8004f28 <_ZdlPvj>
      }
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd90      	pop	{r4, r7, pc}

08001cb2 <_ZNKSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f000 f908 	bl	8001ed2 <_ZSt3getILj0EJP6AppArgSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ffbf 	bl	8001c5c <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE6_M_ptrEv>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ffb9 	bl	8001c5c <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE6_M_ptrEv>
 8001cea:	4602      	mov	r2, r0
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d007      	beq.n	8001d06 <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f8de 	bl	8001eb8 <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE10_M_deleterEv>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	68f9      	ldr	r1, [r7, #12]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ffc3 	bl	8001c8c <_ZNKSt14default_deleteI11ApplicationEclEPS0_>
      }
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_ZNKSt10unique_ptrI11ApplicationSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 f8e7 	bl	8001eec <_ZNKSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE6_M_ptrEv>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8InputPinEEEC1Ev>:
      _Tuple_impl()
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8e9 	bl	8001f08 <_ZNSt10_Head_baseILj1ESt14default_deleteI8InputPinELb1EEC1Ev>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <_ZNSt10_Head_baseILj0EP8InputPinLb0EEC1Ev>:
      constexpr _Head_base()
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17RTC_HandleTypeDefEEEC1Ev>:
      _Tuple_impl()
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f000 f8da 	bl	8001f1e <_ZNSt10_Head_baseILj1ESt14default_deleteI17RTC_HandleTypeDefELb1EEC1Ev>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_ZNSt10_Head_baseILj0EP17RTC_HandleTypeDefLb0EEC1Ev>:
      constexpr _Head_base()
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7fe fef5 	bl	8000b8c <_ZNSt5tupleIJP6AppArgSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff fd4b 	bl	800183e <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 8001da8:	4602      	mov	r2, r0
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4618      	mov	r0, r3
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_ZSt3getILj0EJP6AppArgSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f000 f8b6 	bl	8001f34 <_ZSt12__get_helperILj0EP6AppArgJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}

08001dd2 <_ZSt3getILj1EJP6AppArgSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	b082      	sub	sp, #8
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8b6 	bl	8001f4c <_ZSt12__get_helperILj1ESt14default_deleteI6AppArgEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EEC1EPS0_>:
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fb03 	bl	8001402 <_ZNSt5tupleIJP8InputPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fdff 	bl	8001a00 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 8001e02:	4602      	mov	r2, r0
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <_ZSt3getILj0EJP8InputPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b082      	sub	sp, #8
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f8a1 	bl	8001f64 <_ZSt12__get_helperILj0EP8InputPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001e22:	4603      	mov	r3, r0
 8001e24:	4618      	mov	r0, r3
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <_ZSt3getILj1EJP8InputPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 f8a1 	bl	8001f7c <_ZSt12__get_helperILj1ESt14default_deleteI8InputPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1EPS0_>:
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fb0d 	bl	8001470 <_ZNSt5tupleIJP17RTC_HandleTypeDefSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff fe7e 	bl	8001b58 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6013      	str	r3, [r2, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_ZSt3getILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f000 f88c 	bl	8001f94 <_ZSt12__get_helperILj0EP17RTC_HandleTypeDefJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_ZSt3getILj1EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f000 f88c 	bl	8001fac <_ZSt12__get_helperILj1ESt14default_deleteI17RTC_HandleTypeDefEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <_ZSt3getILj0EJP11ApplicationSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b082      	sub	sp, #8
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 f88b 	bl	8001fc4 <_ZSt12__get_helperILj0EP11ApplicationJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f000 f88a 	bl	8001fdc <_ZSt3getILj1EJP11ApplicationSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <_ZSt3getILj0EJP6AppArgSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 f889 	bl	8001ff4 <_ZSt12__get_helperILj0EP6AppArgJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_ZNKSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f888 	bl	800200c <_ZSt3getILj0EJP11ApplicationSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8001efc:	4603      	mov	r3, r0
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4618      	mov	r0, r3
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_ZNSt10_Head_baseILj1ESt14default_deleteI8InputPinELb1EEC1Ev>:
      constexpr _Head_base()
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <_ZNSt10_Head_baseILj1ESt14default_deleteI17RTC_HandleTypeDefELb1EEC1Ev>:
      constexpr _Head_base()
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <_ZSt12__get_helperILj0EP6AppArgJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 f872 	bl	8002026 <_ZNSt11_Tuple_implILj0EJP6AppArgSt14default_deleteIS0_EEE7_M_headERS4_>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4618      	mov	r0, r3
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <_ZSt12__get_helperILj1ESt14default_deleteI6AppArgEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f873 	bl	8002040 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6AppArgEEE7_M_headERS3_>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_ZSt12__get_helperILj0EP8InputPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f000 f873 	bl	8002058 <_ZNSt11_Tuple_implILj0EJP8InputPinSt14default_deleteIS0_EEE7_M_headERS4_>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4618      	mov	r0, r3
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_ZSt12__get_helperILj1ESt14default_deleteI8InputPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f000 f874 	bl	8002072 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8InputPinEEE7_M_headERS3_>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <_ZSt12__get_helperILj0EP17RTC_HandleTypeDefJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f000 f874 	bl	800208a <_ZNSt11_Tuple_implILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEE7_M_headERS4_>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_ZSt12__get_helperILj1ESt14default_deleteI17RTC_HandleTypeDefEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f875 	bl	80020a4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17RTC_HandleTypeDefEEE7_M_headERS3_>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_ZSt12__get_helperILj0EP11ApplicationJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f875 	bl	80020bc <_ZNSt11_Tuple_implILj0EJP11ApplicationSt14default_deleteIS0_EEE7_M_headERS4_>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_ZSt3getILj1EJP11ApplicationSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 f876 	bl	80020d6 <_ZSt12__get_helperILj1ESt14default_deleteI11ApplicationEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4618      	mov	r0, r3
 8001fee:	3708      	adds	r7, #8
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <_ZSt12__get_helperILj0EP6AppArgJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f876 	bl	80020ee <_ZNSt11_Tuple_implILj0EJP6AppArgSt14default_deleteIS0_EEE7_M_headERKS4_>
 8002002:	4603      	mov	r3, r0
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <_ZSt3getILj0EJP11ApplicationSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4618      	mov	r0, r3
 8002018:	f000 f876 	bl	8002108 <_ZSt12__get_helperILj0EP11ApplicationJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800201c:	4603      	mov	r3, r0
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <_ZNSt11_Tuple_implILj0EJP6AppArgSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4618      	mov	r0, r3
 8002032:	f000 f875 	bl	8002120 <_ZNSt10_Head_baseILj0EP6AppArgLb0EE7_M_headERS2_>
 8002036:	4603      	mov	r3, r0
 8002038:	4618      	mov	r0, r3
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6AppArgEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f874 	bl	8002136 <_ZNSt10_Head_baseILj1ESt14default_deleteI6AppArgELb1EE7_M_headERS3_>
 800204e:	4603      	mov	r3, r0
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <_ZNSt11_Tuple_implILj0EJP8InputPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f872 	bl	800214c <_ZNSt10_Head_baseILj0EP8InputPinLb0EE7_M_headERS2_>
 8002068:	4603      	mov	r3, r0
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8InputPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002072:	b580      	push	{r7, lr}
 8002074:	b082      	sub	sp, #8
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f871 	bl	8002162 <_ZNSt10_Head_baseILj1ESt14default_deleteI8InputPinELb1EE7_M_headERS3_>
 8002080:	4603      	mov	r3, r0
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <_ZNSt11_Tuple_implILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4618      	mov	r0, r3
 8002096:	f000 f86f 	bl	8002178 <_ZNSt10_Head_baseILj0EP17RTC_HandleTypeDefLb0EE7_M_headERS2_>
 800209a:	4603      	mov	r3, r0
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17RTC_HandleTypeDefEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f86e 	bl	800218e <_ZNSt10_Head_baseILj1ESt14default_deleteI17RTC_HandleTypeDefELb1EE7_M_headERS3_>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZNSt11_Tuple_implILj0EJP11ApplicationSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f86c 	bl	80021a4 <_ZNSt10_Head_baseILj0EP11ApplicationLb0EE7_M_headERS2_>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <_ZSt12__get_helperILj1ESt14default_deleteI11ApplicationEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f86b 	bl	80021ba <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11ApplicationEEE7_M_headERS3_>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_ZNSt11_Tuple_implILj0EJP6AppArgSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 f86a 	bl	80021d2 <_ZNSt10_Head_baseILj0EP6AppArgLb0EE7_M_headERKS2_>
 80020fe:	4603      	mov	r3, r0
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_ZSt12__get_helperILj0EP11ApplicationJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f869 	bl	80021e8 <_ZNSt11_Tuple_implILj0EJP11ApplicationSt14default_deleteIS0_EEE7_M_headERKS4_>
 8002116:	4603      	mov	r3, r0
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <_ZNSt10_Head_baseILj0EP6AppArgLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <_ZNSt10_Head_baseILj1ESt14default_deleteI6AppArgELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4618      	mov	r0, r3
 8002142:	370c      	adds	r7, #12
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr

0800214c <_ZNSt10_Head_baseILj0EP8InputPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_ZNSt10_Head_baseILj1ESt14default_deleteI8InputPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_ZNSt10_Head_baseILj0EP17RTC_HandleTypeDefLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4618      	mov	r0, r3
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <_ZNSt10_Head_baseILj1ESt14default_deleteI17RTC_HandleTypeDefELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <_ZNSt10_Head_baseILj0EP11ApplicationLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11ApplicationEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f81d 	bl	8002202 <_ZNSt10_Head_baseILj1ESt14default_deleteI11ApplicationELb1EE7_M_headERS3_>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <_ZNSt10_Head_baseILj0EP6AppArgLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4618      	mov	r0, r3
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <_ZNSt11_Tuple_implILj0EJP11ApplicationSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 f810 	bl	8002218 <_ZNSt10_Head_baseILj0EP11ApplicationLb0EE7_M_headERKS2_>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4618      	mov	r0, r3
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <_ZNSt10_Head_baseILj1ESt14default_deleteI11ApplicationELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <_ZNSt10_Head_baseILj0EP11ApplicationLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
	...

08002230 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
std::unique_ptr<AppArg> apparg;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d107      	bne.n	8002250 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002246:	4293      	cmp	r3, r2
 8002248:	d102      	bne.n	8002250 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800224a:	4803      	ldr	r0, [pc, #12]	; (8002258 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 800224c:	f7ff f97d 	bl	800154a <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EED1Ev>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	2000021c 	.word	0x2000021c

0800225c <_GLOBAL__sub_I_hi2c3>:
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
 8002260:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002264:	2001      	movs	r0, #1
 8002266:	f7ff ffe3 	bl	8002230 <_Z41__static_initialization_and_destruction_0ii>
 800226a:	bd80      	pop	{r7, pc}

0800226c <_GLOBAL__sub_D_hi2c3>:
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
 8002270:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff ffdb 	bl	8002230 <_Z41__static_initialization_and_destruction_0ii>
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002282:	f107 0308 	add.w	r3, r7, #8
 8002286:	2200      	movs	r2, #0
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228c:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_MspInit+0x60>)
 800228e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002290:	4a12      	ldr	r2, [pc, #72]	; (80022dc <HAL_MspInit+0x60>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6613      	str	r3, [r2, #96]	; 0x60
 8002298:	4b10      	ldr	r3, [pc, #64]	; (80022dc <HAL_MspInit+0x60>)
 800229a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022a4:	4b0d      	ldr	r3, [pc, #52]	; (80022dc <HAL_MspInit+0x60>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a8:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <HAL_MspInit+0x60>)
 80022aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ae:	6593      	str	r3, [r2, #88]	; 0x58
 80022b0:	4b0a      	ldr	r3, [pc, #40]	; (80022dc <HAL_MspInit+0x60>)
 80022b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	603b      	str	r3, [r7, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 80022bc:	2300      	movs	r3, #0
 80022be:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 fe97 	bl	8002ffc <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80022ce:	f000 fef5 	bl	80030bc <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022d2:	bf00      	nop
 80022d4:	3710      	adds	r7, #16
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	40021000 	.word	0x40021000

080022e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b0a2      	sub	sp, #136	; 0x88
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f8:	f107 0318 	add.w	r3, r7, #24
 80022fc:	225c      	movs	r2, #92	; 0x5c
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f002 fef3 	bl	80050ec <memset>
  if(hi2c->Instance==I2C3)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a2f      	ldr	r2, [pc, #188]	; (80023c8 <HAL_I2C_MspInit+0xe8>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d157      	bne.n	80023c0 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002314:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002316:	2300      	movs	r3, #0
 8002318:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800231a:	f107 0318 	add.w	r3, r7, #24
 800231e:	4618      	mov	r0, r3
 8002320:	f001 fd6c 	bl	8003dfc <HAL_RCCEx_PeriphCLKConfig>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800232a:	f7ff f865 	bl	80013f8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800232e:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_I2C_MspInit+0xec>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002332:	4a26      	ldr	r2, [pc, #152]	; (80023cc <HAL_I2C_MspInit+0xec>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800233a:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_I2C_MspInit+0xec>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002346:	4b21      	ldr	r3, [pc, #132]	; (80023cc <HAL_I2C_MspInit+0xec>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	4a20      	ldr	r2, [pc, #128]	; (80023cc <HAL_I2C_MspInit+0xec>)
 800234c:	f043 0302 	orr.w	r3, r3, #2
 8002350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002352:	4b1e      	ldr	r3, [pc, #120]	; (80023cc <HAL_I2C_MspInit+0xec>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002362:	2312      	movs	r3, #18
 8002364:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002366:	2300      	movs	r3, #0
 8002368:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800236a:	2303      	movs	r3, #3
 800236c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002370:	2304      	movs	r3, #4
 8002372:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002376:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800237a:	4619      	mov	r1, r3
 800237c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002380:	f000 fb2c 	bl	80029dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002384:	2310      	movs	r3, #16
 8002386:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002388:	2312      	movs	r3, #18
 800238a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002390:	2303      	movs	r3, #3
 8002392:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002396:	2304      	movs	r3, #4
 8002398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80023a0:	4619      	mov	r1, r3
 80023a2:	480b      	ldr	r0, [pc, #44]	; (80023d0 <HAL_I2C_MspInit+0xf0>)
 80023a4:	f000 fb1a 	bl	80029dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_I2C_MspInit+0xec>)
 80023aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ac:	4a07      	ldr	r2, [pc, #28]	; (80023cc <HAL_I2C_MspInit+0xec>)
 80023ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023b2:	6593      	str	r3, [r2, #88]	; 0x58
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_I2C_MspInit+0xec>)
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80023c0:	bf00      	nop
 80023c2:	3788      	adds	r7, #136	; 0x88
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40005c00 	.word	0x40005c00
 80023cc:	40021000 	.word	0x40021000
 80023d0:	48000400 	.word	0x48000400

080023d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b09a      	sub	sp, #104	; 0x68
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	225c      	movs	r2, #92	; 0x5c
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f002 fe81 	bl	80050ec <memset>
  if(hrtc->Instance==RTC)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a0f      	ldr	r2, [pc, #60]	; (800242c <HAL_RTC_MspInit+0x58>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d117      	bne.n	8002424 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80023f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023f8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80023fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023fe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	4618      	mov	r0, r3
 8002406:	f001 fcf9 	bl	8003dfc <HAL_RCCEx_PeriphCLKConfig>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002410:	f7fe fff2 	bl	80013f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_RTC_MspInit+0x5c>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	4a05      	ldr	r2, [pc, #20]	; (8002430 <HAL_RTC_MspInit+0x5c>)
 800241c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002424:	bf00      	nop
 8002426:	3768      	adds	r7, #104	; 0x68
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40002800 	.word	0x40002800
 8002430:	40021000 	.word	0x40021000

08002434 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0d      	ldr	r2, [pc, #52]	; (8002478 <HAL_TIM_Base_MspInit+0x44>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d113      	bne.n	800246e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <HAL_TIM_Base_MspInit+0x48>)
 8002448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244a:	4a0c      	ldr	r2, [pc, #48]	; (800247c <HAL_TIM_Base_MspInit+0x48>)
 800244c:	f043 0310 	orr.w	r3, r3, #16
 8002450:	6593      	str	r3, [r2, #88]	; 0x58
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_TIM_Base_MspInit+0x48>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	2100      	movs	r1, #0
 8002462:	2036      	movs	r0, #54	; 0x36
 8002464:	f000 fa83 	bl	800296e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002468:	2036      	movs	r0, #54	; 0x36
 800246a:	f000 fa9c 	bl	80029a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40001000 	.word	0x40001000
 800247c:	40021000 	.word	0x40021000

08002480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002484:	e7fe      	b.n	8002484 <NMI_Handler+0x4>

08002486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248a:	e7fe      	b.n	800248a <HardFault_Handler+0x4>

0800248c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <MemManage_Handler+0x4>

08002492 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <BusFault_Handler+0x4>

08002498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <UsageFault_Handler+0x4>

0800249e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024cc:	f000 f930 	bl	8002730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 80024d8:	2008      	movs	r0, #8
 80024da:	f000 fc29 	bl	8002d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  start_ms = HAL_GetTick();
 80024de:	f000 f93b 	bl	8002758 <HAL_GetTick>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4a03      	ldr	r2, [pc, #12]	; (80024f4 <EXTI3_IRQHandler+0x20>)
 80024e6:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 80024e8:	4803      	ldr	r0, [pc, #12]	; (80024f8 <EXTI3_IRQHandler+0x24>)
 80024ea:	f002 fa87 	bl	80049fc <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI3_IRQn 1 */
}
 80024ee:	bf00      	nop
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	20000218 	.word	0x20000218
 80024f8:	200001cc 	.word	0x200001cc

080024fc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 8002500:	2080      	movs	r0, #128	; 0x80
 8002502:	f000 fc15 	bl	8002d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  start_ms = HAL_GetTick();
 8002506:	f000 f927 	bl	8002758 <HAL_GetTick>
 800250a:	4603      	mov	r3, r0
 800250c:	4a03      	ldr	r2, [pc, #12]	; (800251c <EXTI9_5_IRQHandler+0x20>)
 800250e:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 8002510:	4803      	ldr	r0, [pc, #12]	; (8002520 <EXTI9_5_IRQHandler+0x24>)
 8002512:	f002 fa73 	bl	80049fc <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000218 	.word	0x20000218
 8002520:	200001cc 	.word	0x200001cc

08002524 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 8002528:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800252c:	f000 fc00 	bl	8002d30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  start_ms = HAL_GetTick();
 8002530:	f000 f912 	bl	8002758 <HAL_GetTick>
 8002534:	4603      	mov	r3, r0
 8002536:	4a03      	ldr	r2, [pc, #12]	; (8002544 <EXTI15_10_IRQHandler+0x20>)
 8002538:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 800253a:	4803      	ldr	r0, [pc, #12]	; (8002548 <EXTI15_10_IRQHandler+0x24>)
 800253c:	f002 fa5e 	bl	80049fc <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}
 8002544:	20000218 	.word	0x20000218
 8002548:	200001cc 	.word	0x200001cc

0800254c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002550:	4802      	ldr	r0, [pc, #8]	; (800255c <TIM6_DAC_IRQHandler+0x10>)
 8002552:	f002 fad6 	bl	8004b02 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002556:	bf00      	nop
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	200001cc 	.word	0x200001cc

08002560 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return 1;
 8002564:	2301      	movs	r3, #1
}
 8002566:	4618      	mov	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <_kill>:

int _kill(int pid, int sig)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800257a:	f002 fe13 	bl	80051a4 <__errno>
 800257e:	4603      	mov	r3, r0
 8002580:	2216      	movs	r2, #22
 8002582:	601a      	str	r2, [r3, #0]
  return -1;
 8002584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002588:	4618      	mov	r0, r3
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}

08002590 <_exit>:

void _exit (int status)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002598:	f04f 31ff 	mov.w	r1, #4294967295
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ffe7 	bl	8002570 <_kill>
  while (1) {}    /* Make sure we hang here */
 80025a2:	e7fe      	b.n	80025a2 <_exit+0x12>

080025a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025ac:	4a14      	ldr	r2, [pc, #80]	; (8002600 <_sbrk+0x5c>)
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <_sbrk+0x60>)
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b8:	4b13      	ldr	r3, [pc, #76]	; (8002608 <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c0:	4b11      	ldr	r3, [pc, #68]	; (8002608 <_sbrk+0x64>)
 80025c2:	4a12      	ldr	r2, [pc, #72]	; (800260c <_sbrk+0x68>)
 80025c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025c6:	4b10      	ldr	r3, [pc, #64]	; (8002608 <_sbrk+0x64>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d207      	bcs.n	80025e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d4:	f002 fde6 	bl	80051a4 <__errno>
 80025d8:	4603      	mov	r3, r0
 80025da:	220c      	movs	r2, #12
 80025dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
 80025e2:	e009      	b.n	80025f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e4:	4b08      	ldr	r3, [pc, #32]	; (8002608 <_sbrk+0x64>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ea:	4b07      	ldr	r3, [pc, #28]	; (8002608 <_sbrk+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	4a05      	ldr	r2, [pc, #20]	; (8002608 <_sbrk+0x64>)
 80025f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20010000 	.word	0x20010000
 8002604:	00000400 	.word	0x00000400
 8002608:	20000224 	.word	0x20000224
 800260c:	20000378 	.word	0x20000378

08002610 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <SystemInit+0x20>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	4a05      	ldr	r2, [pc, #20]	; (8002630 <SystemInit+0x20>)
 800261c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800266c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002638:	f7ff ffea 	bl	8002610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800263c:	480c      	ldr	r0, [pc, #48]	; (8002670 <LoopForever+0x6>)
  ldr r1, =_edata
 800263e:	490d      	ldr	r1, [pc, #52]	; (8002674 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002640:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <LoopForever+0xe>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002644:	e002      	b.n	800264c <LoopCopyDataInit>

08002646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264a:	3304      	adds	r3, #4

0800264c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800264c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002650:	d3f9      	bcc.n	8002646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002654:	4c0a      	ldr	r4, [pc, #40]	; (8002680 <LoopForever+0x16>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002658:	e001      	b.n	800265e <LoopFillZerobss>

0800265a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800265c:	3204      	adds	r2, #4

0800265e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002660:	d3fb      	bcc.n	800265a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002662:	f002 fda5 	bl	80051b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002666:	f7fe fb89 	bl	8000d7c <main>

0800266a <LoopForever>:

LoopForever:
    b LoopForever
 800266a:	e7fe      	b.n	800266a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800266c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002674:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8002678:	08005320 	.word	0x08005320
  ldr r2, =_sbss
 800267c:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8002680:	20000378 	.word	0x20000378

08002684 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC1_IRQHandler>

08002686 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002690:	2003      	movs	r0, #3
 8002692:	f000 f961 	bl	8002958 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002696:	200f      	movs	r0, #15
 8002698:	f000 f80e 	bl	80026b8 <HAL_InitTick>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	71fb      	strb	r3, [r7, #7]
 80026a6:	e001      	b.n	80026ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026a8:	f7ff fde8 	bl	800227c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026ac:	79fb      	ldrb	r3, [r7, #7]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <HAL_InitTick+0x6c>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d023      	beq.n	8002714 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026cc:	4b16      	ldr	r3, [pc, #88]	; (8002728 <HAL_InitTick+0x70>)
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b14      	ldr	r3, [pc, #80]	; (8002724 <HAL_InitTick+0x6c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026da:	fbb3 f3f1 	udiv	r3, r3, r1
 80026de:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f96d 	bl	80029c2 <HAL_SYSTICK_Config>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d10f      	bne.n	800270e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b0f      	cmp	r3, #15
 80026f2:	d809      	bhi.n	8002708 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f4:	2200      	movs	r2, #0
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	f04f 30ff 	mov.w	r0, #4294967295
 80026fc:	f000 f937 	bl	800296e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <HAL_InitTick+0x74>)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e007      	b.n	8002718 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
 800270c:	e004      	b.n	8002718 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
 8002712:	e001      	b.n	8002718 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	200000e0 	.word	0x200000e0
 8002728:	200000d8 	.word	0x200000d8
 800272c:	200000dc 	.word	0x200000dc

08002730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002734:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_IncTick+0x20>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	461a      	mov	r2, r3
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_IncTick+0x24>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4413      	add	r3, r2
 8002740:	4a04      	ldr	r2, [pc, #16]	; (8002754 <HAL_IncTick+0x24>)
 8002742:	6013      	str	r3, [r2, #0]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	200000e0 	.word	0x200000e0
 8002754:	20000228 	.word	0x20000228

08002758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  return uwTick;
 800275c:	4b03      	ldr	r3, [pc, #12]	; (800276c <HAL_GetTick+0x14>)
 800275e:	681b      	ldr	r3, [r3, #0]
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	20000228 	.word	0x20000228

08002770 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff ffee 	bl	8002758 <HAL_GetTick>
 800277c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d005      	beq.n	8002796 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800278a:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_Delay+0x44>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	461a      	mov	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4413      	add	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002796:	bf00      	nop
 8002798:	f7ff ffde 	bl	8002758 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d8f7      	bhi.n	8002798 <HAL_Delay+0x28>
  {
  }
}
 80027a8:	bf00      	nop
 80027aa:	bf00      	nop
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	200000e0 	.word	0x200000e0

080027b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d4:	4013      	ands	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ea:	4a04      	ldr	r2, [pc, #16]	; (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	60d3      	str	r3, [r2, #12]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <__NVIC_GetPriorityGrouping+0x18>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	f003 0307 	and.w	r3, r3, #7
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	2b00      	cmp	r3, #0
 800282c:	db0b      	blt.n	8002846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	f003 021f 	and.w	r2, r3, #31
 8002834:	4907      	ldr	r1, [pc, #28]	; (8002854 <__NVIC_EnableIRQ+0x38>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2001      	movs	r0, #1
 800283e:	fa00 f202 	lsl.w	r2, r0, r2
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e100 	.word	0xe000e100

08002858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	2b00      	cmp	r3, #0
 800286a:	db0a      	blt.n	8002882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	490c      	ldr	r1, [pc, #48]	; (80028a4 <__NVIC_SetPriority+0x4c>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	440b      	add	r3, r1
 800287c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002880:	e00a      	b.n	8002898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4908      	ldr	r1, [pc, #32]	; (80028a8 <__NVIC_SetPriority+0x50>)
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	3b04      	subs	r3, #4
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	440b      	add	r3, r1
 8002896:	761a      	strb	r2, [r3, #24]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000e100 	.word	0xe000e100
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f1c3 0307 	rsb	r3, r3, #7
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	bf28      	it	cs
 80028ca:	2304      	movcs	r3, #4
 80028cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3304      	adds	r3, #4
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d902      	bls.n	80028dc <NVIC_EncodePriority+0x30>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3b03      	subs	r3, #3
 80028da:	e000      	b.n	80028de <NVIC_EncodePriority+0x32>
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43da      	mvns	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	401a      	ands	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	43d9      	mvns	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	4313      	orrs	r3, r2
         );
}
 8002906:	4618      	mov	r0, r3
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3b01      	subs	r3, #1
 8002920:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002924:	d301      	bcc.n	800292a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002926:	2301      	movs	r3, #1
 8002928:	e00f      	b.n	800294a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <SysTick_Config+0x40>)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3b01      	subs	r3, #1
 8002930:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002932:	210f      	movs	r1, #15
 8002934:	f04f 30ff 	mov.w	r0, #4294967295
 8002938:	f7ff ff8e 	bl	8002858 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <SysTick_Config+0x40>)
 800293e:	2200      	movs	r2, #0
 8002940:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002942:	4b04      	ldr	r3, [pc, #16]	; (8002954 <SysTick_Config+0x40>)
 8002944:	2207      	movs	r2, #7
 8002946:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	e000e010 	.word	0xe000e010

08002958 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f7ff ff29 	bl	80027b8 <__NVIC_SetPriorityGrouping>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b086      	sub	sp, #24
 8002972:	af00      	add	r7, sp, #0
 8002974:	4603      	mov	r3, r0
 8002976:	60b9      	str	r1, [r7, #8]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002980:	f7ff ff3e 	bl	8002800 <__NVIC_GetPriorityGrouping>
 8002984:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	6978      	ldr	r0, [r7, #20]
 800298c:	f7ff ff8e 	bl	80028ac <NVIC_EncodePriority>
 8002990:	4602      	mov	r2, r0
 8002992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ff5d 	bl	8002858 <__NVIC_SetPriority>
}
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b082      	sub	sp, #8
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff31 	bl	800281c <__NVIC_EnableIRQ>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b082      	sub	sp, #8
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff ffa2 	bl	8002914 <SysTick_Config>
 80029d0:	4603      	mov	r3, r0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029dc:	b480      	push	{r7}
 80029de:	b087      	sub	sp, #28
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029ea:	e154      	b.n	8002c96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2101      	movs	r1, #1
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	fa01 f303 	lsl.w	r3, r1, r3
 80029f8:	4013      	ands	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 8146 	beq.w	8002c90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d005      	beq.n	8002a1c <HAL_GPIO_Init+0x40>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d130      	bne.n	8002a7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	2203      	movs	r2, #3
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	4013      	ands	r3, r2
 8002a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	693a      	ldr	r2, [r7, #16]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a52:	2201      	movs	r2, #1
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	091b      	lsrs	r3, r3, #4
 8002a68:	f003 0201 	and.w	r2, r3, #1
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d017      	beq.n	8002aba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	2203      	movs	r2, #3
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	693a      	ldr	r2, [r7, #16]
 8002ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d123      	bne.n	8002b0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	08da      	lsrs	r2, r3, #3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	3208      	adds	r2, #8
 8002ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	220f      	movs	r2, #15
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	43db      	mvns	r3, r3
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	691a      	ldr	r2, [r3, #16]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	08da      	lsrs	r2, r3, #3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	3208      	adds	r2, #8
 8002b08:	6939      	ldr	r1, [r7, #16]
 8002b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	2203      	movs	r2, #3
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f003 0203 	and.w	r2, r3, #3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80a0 	beq.w	8002c90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b50:	4b58      	ldr	r3, [pc, #352]	; (8002cb4 <HAL_GPIO_Init+0x2d8>)
 8002b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b54:	4a57      	ldr	r2, [pc, #348]	; (8002cb4 <HAL_GPIO_Init+0x2d8>)
 8002b56:	f043 0301 	orr.w	r3, r3, #1
 8002b5a:	6613      	str	r3, [r2, #96]	; 0x60
 8002b5c:	4b55      	ldr	r3, [pc, #340]	; (8002cb4 <HAL_GPIO_Init+0x2d8>)
 8002b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b68:	4a53      	ldr	r2, [pc, #332]	; (8002cb8 <HAL_GPIO_Init+0x2dc>)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	089b      	lsrs	r3, r3, #2
 8002b6e:	3302      	adds	r3, #2
 8002b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	220f      	movs	r2, #15
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b92:	d019      	beq.n	8002bc8 <HAL_GPIO_Init+0x1ec>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a49      	ldr	r2, [pc, #292]	; (8002cbc <HAL_GPIO_Init+0x2e0>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d013      	beq.n	8002bc4 <HAL_GPIO_Init+0x1e8>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	4a48      	ldr	r2, [pc, #288]	; (8002cc0 <HAL_GPIO_Init+0x2e4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00d      	beq.n	8002bc0 <HAL_GPIO_Init+0x1e4>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a47      	ldr	r2, [pc, #284]	; (8002cc4 <HAL_GPIO_Init+0x2e8>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d007      	beq.n	8002bbc <HAL_GPIO_Init+0x1e0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a46      	ldr	r2, [pc, #280]	; (8002cc8 <HAL_GPIO_Init+0x2ec>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d101      	bne.n	8002bb8 <HAL_GPIO_Init+0x1dc>
 8002bb4:	2304      	movs	r3, #4
 8002bb6:	e008      	b.n	8002bca <HAL_GPIO_Init+0x1ee>
 8002bb8:	2307      	movs	r3, #7
 8002bba:	e006      	b.n	8002bca <HAL_GPIO_Init+0x1ee>
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e004      	b.n	8002bca <HAL_GPIO_Init+0x1ee>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e002      	b.n	8002bca <HAL_GPIO_Init+0x1ee>
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <HAL_GPIO_Init+0x1ee>
 8002bc8:	2300      	movs	r3, #0
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	f002 0203 	and.w	r2, r2, #3
 8002bd0:	0092      	lsls	r2, r2, #2
 8002bd2:	4093      	lsls	r3, r2
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bda:	4937      	ldr	r1, [pc, #220]	; (8002cb8 <HAL_GPIO_Init+0x2dc>)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	089b      	lsrs	r3, r3, #2
 8002be0:	3302      	adds	r3, #2
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002be8:	4b38      	ldr	r3, [pc, #224]	; (8002ccc <HAL_GPIO_Init+0x2f0>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002c04:	693a      	ldr	r2, [r7, #16]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c0c:	4a2f      	ldr	r2, [pc, #188]	; (8002ccc <HAL_GPIO_Init+0x2f0>)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c12:	4b2e      	ldr	r3, [pc, #184]	; (8002ccc <HAL_GPIO_Init+0x2f0>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	43db      	mvns	r3, r3
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c36:	4a25      	ldr	r2, [pc, #148]	; (8002ccc <HAL_GPIO_Init+0x2f0>)
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c3c:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <HAL_GPIO_Init+0x2f0>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c60:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <HAL_GPIO_Init+0x2f0>)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c66:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_GPIO_Init+0x2f0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c8a:	4a10      	ldr	r2, [pc, #64]	; (8002ccc <HAL_GPIO_Init+0x2f0>)
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	3301      	adds	r3, #1
 8002c94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f47f aea3 	bne.w	80029ec <HAL_GPIO_Init+0x10>
  }
}
 8002ca6:	bf00      	nop
 8002ca8:	bf00      	nop
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40010000 	.word	0x40010000
 8002cbc:	48000400 	.word	0x48000400
 8002cc0:	48000800 	.word	0x48000800
 8002cc4:	48000c00 	.word	0x48000c00
 8002cc8:	48001000 	.word	0x48001000
 8002ccc:	40010400 	.word	0x40010400

08002cd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	887b      	ldrh	r3, [r7, #2]
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	73fb      	strb	r3, [r7, #15]
 8002cec:	e001      	b.n	8002cf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d10:	787b      	ldrb	r3, [r7, #1]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d16:	887a      	ldrh	r2, [r7, #2]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d1c:	e002      	b.n	8002d24 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d1e:	887a      	ldrh	r2, [r7, #2]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	4603      	mov	r3, r0
 8002d38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	88fb      	ldrh	r3, [r7, #6]
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d006      	beq.n	8002d54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d46:	4a05      	ldr	r2, [pc, #20]	; (8002d5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f000 f806 	bl	8002d60 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d54:	bf00      	nop
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40010400 	.word	0x40010400

08002d60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e08d      	b.n	8002ea4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff fa9f 	bl	80022e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2224      	movs	r2, #36	; 0x24
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0201 	bic.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dc6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d107      	bne.n	8002df0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689a      	ldr	r2, [r3, #8]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	e006      	b.n	8002dfe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002dfc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d108      	bne.n	8002e18 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e14:	605a      	str	r2, [r3, #4]
 8002e16:	e007      	b.n	8002e28 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685a      	ldr	r2, [r3, #4]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e26:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	691a      	ldr	r2, [r3, #16]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	695b      	ldr	r3, [r3, #20]
 8002e54:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69d9      	ldr	r1, [r3, #28]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1a      	ldr	r2, [r3, #32]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f042 0201 	orr.w	r2, r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	2b20      	cmp	r3, #32
 8002ec0:	d138      	bne.n	8002f34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e032      	b.n	8002f36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	; 0x24
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0201 	bic.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002efe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6819      	ldr	r1, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	e000      	b.n	8002f36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f34:	2302      	movs	r3, #2
  }
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
 8002f4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b20      	cmp	r3, #32
 8002f56:	d139      	bne.n	8002fcc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e033      	b.n	8002fce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2224      	movs	r2, #36	; 0x24
 8002f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002f94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	021b      	lsls	r3, r3, #8
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e000      	b.n	8002fce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002fcc:	2302      	movs	r3, #2
  }
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fea:	6013      	str	r3, [r2, #0]
}
 8002fec:	bf00      	nop
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40007000 	.word	0x40007000

08002ffc <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8003004:	4b2b      	ldr	r3, [pc, #172]	; (80030b4 <HAL_PWR_ConfigPVD+0xb8>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f023 020e 	bic.w	r2, r3, #14
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4928      	ldr	r1, [pc, #160]	; (80030b4 <HAL_PWR_ConfigPVD+0xb8>)
 8003012:	4313      	orrs	r3, r2
 8003014:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	4a27      	ldr	r2, [pc, #156]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 800301c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003020:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8003022:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a24      	ldr	r2, [pc, #144]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 8003028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302c:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 800302e:	4b22      	ldr	r3, [pc, #136]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	4a21      	ldr	r2, [pc, #132]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 8003034:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003038:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800303a:	4b1f      	ldr	r3, [pc, #124]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 8003040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003044:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8003052:	4b19      	ldr	r3, [pc, #100]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 8003058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305c:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800306a:	4b13      	ldr	r3, [pc, #76]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a12      	ldr	r2, [pc, #72]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	d005      	beq.n	800308e <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8003082:	4b0d      	ldr	r3, [pc, #52]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	4a0c      	ldr	r2, [pc, #48]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 8003088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308c:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d005      	beq.n	80030a6 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800309a:	4b07      	ldr	r3, [pc, #28]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	4a06      	ldr	r2, [pc, #24]	; (80030b8 <HAL_PWR_ConfigPVD+0xbc>)
 80030a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030a4:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40007000 	.word	0x40007000
 80030b8:	40010400 	.word	0x40010400

080030bc <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 80030c0:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_PWR_EnablePVD+0x1c>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <HAL_PWR_EnablePVD+0x1c>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6053      	str	r3, [r2, #4]
}
 80030cc:	bf00      	nop
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40007000 	.word	0x40007000

080030dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40007000 	.word	0x40007000

080030f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003106:	d130      	bne.n	800316a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003114:	d038      	beq.n	8003188 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003116:	4b20      	ldr	r3, [pc, #128]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800311e:	4a1e      	ldr	r2, [pc, #120]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003120:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003124:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2232      	movs	r2, #50	; 0x32
 800312c:	fb02 f303 	mul.w	r3, r2, r3
 8003130:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	0c9b      	lsrs	r3, r3, #18
 8003138:	3301      	adds	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800313c:	e002      	b.n	8003144 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3b01      	subs	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003144:	4b14      	ldr	r3, [pc, #80]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003150:	d102      	bne.n	8003158 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f2      	bne.n	800313e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003158:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003164:	d110      	bne.n	8003188 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e00f      	b.n	800318a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800316a:	4b0b      	ldr	r3, [pc, #44]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003176:	d007      	beq.n	8003188 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003178:	4b07      	ldr	r3, [pc, #28]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003180:	4a05      	ldr	r2, [pc, #20]	; (8003198 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003186:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40007000 	.word	0x40007000
 800319c:	200000d8 	.word	0x200000d8
 80031a0:	431bde83 	.word	0x431bde83

080031a4 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 80031ae:	4b11      	ldr	r3, [pc, #68]	; (80031f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 0307 	bic.w	r3, r3, #7
 80031b6:	4a0f      	ldr	r2, [pc, #60]	; (80031f4 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80031b8:	f043 0302 	orr.w	r3, r3, #2
 80031bc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80031be:	4b0e      	ldr	r3, [pc, #56]	; (80031f8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	4a0d      	ldr	r2, [pc, #52]	; (80031f8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80031c4:	f043 0304 	orr.w	r3, r3, #4
 80031c8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d101      	bne.n	80031d4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80031d0:	bf30      	wfi
 80031d2:	e002      	b.n	80031da <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80031d4:	bf40      	sev
    __WFE();
 80031d6:	bf20      	wfe
    __WFE();
 80031d8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80031da:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	4a06      	ldr	r2, [pc, #24]	; (80031f8 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	6113      	str	r3, [r2, #16]
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40007000 	.word	0x40007000
 80031f8:	e000ed00 	.word	0xe000ed00

080031fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f000 bc02 	b.w	8003a14 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003210:	4b96      	ldr	r3, [pc, #600]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800321a:	4b94      	ldr	r3, [pc, #592]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80e4 	beq.w	80033fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <HAL_RCC_OscConfig+0x4c>
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b0c      	cmp	r3, #12
 800323c:	f040 808b 	bne.w	8003356 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b01      	cmp	r3, #1
 8003244:	f040 8087 	bne.w	8003356 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003248:	4b88      	ldr	r3, [pc, #544]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_OscConfig+0x64>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e3d9      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1a      	ldr	r2, [r3, #32]
 8003264:	4b81      	ldr	r3, [pc, #516]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d004      	beq.n	800327a <HAL_RCC_OscConfig+0x7e>
 8003270:	4b7e      	ldr	r3, [pc, #504]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003278:	e005      	b.n	8003286 <HAL_RCC_OscConfig+0x8a>
 800327a:	4b7c      	ldr	r3, [pc, #496]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800327c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003286:	4293      	cmp	r3, r2
 8003288:	d223      	bcs.n	80032d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fd54 	bl	8003d3c <RCC_SetFlashLatencyFromMSIRange>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e3ba      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329e:	4b73      	ldr	r3, [pc, #460]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a72      	ldr	r2, [pc, #456]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b70      	ldr	r3, [pc, #448]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	496d      	ldr	r1, [pc, #436]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032bc:	4b6b      	ldr	r3, [pc, #428]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	4968      	ldr	r1, [pc, #416]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
 80032d0:	e025      	b.n	800331e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d2:	4b66      	ldr	r3, [pc, #408]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a65      	ldr	r2, [pc, #404]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032d8:	f043 0308 	orr.w	r3, r3, #8
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	4b63      	ldr	r3, [pc, #396]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4960      	ldr	r1, [pc, #384]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f0:	4b5e      	ldr	r3, [pc, #376]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	495b      	ldr	r1, [pc, #364]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fd14 	bl	8003d3c <RCC_SetFlashLatencyFromMSIRange>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e37a      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800331e:	f000 fc81 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b51      	ldr	r3, [pc, #324]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	4950      	ldr	r1, [pc, #320]	; (8003470 <HAL_RCC_OscConfig+0x274>)
 8003330:	5ccb      	ldrb	r3, [r1, r3]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	fa22 f303 	lsr.w	r3, r2, r3
 800333a:	4a4e      	ldr	r2, [pc, #312]	; (8003474 <HAL_RCC_OscConfig+0x278>)
 800333c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800333e:	4b4e      	ldr	r3, [pc, #312]	; (8003478 <HAL_RCC_OscConfig+0x27c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff f9b8 	bl	80026b8 <HAL_InitTick>
 8003348:	4603      	mov	r3, r0
 800334a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d052      	beq.n	80033f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	e35e      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d032      	beq.n	80033c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800335e:	4b43      	ldr	r3, [pc, #268]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a42      	ldr	r2, [pc, #264]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800336a:	f7ff f9f5 	bl	8002758 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003372:	f7ff f9f1 	bl	8002758 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e347      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003384:	4b39      	ldr	r3, [pc, #228]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003390:	4b36      	ldr	r3, [pc, #216]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a35      	ldr	r2, [pc, #212]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003396:	f043 0308 	orr.w	r3, r3, #8
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b33      	ldr	r3, [pc, #204]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4930      	ldr	r1, [pc, #192]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ae:	4b2f      	ldr	r3, [pc, #188]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	492b      	ldr	r1, [pc, #172]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
 80033c2:	e01a      	b.n	80033fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033c4:	4b29      	ldr	r3, [pc, #164]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a28      	ldr	r2, [pc, #160]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033d0:	f7ff f9c2 	bl	8002758 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033d8:	f7ff f9be 	bl	8002758 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e314      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033ea:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x1dc>
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d073      	beq.n	80034ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d005      	beq.n	8003418 <HAL_RCC_OscConfig+0x21c>
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d10e      	bne.n	8003430 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d10b      	bne.n	8003430 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d063      	beq.n	80034ec <HAL_RCC_OscConfig+0x2f0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d15f      	bne.n	80034ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e2f1      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003438:	d106      	bne.n	8003448 <HAL_RCC_OscConfig+0x24c>
 800343a:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a0b      	ldr	r2, [pc, #44]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e025      	b.n	8003494 <HAL_RCC_OscConfig+0x298>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003450:	d114      	bne.n	800347c <HAL_RCC_OscConfig+0x280>
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a05      	ldr	r2, [pc, #20]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a02      	ldr	r2, [pc, #8]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e013      	b.n	8003494 <HAL_RCC_OscConfig+0x298>
 800346c:	40021000 	.word	0x40021000
 8003470:	080052d0 	.word	0x080052d0
 8003474:	200000d8 	.word	0x200000d8
 8003478:	200000dc 	.word	0x200000dc
 800347c:	4ba0      	ldr	r3, [pc, #640]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a9f      	ldr	r2, [pc, #636]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b9d      	ldr	r3, [pc, #628]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a9c      	ldr	r2, [pc, #624]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7ff f95c 	bl	8002758 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7ff f958 	bl	8002758 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e2ae      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b6:	4b92      	ldr	r3, [pc, #584]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x2a8>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7ff f948 	bl	8002758 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7ff f944 	bl	8002758 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e29a      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034de:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x2d0>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d060      	beq.n	80035bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d005      	beq.n	800350c <HAL_RCC_OscConfig+0x310>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d119      	bne.n	800353a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d116      	bne.n	800353a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800350c:	4b7c      	ldr	r3, [pc, #496]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_OscConfig+0x328>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e277      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	4973      	ldr	r1, [pc, #460]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003538:	e040      	b.n	80035bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d023      	beq.n	800358a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003542:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a6e      	ldr	r2, [pc, #440]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7ff f903 	bl	8002758 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003556:	f7ff f8ff 	bl	8002758 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e255      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003568:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4b62      	ldr	r3, [pc, #392]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	061b      	lsls	r3, r3, #24
 8003582:	495f      	ldr	r1, [pc, #380]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
 8003588:	e018      	b.n	80035bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358a:	4b5d      	ldr	r3, [pc, #372]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a5c      	ldr	r2, [pc, #368]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7ff f8df 	bl	8002758 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359e:	f7ff f8db 	bl	8002758 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e231      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035b0:	4b53      	ldr	r3, [pc, #332]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d03c      	beq.n	8003642 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01c      	beq.n	800360a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d0:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d6:	4a4a      	ldr	r2, [pc, #296]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7ff f8ba 	bl	8002758 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e8:	f7ff f8b6 	bl	8002758 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e20c      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80035fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ef      	beq.n	80035e8 <HAL_RCC_OscConfig+0x3ec>
 8003608:	e01b      	b.n	8003642 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800360a:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800360c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003610:	4a3b      	ldr	r2, [pc, #236]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7ff f89d 	bl	8002758 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003622:	f7ff f899 	bl	8002758 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e1ef      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003634:	4b32      	ldr	r3, [pc, #200]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ef      	bne.n	8003622 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80a6 	beq.w	800379c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003650:	2300      	movs	r3, #0
 8003652:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003654:	4b2a      	ldr	r3, [pc, #168]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	4a26      	ldr	r2, [pc, #152]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	6593      	str	r3, [r2, #88]	; 0x58
 800366c:	4b24      	ldr	r3, [pc, #144]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003678:	2301      	movs	r3, #1
 800367a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_OscConfig+0x508>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d118      	bne.n	80036ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_RCC_OscConfig+0x508>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_RCC_OscConfig+0x508>)
 800368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003694:	f7ff f860 	bl	8002758 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369c:	f7ff f85c 	bl	8002758 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e1b2      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <HAL_RCC_OscConfig+0x508>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d108      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4d8>
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036d2:	e029      	b.n	8003728 <HAL_RCC_OscConfig+0x52c>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d115      	bne.n	8003708 <HAL_RCC_OscConfig+0x50c>
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	4a07      	ldr	r2, [pc, #28]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036e4:	f043 0304 	orr.w	r3, r3, #4
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	4a03      	ldr	r2, [pc, #12]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036fc:	e014      	b.n	8003728 <HAL_RCC_OscConfig+0x52c>
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	40007000 	.word	0x40007000
 8003708:	4b9a      	ldr	r3, [pc, #616]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	4a99      	ldr	r2, [pc, #612]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003718:	4b96      	ldr	r3, [pc, #600]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	4a95      	ldr	r2, [pc, #596]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 8003720:	f023 0304 	bic.w	r3, r3, #4
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d016      	beq.n	800375e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7ff f812 	bl	8002758 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003736:	e00a      	b.n	800374e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7ff f80e 	bl	8002758 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e162      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800374e:	4b89      	ldr	r3, [pc, #548]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ed      	beq.n	8003738 <HAL_RCC_OscConfig+0x53c>
 800375c:	e015      	b.n	800378a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fe fffb 	bl	8002758 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fe fff7 	bl	8002758 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e14b      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800377c:	4b7d      	ldr	r3, [pc, #500]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ed      	bne.n	8003766 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800378a:	7ffb      	ldrb	r3, [r7, #31]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d105      	bne.n	800379c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003790:	4b78      	ldr	r3, [pc, #480]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	4a77      	ldr	r2, [pc, #476]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 8003796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d03c      	beq.n	8003822 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01c      	beq.n	80037ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037b0:	4b70      	ldr	r3, [pc, #448]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 80037b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b6:	4a6f      	ldr	r2, [pc, #444]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fe ffca 	bl	8002758 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c8:	f7fe ffc6 	bl	8002758 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e11c      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037da:	4b66      	ldr	r3, [pc, #408]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 80037dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ef      	beq.n	80037c8 <HAL_RCC_OscConfig+0x5cc>
 80037e8:	e01b      	b.n	8003822 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ea:	4b62      	ldr	r3, [pc, #392]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 80037ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037f0:	4a60      	ldr	r2, [pc, #384]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fa:	f7fe ffad 	bl	8002758 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003802:	f7fe ffa9 	bl	8002758 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0ff      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003814:	4b57      	ldr	r3, [pc, #348]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 8003816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1ef      	bne.n	8003802 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80f3 	beq.w	8003a12 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	2b02      	cmp	r3, #2
 8003832:	f040 80c9 	bne.w	80039c8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003836:	4b4f      	ldr	r3, [pc, #316]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f003 0203 	and.w	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	429a      	cmp	r2, r3
 8003848:	d12c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	3b01      	subs	r3, #1
 8003856:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d123      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003866:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d11b      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d113      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	3b01      	subs	r3, #1
 800388a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d109      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	3b01      	subs	r3, #1
 800389e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d06b      	beq.n	800397c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2b0c      	cmp	r3, #12
 80038a8:	d062      	beq.n	8003970 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038aa:	4b32      	ldr	r3, [pc, #200]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e0ac      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038ba:	4b2e      	ldr	r3, [pc, #184]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a2d      	ldr	r2, [pc, #180]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 80038c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038c4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038c6:	f7fe ff47 	bl	8002758 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ce:	f7fe ff43 	bl	8002758 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e099      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e0:	4b24      	ldr	r3, [pc, #144]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1f0      	bne.n	80038ce <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038ec:	4b21      	ldr	r3, [pc, #132]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 80038ee:	68da      	ldr	r2, [r3, #12]
 80038f0:	4b21      	ldr	r3, [pc, #132]	; (8003978 <HAL_RCC_OscConfig+0x77c>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038fc:	3a01      	subs	r2, #1
 80038fe:	0112      	lsls	r2, r2, #4
 8003900:	4311      	orrs	r1, r2
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003906:	0212      	lsls	r2, r2, #8
 8003908:	4311      	orrs	r1, r2
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800390e:	0852      	lsrs	r2, r2, #1
 8003910:	3a01      	subs	r2, #1
 8003912:	0552      	lsls	r2, r2, #21
 8003914:	4311      	orrs	r1, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800391a:	0852      	lsrs	r2, r2, #1
 800391c:	3a01      	subs	r2, #1
 800391e:	0652      	lsls	r2, r2, #25
 8003920:	4311      	orrs	r1, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003926:	06d2      	lsls	r2, r2, #27
 8003928:	430a      	orrs	r2, r1
 800392a:	4912      	ldr	r1, [pc, #72]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 800392c:	4313      	orrs	r3, r2
 800392e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a0f      	ldr	r2, [pc, #60]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 8003936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800393a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800393c:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	4a0c      	ldr	r2, [pc, #48]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 8003942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003946:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003948:	f7fe ff06 	bl	8002758 <HAL_GetTick>
 800394c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003950:	f7fe ff02 	bl	8002758 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e058      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003962:	4b04      	ldr	r3, [pc, #16]	; (8003974 <HAL_RCC_OscConfig+0x778>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800396e:	e050      	b.n	8003a12 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	e04f      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
 8003974:	40021000 	.word	0x40021000
 8003978:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397c:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <HAL_RCC_OscConfig+0x820>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003984:	2b00      	cmp	r3, #0
 8003986:	d144      	bne.n	8003a12 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003988:	4b24      	ldr	r3, [pc, #144]	; (8003a1c <HAL_RCC_OscConfig+0x820>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a23      	ldr	r2, [pc, #140]	; (8003a1c <HAL_RCC_OscConfig+0x820>)
 800398e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003992:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003994:	4b21      	ldr	r3, [pc, #132]	; (8003a1c <HAL_RCC_OscConfig+0x820>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	4a20      	ldr	r2, [pc, #128]	; (8003a1c <HAL_RCC_OscConfig+0x820>)
 800399a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800399e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039a0:	f7fe feda 	bl	8002758 <HAL_GetTick>
 80039a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039a6:	e008      	b.n	80039ba <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a8:	f7fe fed6 	bl	8002758 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d901      	bls.n	80039ba <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e02c      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ba:	4b18      	ldr	r3, [pc, #96]	; (8003a1c <HAL_RCC_OscConfig+0x820>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d0f0      	beq.n	80039a8 <HAL_RCC_OscConfig+0x7ac>
 80039c6:	e024      	b.n	8003a12 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b0c      	cmp	r3, #12
 80039cc:	d01f      	beq.n	8003a0e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <HAL_RCC_OscConfig+0x820>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a12      	ldr	r2, [pc, #72]	; (8003a1c <HAL_RCC_OscConfig+0x820>)
 80039d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039da:	f7fe febd 	bl	8002758 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e2:	f7fe feb9 	bl	8002758 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e00f      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f4:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_OscConfig+0x820>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f0      	bne.n	80039e2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_RCC_OscConfig+0x820>)
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	4905      	ldr	r1, [pc, #20]	; (8003a1c <HAL_RCC_OscConfig+0x820>)
 8003a06:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <HAL_RCC_OscConfig+0x824>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60cb      	str	r3, [r1, #12]
 8003a0c:	e001      	b.n	8003a12 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3720      	adds	r7, #32
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	feeefffc 	.word	0xfeeefffc

08003a24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d101      	bne.n	8003a38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0e7      	b.n	8003c08 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a38:	4b75      	ldr	r3, [pc, #468]	; (8003c10 <HAL_RCC_ClockConfig+0x1ec>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0307 	and.w	r3, r3, #7
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d910      	bls.n	8003a68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a46:	4b72      	ldr	r3, [pc, #456]	; (8003c10 <HAL_RCC_ClockConfig+0x1ec>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f023 0207 	bic.w	r2, r3, #7
 8003a4e:	4970      	ldr	r1, [pc, #448]	; (8003c10 <HAL_RCC_ClockConfig+0x1ec>)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a56:	4b6e      	ldr	r3, [pc, #440]	; (8003c10 <HAL_RCC_ClockConfig+0x1ec>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e0cf      	b.n	8003c08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d010      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	689a      	ldr	r2, [r3, #8]
 8003a78:	4b66      	ldr	r3, [pc, #408]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d908      	bls.n	8003a96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a84:	4b63      	ldr	r3, [pc, #396]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	4960      	ldr	r1, [pc, #384]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d04c      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d107      	bne.n	8003aba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aaa:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d121      	bne.n	8003afa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e0a6      	b.n	8003c08 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d107      	bne.n	8003ad2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac2:	4b54      	ldr	r3, [pc, #336]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d115      	bne.n	8003afa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e09a      	b.n	8003c08 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ada:	4b4e      	ldr	r3, [pc, #312]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e08e      	b.n	8003c08 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aea:	4b4a      	ldr	r3, [pc, #296]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e086      	b.n	8003c08 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003afa:	4b46      	ldr	r3, [pc, #280]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 0203 	bic.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4943      	ldr	r1, [pc, #268]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b0c:	f7fe fe24 	bl	8002758 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fe fe20 	bl	8002758 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e06e      	b.n	8003c08 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	4b3a      	ldr	r3, [pc, #232]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 020c 	and.w	r2, r3, #12
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1eb      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d010      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	4b31      	ldr	r3, [pc, #196]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d208      	bcs.n	8003b6a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b58:	4b2e      	ldr	r3, [pc, #184]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	492b      	ldr	r1, [pc, #172]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b6a:	4b29      	ldr	r3, [pc, #164]	; (8003c10 <HAL_RCC_ClockConfig+0x1ec>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d210      	bcs.n	8003b9a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b78:	4b25      	ldr	r3, [pc, #148]	; (8003c10 <HAL_RCC_ClockConfig+0x1ec>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f023 0207 	bic.w	r2, r3, #7
 8003b80:	4923      	ldr	r1, [pc, #140]	; (8003c10 <HAL_RCC_ClockConfig+0x1ec>)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b88:	4b21      	ldr	r3, [pc, #132]	; (8003c10 <HAL_RCC_ClockConfig+0x1ec>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e036      	b.n	8003c08 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba6:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	4918      	ldr	r1, [pc, #96]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc4:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4910      	ldr	r1, [pc, #64]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bd8:	f000 f824 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b0d      	ldr	r3, [pc, #52]	; (8003c14 <HAL_RCC_ClockConfig+0x1f0>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	091b      	lsrs	r3, r3, #4
 8003be4:	f003 030f 	and.w	r3, r3, #15
 8003be8:	490b      	ldr	r1, [pc, #44]	; (8003c18 <HAL_RCC_ClockConfig+0x1f4>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf4:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <HAL_RCC_ClockConfig+0x1f8>)
 8003bf6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x1fc>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe fd5b 	bl	80026b8 <HAL_InitTick>
 8003c02:	4603      	mov	r3, r0
 8003c04:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c06:	7afb      	ldrb	r3, [r7, #11]
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40022000 	.word	0x40022000
 8003c14:	40021000 	.word	0x40021000
 8003c18:	080052d0 	.word	0x080052d0
 8003c1c:	200000d8 	.word	0x200000d8
 8003c20:	200000dc 	.word	0x200000dc

08003c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b089      	sub	sp, #36	; 0x24
 8003c28:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c32:	4b3e      	ldr	r3, [pc, #248]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c3c:	4b3b      	ldr	r3, [pc, #236]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0303 	and.w	r3, r3, #3
 8003c44:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x34>
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d121      	bne.n	8003c96 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d11e      	bne.n	8003c96 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c58:	4b34      	ldr	r3, [pc, #208]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0308 	and.w	r3, r3, #8
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c64:	4b31      	ldr	r3, [pc, #196]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	e005      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c74:	4b2d      	ldr	r3, [pc, #180]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c80:	4a2b      	ldr	r2, [pc, #172]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c88:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10d      	bne.n	8003cac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c94:	e00a      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d102      	bne.n	8003ca2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c9c:	4b25      	ldr	r3, [pc, #148]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x110>)
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	e004      	b.n	8003cac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ca8:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x114>)
 8003caa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	2b0c      	cmp	r3, #12
 8003cb0:	d134      	bne.n	8003d1c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cb2:	4b1e      	ldr	r3, [pc, #120]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d003      	beq.n	8003cca <HAL_RCC_GetSysClockFreq+0xa6>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b03      	cmp	r3, #3
 8003cc6:	d003      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0xac>
 8003cc8:	e005      	b.n	8003cd6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cca:	4b1a      	ldr	r3, [pc, #104]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ccc:	617b      	str	r3, [r7, #20]
      break;
 8003cce:	e005      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cd0:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cd2:	617b      	str	r3, [r7, #20]
      break;
 8003cd4:	e002      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	617b      	str	r3, [r7, #20]
      break;
 8003cda:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cdc:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	091b      	lsrs	r3, r3, #4
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003cea:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	fb03 f202 	mul.w	r2, r3, r2
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	0e5b      	lsrs	r3, r3, #25
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3724      	adds	r7, #36	; 0x24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	080052e0 	.word	0x080052e0
 8003d34:	00f42400 	.word	0x00f42400
 8003d38:	007a1200 	.word	0x007a1200

08003d3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b086      	sub	sp, #24
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d44:	2300      	movs	r3, #0
 8003d46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d48:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d54:	f7ff f9c2 	bl	80030dc <HAL_PWREx_GetVoltageRange>
 8003d58:	6178      	str	r0, [r7, #20]
 8003d5a:	e014      	b.n	8003d86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d5c:	4b25      	ldr	r3, [pc, #148]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d60:	4a24      	ldr	r2, [pc, #144]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6593      	str	r3, [r2, #88]	; 0x58
 8003d68:	4b22      	ldr	r3, [pc, #136]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d74:	f7ff f9b2 	bl	80030dc <HAL_PWREx_GetVoltageRange>
 8003d78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d7e:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d8c:	d10b      	bne.n	8003da6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b80      	cmp	r3, #128	; 0x80
 8003d92:	d919      	bls.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2ba0      	cmp	r3, #160	; 0xa0
 8003d98:	d902      	bls.n	8003da0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e013      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003da0:	2301      	movs	r3, #1
 8003da2:	613b      	str	r3, [r7, #16]
 8003da4:	e010      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b80      	cmp	r3, #128	; 0x80
 8003daa:	d902      	bls.n	8003db2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003dac:	2303      	movs	r3, #3
 8003dae:	613b      	str	r3, [r7, #16]
 8003db0:	e00a      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b80      	cmp	r3, #128	; 0x80
 8003db6:	d102      	bne.n	8003dbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003db8:	2302      	movs	r3, #2
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e004      	b.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b70      	cmp	r3, #112	; 0x70
 8003dc2:	d101      	bne.n	8003dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 0207 	bic.w	r2, r3, #7
 8003dd0:	4909      	ldr	r1, [pc, #36]	; (8003df8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003dd8:	4b07      	ldr	r3, [pc, #28]	; (8003df8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d001      	beq.n	8003dea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40022000 	.word	0x40022000

08003dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e04:	2300      	movs	r3, #0
 8003e06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e08:	2300      	movs	r3, #0
 8003e0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d031      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e20:	d01a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003e22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e26:	d814      	bhi.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e30:	d10f      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003e32:	4b5d      	ldr	r3, [pc, #372]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	4a5c      	ldr	r2, [pc, #368]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e3c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e3e:	e00c      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	2100      	movs	r1, #0
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 f9f0 	bl	800422c <RCCEx_PLLSAI1_Config>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e50:	e003      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	74fb      	strb	r3, [r7, #19]
      break;
 8003e56:	e000      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e5a:	7cfb      	ldrb	r3, [r7, #19]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10b      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e60:	4b51      	ldr	r3, [pc, #324]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6e:	494e      	ldr	r1, [pc, #312]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e76:	e001      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 809e 	beq.w	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e8e:	4b46      	ldr	r3, [pc, #280]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea4:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea8:	4a3f      	ldr	r2, [pc, #252]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eae:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb0:	4b3d      	ldr	r3, [pc, #244]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec0:	4b3a      	ldr	r3, [pc, #232]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a39      	ldr	r2, [pc, #228]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ecc:	f7fe fc44 	bl	8002758 <HAL_GetTick>
 8003ed0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ed2:	e009      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed4:	f7fe fc40 	bl	8002758 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d902      	bls.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	74fb      	strb	r3, [r7, #19]
        break;
 8003ee6:	e005      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003ee8:	4b30      	ldr	r3, [pc, #192]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0ef      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003ef4:	7cfb      	ldrb	r3, [r7, #19]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d15a      	bne.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003efa:	4b2b      	ldr	r3, [pc, #172]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f04:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d01e      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d019      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f16:	4b24      	ldr	r3, [pc, #144]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f20:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f22:	4b21      	ldr	r3, [pc, #132]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f28:	4a1f      	ldr	r2, [pc, #124]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f32:	4b1d      	ldr	r3, [pc, #116]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	4a1b      	ldr	r2, [pc, #108]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f42:	4a19      	ldr	r2, [pc, #100]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d016      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f54:	f7fe fc00 	bl	8002758 <HAL_GetTick>
 8003f58:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f5c:	f7fe fbfc 	bl	8002758 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d902      	bls.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	74fb      	strb	r3, [r7, #19]
            break;
 8003f72:	e006      	b.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0ec      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003f82:	7cfb      	ldrb	r3, [r7, #19]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10b      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f88:	4b07      	ldr	r3, [pc, #28]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	4904      	ldr	r1, [pc, #16]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f9e:	e009      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fa0:	7cfb      	ldrb	r3, [r7, #19]
 8003fa2:	74bb      	strb	r3, [r7, #18]
 8003fa4:	e006      	b.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb0:	7cfb      	ldrb	r3, [r7, #19]
 8003fb2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb4:	7c7b      	ldrb	r3, [r7, #17]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d105      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fba:	4b9b      	ldr	r3, [pc, #620]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	4a9a      	ldr	r2, [pc, #616]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fd2:	4b95      	ldr	r3, [pc, #596]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd8:	f023 0203 	bic.w	r2, r3, #3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a1b      	ldr	r3, [r3, #32]
 8003fe0:	4991      	ldr	r1, [pc, #580]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00a      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ff4:	4b8c      	ldr	r3, [pc, #560]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	f023 020c 	bic.w	r2, r3, #12
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	4989      	ldr	r1, [pc, #548]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004004:	4313      	orrs	r3, r2
 8004006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00a      	beq.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004016:	4b84      	ldr	r3, [pc, #528]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004018:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800401c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	4980      	ldr	r1, [pc, #512]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004026:	4313      	orrs	r3, r2
 8004028:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0320 	and.w	r3, r3, #32
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00a      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004038:	4b7b      	ldr	r3, [pc, #492]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800403a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800403e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	4978      	ldr	r1, [pc, #480]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800405a:	4b73      	ldr	r3, [pc, #460]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800405c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004060:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	496f      	ldr	r1, [pc, #444]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800406a:	4313      	orrs	r3, r2
 800406c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800407c:	4b6a      	ldr	r3, [pc, #424]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	4967      	ldr	r1, [pc, #412]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800408c:	4313      	orrs	r3, r2
 800408e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800409e:	4b62      	ldr	r3, [pc, #392]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ac:	495e      	ldr	r1, [pc, #376]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040c0:	4b59      	ldr	r3, [pc, #356]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ce:	4956      	ldr	r1, [pc, #344]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040e2:	4b51      	ldr	r3, [pc, #324]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f0:	494d      	ldr	r1, [pc, #308]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d028      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004104:	4b48      	ldr	r3, [pc, #288]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004112:	4945      	ldr	r1, [pc, #276]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004122:	d106      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004124:	4b40      	ldr	r3, [pc, #256]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	4a3f      	ldr	r2, [pc, #252]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800412a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800412e:	60d3      	str	r3, [r2, #12]
 8004130:	e011      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004136:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800413a:	d10c      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3304      	adds	r3, #4
 8004140:	2101      	movs	r1, #1
 8004142:	4618      	mov	r0, r3
 8004144:	f000 f872 	bl	800422c <RCCEx_PLLSAI1_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 8004152:	7cfb      	ldrb	r3, [r7, #19]
 8004154:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d028      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004162:	4b31      	ldr	r3, [pc, #196]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004170:	492d      	ldr	r1, [pc, #180]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004180:	d106      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004182:	4b29      	ldr	r3, [pc, #164]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	4a28      	ldr	r2, [pc, #160]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004188:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800418c:	60d3      	str	r3, [r2, #12]
 800418e:	e011      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004194:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004198:	d10c      	bne.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	3304      	adds	r3, #4
 800419e:	2101      	movs	r1, #1
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 f843 	bl	800422c <RCCEx_PLLSAI1_Config>
 80041a6:	4603      	mov	r3, r0
 80041a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041aa:	7cfb      	ldrb	r3, [r7, #19]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d001      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80041b0:	7cfb      	ldrb	r3, [r7, #19]
 80041b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d01c      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041c0:	4b19      	ldr	r3, [pc, #100]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	4916      	ldr	r1, [pc, #88]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041de:	d10c      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	3304      	adds	r3, #4
 80041e4:	2102      	movs	r1, #2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f820 	bl	800422c <RCCEx_PLLSAI1_Config>
 80041ec:	4603      	mov	r3, r0
 80041ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041f0:	7cfb      	ldrb	r3, [r7, #19]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 80041f6:	7cfb      	ldrb	r3, [r7, #19]
 80041f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	4904      	ldr	r1, [pc, #16]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004216:	4313      	orrs	r3, r2
 8004218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800421c:	7cbb      	ldrb	r3, [r7, #18]
}
 800421e:	4618      	mov	r0, r3
 8004220:	3718      	adds	r7, #24
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40021000 	.word	0x40021000

0800422c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800423a:	4b74      	ldr	r3, [pc, #464]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	f003 0303 	and.w	r3, r3, #3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d018      	beq.n	8004278 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004246:	4b71      	ldr	r3, [pc, #452]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f003 0203 	and.w	r2, r3, #3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	429a      	cmp	r2, r3
 8004254:	d10d      	bne.n	8004272 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
       ||
 800425a:	2b00      	cmp	r3, #0
 800425c:	d009      	beq.n	8004272 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800425e:	4b6b      	ldr	r3, [pc, #428]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
       ||
 800426e:	429a      	cmp	r2, r3
 8004270:	d047      	beq.n	8004302 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	73fb      	strb	r3, [r7, #15]
 8004276:	e044      	b.n	8004302 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b03      	cmp	r3, #3
 800427e:	d018      	beq.n	80042b2 <RCCEx_PLLSAI1_Config+0x86>
 8004280:	2b03      	cmp	r3, #3
 8004282:	d825      	bhi.n	80042d0 <RCCEx_PLLSAI1_Config+0xa4>
 8004284:	2b01      	cmp	r3, #1
 8004286:	d002      	beq.n	800428e <RCCEx_PLLSAI1_Config+0x62>
 8004288:	2b02      	cmp	r3, #2
 800428a:	d009      	beq.n	80042a0 <RCCEx_PLLSAI1_Config+0x74>
 800428c:	e020      	b.n	80042d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800428e:	4b5f      	ldr	r3, [pc, #380]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d11d      	bne.n	80042d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800429e:	e01a      	b.n	80042d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042a0:	4b5a      	ldr	r3, [pc, #360]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d116      	bne.n	80042da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b0:	e013      	b.n	80042da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042b2:	4b56      	ldr	r3, [pc, #344]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10f      	bne.n	80042de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042be:	4b53      	ldr	r3, [pc, #332]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d109      	bne.n	80042de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042ce:	e006      	b.n	80042de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
      break;
 80042d4:	e004      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042d6:	bf00      	nop
 80042d8:	e002      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042da:	bf00      	nop
 80042dc:	e000      	b.n	80042e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042de:	bf00      	nop
    }

    if(status == HAL_OK)
 80042e0:	7bfb      	ldrb	r3, [r7, #15]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10d      	bne.n	8004302 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042e6:	4b49      	ldr	r3, [pc, #292]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6819      	ldr	r1, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	3b01      	subs	r3, #1
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	430b      	orrs	r3, r1
 80042fc:	4943      	ldr	r1, [pc, #268]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004302:	7bfb      	ldrb	r3, [r7, #15]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d17c      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004308:	4b40      	ldr	r3, [pc, #256]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a3f      	ldr	r2, [pc, #252]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 800430e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004312:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004314:	f7fe fa20 	bl	8002758 <HAL_GetTick>
 8004318:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800431a:	e009      	b.n	8004330 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800431c:	f7fe fa1c 	bl	8002758 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d902      	bls.n	8004330 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	73fb      	strb	r3, [r7, #15]
        break;
 800432e:	e005      	b.n	800433c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004330:	4b36      	ldr	r3, [pc, #216]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1ef      	bne.n	800431c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d15f      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d110      	bne.n	800436a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004348:	4b30      	ldr	r3, [pc, #192]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004350:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6892      	ldr	r2, [r2, #8]
 8004358:	0211      	lsls	r1, r2, #8
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68d2      	ldr	r2, [r2, #12]
 800435e:	06d2      	lsls	r2, r2, #27
 8004360:	430a      	orrs	r2, r1
 8004362:	492a      	ldr	r1, [pc, #168]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	610b      	str	r3, [r1, #16]
 8004368:	e027      	b.n	80043ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d112      	bne.n	8004396 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004370:	4b26      	ldr	r3, [pc, #152]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004378:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6892      	ldr	r2, [r2, #8]
 8004380:	0211      	lsls	r1, r2, #8
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6912      	ldr	r2, [r2, #16]
 8004386:	0852      	lsrs	r2, r2, #1
 8004388:	3a01      	subs	r2, #1
 800438a:	0552      	lsls	r2, r2, #21
 800438c:	430a      	orrs	r2, r1
 800438e:	491f      	ldr	r1, [pc, #124]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004390:	4313      	orrs	r3, r2
 8004392:	610b      	str	r3, [r1, #16]
 8004394:	e011      	b.n	80043ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004396:	4b1d      	ldr	r3, [pc, #116]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800439e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6892      	ldr	r2, [r2, #8]
 80043a6:	0211      	lsls	r1, r2, #8
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	6952      	ldr	r2, [r2, #20]
 80043ac:	0852      	lsrs	r2, r2, #1
 80043ae:	3a01      	subs	r2, #1
 80043b0:	0652      	lsls	r2, r2, #25
 80043b2:	430a      	orrs	r2, r1
 80043b4:	4915      	ldr	r1, [pc, #84]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043ba:	4b14      	ldr	r3, [pc, #80]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a13      	ldr	r2, [pc, #76]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c6:	f7fe f9c7 	bl	8002758 <HAL_GetTick>
 80043ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043cc:	e009      	b.n	80043e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043ce:	f7fe f9c3 	bl	8002758 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d902      	bls.n	80043e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	73fb      	strb	r3, [r7, #15]
          break;
 80043e0:	e005      	b.n	80043ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0ef      	beq.n	80043ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d106      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	699b      	ldr	r3, [r3, #24]
 80043fc:	4903      	ldr	r1, [pc, #12]	; (800440c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004402:	7bfb      	ldrb	r3, [r7, #15]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000

08004410 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d079      	beq.n	8004516 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	d106      	bne.n	800443c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fd ffcc 	bl	80023d4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2b10      	cmp	r3, #16
 8004450:	d058      	beq.n	8004504 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	22ca      	movs	r2, #202	; 0xca
 8004458:	625a      	str	r2, [r3, #36]	; 0x24
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2253      	movs	r2, #83	; 0x53
 8004460:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f9c6 	bl	80047f4 <RTC_EnterInitMode>
 8004468:	4603      	mov	r3, r0
 800446a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d127      	bne.n	80044c2 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004484:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6899      	ldr	r1, [r3, #8]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	431a      	orrs	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	68d2      	ldr	r2, [r2, #12]
 80044ac:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6919      	ldr	r1, [r3, #16]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	041a      	lsls	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f9ca 	bl	800485c <RTC_ExitInitMode>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80044cc:	7bfb      	ldrb	r3, [r7, #15]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d113      	bne.n	80044fa <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0203 	bic.w	r2, r2, #3
 80044e0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	69da      	ldr	r2, [r3, #28]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	431a      	orrs	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	22ff      	movs	r2, #255	; 0xff
 8004500:	625a      	str	r2, [r3, #36]	; 0x24
 8004502:	e001      	b.n	8004508 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004504:	2300      	movs	r3, #0
 8004506:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004508:	7bfb      	ldrb	r3, [r7, #15]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d103      	bne.n	8004516 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 8004516:	7bfb      	ldrb	r3, [r7, #15]
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_RTC_SetTime+0x1a>
 8004536:	2302      	movs	r3, #2
 8004538:	e08b      	b.n	8004652 <HAL_RTC_SetTime+0x132>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2202      	movs	r2, #2
 8004546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	22ca      	movs	r2, #202	; 0xca
 8004550:	625a      	str	r2, [r3, #36]	; 0x24
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2253      	movs	r2, #83	; 0x53
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f94a 	bl	80047f4 <RTC_EnterInitMode>
 8004560:	4603      	mov	r3, r0
 8004562:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004564:	7cfb      	ldrb	r3, [r7, #19]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d163      	bne.n	8004632 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d126      	bne.n	80045be <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	2200      	movs	r2, #0
 8004582:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	4618      	mov	r0, r3
 800458a:	f000 f9a5 	bl	80048d8 <RTC_ByteToBcd2>
 800458e:	4603      	mov	r3, r0
 8004590:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	785b      	ldrb	r3, [r3, #1]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 f99e 	bl	80048d8 <RTC_ByteToBcd2>
 800459c:	4603      	mov	r3, r0
 800459e:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045a0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	789b      	ldrb	r3, [r3, #2]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 f996 	bl	80048d8 <RTC_ByteToBcd2>
 80045ac:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045ae:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	78db      	ldrb	r3, [r3, #3]
 80045b6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e018      	b.n	80045f0 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d102      	bne.n	80045d2 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	2200      	movs	r2, #0
 80045d0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	785b      	ldrb	r3, [r3, #1]
 80045dc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045de:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80045e4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	78db      	ldrb	r3, [r3, #3]
 80045ea:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80045fa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80045fe:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689a      	ldr	r2, [r3, #8]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800460e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6899      	ldr	r1, [r3, #8]
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	431a      	orrs	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f917 	bl	800485c <RTC_ExitInitMode>
 800462e:	4603      	mov	r3, r0
 8004630:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	22ff      	movs	r2, #255	; 0xff
 8004638:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800463a:	7cfb      	ldrb	r3, [r7, #19]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d103      	bne.n	8004648 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004650:	7cfb      	ldrb	r3, [r7, #19]
}
 8004652:	4618      	mov	r0, r3
 8004654:	371c      	adds	r7, #28
 8004656:	46bd      	mov	sp, r7
 8004658:	bd90      	pop	{r4, r7, pc}

0800465a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b086      	sub	sp, #24
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004688:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800468c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	0c1b      	lsrs	r3, r3, #16
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	0a1b      	lsrs	r3, r3, #8
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046a8:	b2da      	uxtb	r2, r3
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	0d9b      	lsrs	r3, r3, #22
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11a      	bne.n	8004708 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 f91e 	bl	8004918 <RTC_Bcd2ToByte>
 80046dc:	4603      	mov	r3, r0
 80046de:	461a      	mov	r2, r3
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	785b      	ldrb	r3, [r3, #1]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 f915 	bl	8004918 <RTC_Bcd2ToByte>
 80046ee:	4603      	mov	r3, r0
 80046f0:	461a      	mov	r2, r3
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	789b      	ldrb	r3, [r3, #2]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 f90c 	bl	8004918 <RTC_Bcd2ToByte>
 8004700:	4603      	mov	r3, r0
 8004702:	461a      	mov	r2, r3
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b086      	sub	sp, #24
 8004716:	af00      	add	r7, sp, #0
 8004718:	60f8      	str	r0, [r7, #12]
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004728:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800472c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	0c1b      	lsrs	r3, r3, #16
 8004732:	b2da      	uxtb	r2, r3
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	0a1b      	lsrs	r3, r3, #8
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	b2da      	uxtb	r2, r3
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	b2db      	uxtb	r3, r3
 800474c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004750:	b2da      	uxtb	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	0b5b      	lsrs	r3, r3, #13
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	b2da      	uxtb	r2, r3
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d11a      	bne.n	80047a2 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	78db      	ldrb	r3, [r3, #3]
 8004770:	4618      	mov	r0, r3
 8004772:	f000 f8d1 	bl	8004918 <RTC_Bcd2ToByte>
 8004776:	4603      	mov	r3, r0
 8004778:	461a      	mov	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	785b      	ldrb	r3, [r3, #1]
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f8c8 	bl	8004918 <RTC_Bcd2ToByte>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	789b      	ldrb	r3, [r3, #2]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 f8bf 	bl	8004918 <RTC_Bcd2ToByte>
 800479a:	4603      	mov	r3, r0
 800479c:	461a      	mov	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3718      	adds	r7, #24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a0d      	ldr	r2, [pc, #52]	; (80047f0 <HAL_RTC_WaitForSynchro+0x44>)
 80047ba:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80047bc:	f7fd ffcc 	bl	8002758 <HAL_GetTick>
 80047c0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047c2:	e009      	b.n	80047d8 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80047c4:	f7fd ffc8 	bl	8002758 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047d2:	d901      	bls.n	80047d8 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e007      	b.n	80047e8 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f003 0320 	and.w	r3, r3, #32
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0ee      	beq.n	80047c4 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	0003ff5f 	.word	0x0003ff5f

080047f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	d120      	bne.n	8004850 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f04f 32ff 	mov.w	r2, #4294967295
 8004816:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004818:	f7fd ff9e 	bl	8002758 <HAL_GetTick>
 800481c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800481e:	e00d      	b.n	800483c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004820:	f7fd ff9a 	bl	8002758 <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800482e:	d905      	bls.n	800483c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2203      	movs	r2, #3
 8004838:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d102      	bne.n	8004850 <RTC_EnterInitMode+0x5c>
 800484a:	7bfb      	ldrb	r3, [r7, #15]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d1e7      	bne.n	8004820 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004850:	7bfb      	ldrb	r3, [r7, #15]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b084      	sub	sp, #16
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004868:	4b1a      	ldr	r3, [pc, #104]	; (80048d4 <RTC_ExitInitMode+0x78>)
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	4a19      	ldr	r2, [pc, #100]	; (80048d4 <RTC_ExitInitMode+0x78>)
 800486e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004872:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004874:	4b17      	ldr	r3, [pc, #92]	; (80048d4 <RTC_ExitInitMode+0x78>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d10c      	bne.n	800489a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7ff ff93 	bl	80047ac <HAL_RTC_WaitForSynchro>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d01e      	beq.n	80048ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2203      	movs	r2, #3
 8004890:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	73fb      	strb	r3, [r7, #15]
 8004898:	e017      	b.n	80048ca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800489a:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <RTC_ExitInitMode+0x78>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	4a0d      	ldr	r2, [pc, #52]	; (80048d4 <RTC_ExitInitMode+0x78>)
 80048a0:	f023 0320 	bic.w	r3, r3, #32
 80048a4:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff ff80 	bl	80047ac <HAL_RTC_WaitForSynchro>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2203      	movs	r2, #3
 80048b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <RTC_ExitInitMode+0x78>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	4a04      	ldr	r2, [pc, #16]	; (80048d4 <RTC_ExitInitMode+0x78>)
 80048c4:	f043 0320 	orr.w	r3, r3, #32
 80048c8:	6093      	str	r3, [r2, #8]
  }

  return status;
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	40002800 	.word	0x40002800

080048d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	4603      	mov	r3, r0
 80048e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80048e6:	79fb      	ldrb	r3, [r7, #7]
 80048e8:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80048ea:	e005      	b.n	80048f8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80048f2:	7afb      	ldrb	r3, [r7, #11]
 80048f4:	3b0a      	subs	r3, #10
 80048f6:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80048f8:	7afb      	ldrb	r3, [r7, #11]
 80048fa:	2b09      	cmp	r3, #9
 80048fc:	d8f6      	bhi.n	80048ec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	011b      	lsls	r3, r3, #4
 8004904:	b2da      	uxtb	r2, r3
 8004906:	7afb      	ldrb	r3, [r7, #11]
 8004908:	4313      	orrs	r3, r2
 800490a:	b2db      	uxtb	r3, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	4603      	mov	r3, r0
 8004920:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	b2db      	uxtb	r3, r3
 8004928:	461a      	mov	r2, r3
 800492a:	0092      	lsls	r2, r2, #2
 800492c:	4413      	add	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	b2da      	uxtb	r2, r3
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	4413      	add	r3, r2
 800493e:	b2db      	uxtb	r3, r3
}
 8004940:	4618      	mov	r0, r3
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b082      	sub	sp, #8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e049      	b.n	80049f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	d106      	bne.n	8004978 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fd fd5e 	bl	8002434 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	4619      	mov	r1, r3
 800498a:	4610      	mov	r0, r2
 800498c:	f000 f9e4 	bl	8004d58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
	...

080049fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d001      	beq.n	8004a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e03b      	b.n	8004a8c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a19      	ldr	r2, [pc, #100]	; (8004a98 <HAL_TIM_Base_Start_IT+0x9c>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d009      	beq.n	8004a4a <HAL_TIM_Base_Start_IT+0x4e>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a3e:	d004      	beq.n	8004a4a <HAL_TIM_Base_Start_IT+0x4e>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a15      	ldr	r2, [pc, #84]	; (8004a9c <HAL_TIM_Base_Start_IT+0xa0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d115      	bne.n	8004a76 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_TIM_Base_Start_IT+0xa4>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b06      	cmp	r3, #6
 8004a5a:	d015      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x8c>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a62:	d011      	beq.n	8004a88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a74:	e008      	b.n	8004a88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	e000      	b.n	8004a8a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	40012c00 	.word	0x40012c00
 8004a9c:	40014000 	.word	0x40014000
 8004aa0:	00010007 	.word	0x00010007

08004aa4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6a1a      	ldr	r2, [r3, #32]
 8004ac2:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10f      	bne.n	8004aec <HAL_TIM_Base_Stop_IT+0x48>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6a1a      	ldr	r2, [r3, #32]
 8004ad2:	f240 4344 	movw	r3, #1092	; 0x444
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d107      	bne.n	8004aec <HAL_TIM_Base_Stop_IT+0x48>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0201 	bic.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	370c      	adds	r7, #12
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr

08004b02 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b084      	sub	sp, #16
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	f003 0302 	and.w	r3, r3, #2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d020      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d01b      	beq.n	8004b66 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f06f 0202 	mvn.w	r2, #2
 8004b36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f8e4 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
 8004b52:	e005      	b.n	8004b60 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f8d6 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f8e7 	bl	8004d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d020      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 0304 	and.w	r3, r3, #4
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01b      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f06f 0204 	mvn.w	r2, #4
 8004b82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	699b      	ldr	r3, [r3, #24]
 8004b90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f8be 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
 8004b9e:	e005      	b.n	8004bac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f8b0 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 f8c1 	bl	8004d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d020      	beq.n	8004bfe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d01b      	beq.n	8004bfe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f06f 0208 	mvn.w	r2, #8
 8004bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d003      	beq.n	8004bec <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f000 f898 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
 8004bea:	e005      	b.n	8004bf8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f000 f88a 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 f89b 	bl	8004d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	f003 0310 	and.w	r3, r3, #16
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d020      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0310 	and.w	r3, r3, #16
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d01b      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f06f 0210 	mvn.w	r2, #16
 8004c1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2208      	movs	r2, #8
 8004c20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f872 	bl	8004d1a <HAL_TIM_IC_CaptureCallback>
 8004c36:	e005      	b.n	8004c44 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f864 	bl	8004d06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f875 	bl	8004d2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00c      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f06f 0201 	mvn.w	r2, #1
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7fb ffdf 	bl	8000c2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00c      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 f937 	bl	8004f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00c      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f92f 	bl	8004f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00c      	beq.n	8004cda <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f834 	bl	8004d42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f003 0320 	and.w	r3, r3, #32
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00c      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f06f 0220 	mvn.w	r2, #32
 8004cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 f8f7 	bl	8004eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d0e:	bf00      	nop
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b083      	sub	sp, #12
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b083      	sub	sp, #12
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d36:	bf00      	nop
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d4a:	bf00      	nop
 8004d4c:	370c      	adds	r7, #12
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr
	...

08004d58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a2a      	ldr	r2, [pc, #168]	; (8004e14 <TIM_Base_SetConfig+0xbc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_Base_SetConfig+0x20>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d76:	d108      	bne.n	8004d8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a21      	ldr	r2, [pc, #132]	; (8004e14 <TIM_Base_SetConfig+0xbc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00b      	beq.n	8004daa <TIM_Base_SetConfig+0x52>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d98:	d007      	beq.n	8004daa <TIM_Base_SetConfig+0x52>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1e      	ldr	r2, [pc, #120]	; (8004e18 <TIM_Base_SetConfig+0xc0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d003      	beq.n	8004daa <TIM_Base_SetConfig+0x52>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <TIM_Base_SetConfig+0xc4>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d108      	bne.n	8004dbc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	689a      	ldr	r2, [r3, #8]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a0c      	ldr	r2, [pc, #48]	; (8004e14 <TIM_Base_SetConfig+0xbc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d007      	beq.n	8004df8 <TIM_Base_SetConfig+0xa0>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a0b      	ldr	r2, [pc, #44]	; (8004e18 <TIM_Base_SetConfig+0xc0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <TIM_Base_SetConfig+0xa0>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a0a      	ldr	r2, [pc, #40]	; (8004e1c <TIM_Base_SetConfig+0xc4>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d103      	bne.n	8004e00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	615a      	str	r2, [r3, #20]
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40014000 	.word	0x40014000
 8004e1c:	40014400 	.word	0x40014400

08004e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d101      	bne.n	8004e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e34:	2302      	movs	r3, #2
 8004e36:	e04f      	b.n	8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d108      	bne.n	8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004e68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4313      	orrs	r3, r2
 8004e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d009      	beq.n	8004eac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea0:	d004      	beq.n	8004eac <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a10      	ldr	r2, [pc, #64]	; (8004ee8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d10c      	bne.n	8004ec6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004eb2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	40014000 	.word	0x40014000

08004eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ef4:	bf00      	nop
 8004ef6:	370c      	adds	r7, #12
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b083      	sub	sp, #12
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f08:	bf00      	nop
 8004f0a:	370c      	adds	r7, #12
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <_ZdlPvj>:
 8004f28:	f000 b811 	b.w	8004f4e <_ZdlPv>

08004f2c <_Znwj>:
 8004f2c:	2801      	cmp	r0, #1
 8004f2e:	bf38      	it	cc
 8004f30:	2001      	movcc	r0, #1
 8004f32:	b510      	push	{r4, lr}
 8004f34:	4604      	mov	r4, r0
 8004f36:	4620      	mov	r0, r4
 8004f38:	f000 f81c 	bl	8004f74 <malloc>
 8004f3c:	b100      	cbz	r0, 8004f40 <_Znwj+0x14>
 8004f3e:	bd10      	pop	{r4, pc}
 8004f40:	f000 f808 	bl	8004f54 <_ZSt15get_new_handlerv>
 8004f44:	b908      	cbnz	r0, 8004f4a <_Znwj+0x1e>
 8004f46:	f000 f80d 	bl	8004f64 <abort>
 8004f4a:	4780      	blx	r0
 8004f4c:	e7f3      	b.n	8004f36 <_Znwj+0xa>

08004f4e <_ZdlPv>:
 8004f4e:	f000 b819 	b.w	8004f84 <free>
	...

08004f54 <_ZSt15get_new_handlerv>:
 8004f54:	4b02      	ldr	r3, [pc, #8]	; (8004f60 <_ZSt15get_new_handlerv+0xc>)
 8004f56:	6818      	ldr	r0, [r3, #0]
 8004f58:	f3bf 8f5b 	dmb	ish
 8004f5c:	4770      	bx	lr
 8004f5e:	bf00      	nop
 8004f60:	2000022c 	.word	0x2000022c

08004f64 <abort>:
 8004f64:	b508      	push	{r3, lr}
 8004f66:	2006      	movs	r0, #6
 8004f68:	f000 f8f0 	bl	800514c <raise>
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	f7fd fb0f 	bl	8002590 <_exit>
	...

08004f74 <malloc>:
 8004f74:	4b02      	ldr	r3, [pc, #8]	; (8004f80 <malloc+0xc>)
 8004f76:	4601      	mov	r1, r0
 8004f78:	6818      	ldr	r0, [r3, #0]
 8004f7a:	f000 b82b 	b.w	8004fd4 <_malloc_r>
 8004f7e:	bf00      	nop
 8004f80:	20000130 	.word	0x20000130

08004f84 <free>:
 8004f84:	4b02      	ldr	r3, [pc, #8]	; (8004f90 <free+0xc>)
 8004f86:	4601      	mov	r1, r0
 8004f88:	6818      	ldr	r0, [r3, #0]
 8004f8a:	f000 b937 	b.w	80051fc <_free_r>
 8004f8e:	bf00      	nop
 8004f90:	20000130 	.word	0x20000130

08004f94 <sbrk_aligned>:
 8004f94:	b570      	push	{r4, r5, r6, lr}
 8004f96:	4e0e      	ldr	r6, [pc, #56]	; (8004fd0 <sbrk_aligned+0x3c>)
 8004f98:	460c      	mov	r4, r1
 8004f9a:	6831      	ldr	r1, [r6, #0]
 8004f9c:	4605      	mov	r5, r0
 8004f9e:	b911      	cbnz	r1, 8004fa6 <sbrk_aligned+0x12>
 8004fa0:	f000 f8f0 	bl	8005184 <_sbrk_r>
 8004fa4:	6030      	str	r0, [r6, #0]
 8004fa6:	4621      	mov	r1, r4
 8004fa8:	4628      	mov	r0, r5
 8004faa:	f000 f8eb 	bl	8005184 <_sbrk_r>
 8004fae:	1c43      	adds	r3, r0, #1
 8004fb0:	d00a      	beq.n	8004fc8 <sbrk_aligned+0x34>
 8004fb2:	1cc4      	adds	r4, r0, #3
 8004fb4:	f024 0403 	bic.w	r4, r4, #3
 8004fb8:	42a0      	cmp	r0, r4
 8004fba:	d007      	beq.n	8004fcc <sbrk_aligned+0x38>
 8004fbc:	1a21      	subs	r1, r4, r0
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f000 f8e0 	bl	8005184 <_sbrk_r>
 8004fc4:	3001      	adds	r0, #1
 8004fc6:	d101      	bne.n	8004fcc <sbrk_aligned+0x38>
 8004fc8:	f04f 34ff 	mov.w	r4, #4294967295
 8004fcc:	4620      	mov	r0, r4
 8004fce:	bd70      	pop	{r4, r5, r6, pc}
 8004fd0:	20000234 	.word	0x20000234

08004fd4 <_malloc_r>:
 8004fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fd8:	1ccd      	adds	r5, r1, #3
 8004fda:	f025 0503 	bic.w	r5, r5, #3
 8004fde:	3508      	adds	r5, #8
 8004fe0:	2d0c      	cmp	r5, #12
 8004fe2:	bf38      	it	cc
 8004fe4:	250c      	movcc	r5, #12
 8004fe6:	2d00      	cmp	r5, #0
 8004fe8:	4607      	mov	r7, r0
 8004fea:	db01      	blt.n	8004ff0 <_malloc_r+0x1c>
 8004fec:	42a9      	cmp	r1, r5
 8004fee:	d905      	bls.n	8004ffc <_malloc_r+0x28>
 8004ff0:	230c      	movs	r3, #12
 8004ff2:	603b      	str	r3, [r7, #0]
 8004ff4:	2600      	movs	r6, #0
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ffc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80050d0 <_malloc_r+0xfc>
 8005000:	f000 f868 	bl	80050d4 <__malloc_lock>
 8005004:	f8d8 3000 	ldr.w	r3, [r8]
 8005008:	461c      	mov	r4, r3
 800500a:	bb5c      	cbnz	r4, 8005064 <_malloc_r+0x90>
 800500c:	4629      	mov	r1, r5
 800500e:	4638      	mov	r0, r7
 8005010:	f7ff ffc0 	bl	8004f94 <sbrk_aligned>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	4604      	mov	r4, r0
 8005018:	d155      	bne.n	80050c6 <_malloc_r+0xf2>
 800501a:	f8d8 4000 	ldr.w	r4, [r8]
 800501e:	4626      	mov	r6, r4
 8005020:	2e00      	cmp	r6, #0
 8005022:	d145      	bne.n	80050b0 <_malloc_r+0xdc>
 8005024:	2c00      	cmp	r4, #0
 8005026:	d048      	beq.n	80050ba <_malloc_r+0xe6>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	4631      	mov	r1, r6
 800502c:	4638      	mov	r0, r7
 800502e:	eb04 0903 	add.w	r9, r4, r3
 8005032:	f000 f8a7 	bl	8005184 <_sbrk_r>
 8005036:	4581      	cmp	r9, r0
 8005038:	d13f      	bne.n	80050ba <_malloc_r+0xe6>
 800503a:	6821      	ldr	r1, [r4, #0]
 800503c:	1a6d      	subs	r5, r5, r1
 800503e:	4629      	mov	r1, r5
 8005040:	4638      	mov	r0, r7
 8005042:	f7ff ffa7 	bl	8004f94 <sbrk_aligned>
 8005046:	3001      	adds	r0, #1
 8005048:	d037      	beq.n	80050ba <_malloc_r+0xe6>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	442b      	add	r3, r5
 800504e:	6023      	str	r3, [r4, #0]
 8005050:	f8d8 3000 	ldr.w	r3, [r8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d038      	beq.n	80050ca <_malloc_r+0xf6>
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	42a2      	cmp	r2, r4
 800505c:	d12b      	bne.n	80050b6 <_malloc_r+0xe2>
 800505e:	2200      	movs	r2, #0
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	e00f      	b.n	8005084 <_malloc_r+0xb0>
 8005064:	6822      	ldr	r2, [r4, #0]
 8005066:	1b52      	subs	r2, r2, r5
 8005068:	d41f      	bmi.n	80050aa <_malloc_r+0xd6>
 800506a:	2a0b      	cmp	r2, #11
 800506c:	d917      	bls.n	800509e <_malloc_r+0xca>
 800506e:	1961      	adds	r1, r4, r5
 8005070:	42a3      	cmp	r3, r4
 8005072:	6025      	str	r5, [r4, #0]
 8005074:	bf18      	it	ne
 8005076:	6059      	strne	r1, [r3, #4]
 8005078:	6863      	ldr	r3, [r4, #4]
 800507a:	bf08      	it	eq
 800507c:	f8c8 1000 	streq.w	r1, [r8]
 8005080:	5162      	str	r2, [r4, r5]
 8005082:	604b      	str	r3, [r1, #4]
 8005084:	4638      	mov	r0, r7
 8005086:	f104 060b 	add.w	r6, r4, #11
 800508a:	f000 f829 	bl	80050e0 <__malloc_unlock>
 800508e:	f026 0607 	bic.w	r6, r6, #7
 8005092:	1d23      	adds	r3, r4, #4
 8005094:	1af2      	subs	r2, r6, r3
 8005096:	d0ae      	beq.n	8004ff6 <_malloc_r+0x22>
 8005098:	1b9b      	subs	r3, r3, r6
 800509a:	50a3      	str	r3, [r4, r2]
 800509c:	e7ab      	b.n	8004ff6 <_malloc_r+0x22>
 800509e:	42a3      	cmp	r3, r4
 80050a0:	6862      	ldr	r2, [r4, #4]
 80050a2:	d1dd      	bne.n	8005060 <_malloc_r+0x8c>
 80050a4:	f8c8 2000 	str.w	r2, [r8]
 80050a8:	e7ec      	b.n	8005084 <_malloc_r+0xb0>
 80050aa:	4623      	mov	r3, r4
 80050ac:	6864      	ldr	r4, [r4, #4]
 80050ae:	e7ac      	b.n	800500a <_malloc_r+0x36>
 80050b0:	4634      	mov	r4, r6
 80050b2:	6876      	ldr	r6, [r6, #4]
 80050b4:	e7b4      	b.n	8005020 <_malloc_r+0x4c>
 80050b6:	4613      	mov	r3, r2
 80050b8:	e7cc      	b.n	8005054 <_malloc_r+0x80>
 80050ba:	230c      	movs	r3, #12
 80050bc:	603b      	str	r3, [r7, #0]
 80050be:	4638      	mov	r0, r7
 80050c0:	f000 f80e 	bl	80050e0 <__malloc_unlock>
 80050c4:	e797      	b.n	8004ff6 <_malloc_r+0x22>
 80050c6:	6025      	str	r5, [r4, #0]
 80050c8:	e7dc      	b.n	8005084 <_malloc_r+0xb0>
 80050ca:	605b      	str	r3, [r3, #4]
 80050cc:	deff      	udf	#255	; 0xff
 80050ce:	bf00      	nop
 80050d0:	20000230 	.word	0x20000230

080050d4 <__malloc_lock>:
 80050d4:	4801      	ldr	r0, [pc, #4]	; (80050dc <__malloc_lock+0x8>)
 80050d6:	f000 b88f 	b.w	80051f8 <__retarget_lock_acquire_recursive>
 80050da:	bf00      	nop
 80050dc:	20000374 	.word	0x20000374

080050e0 <__malloc_unlock>:
 80050e0:	4801      	ldr	r0, [pc, #4]	; (80050e8 <__malloc_unlock+0x8>)
 80050e2:	f000 b88a 	b.w	80051fa <__retarget_lock_release_recursive>
 80050e6:	bf00      	nop
 80050e8:	20000374 	.word	0x20000374

080050ec <memset>:
 80050ec:	4402      	add	r2, r0
 80050ee:	4603      	mov	r3, r0
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d100      	bne.n	80050f6 <memset+0xa>
 80050f4:	4770      	bx	lr
 80050f6:	f803 1b01 	strb.w	r1, [r3], #1
 80050fa:	e7f9      	b.n	80050f0 <memset+0x4>

080050fc <_raise_r>:
 80050fc:	291f      	cmp	r1, #31
 80050fe:	b538      	push	{r3, r4, r5, lr}
 8005100:	4604      	mov	r4, r0
 8005102:	460d      	mov	r5, r1
 8005104:	d904      	bls.n	8005110 <_raise_r+0x14>
 8005106:	2316      	movs	r3, #22
 8005108:	6003      	str	r3, [r0, #0]
 800510a:	f04f 30ff 	mov.w	r0, #4294967295
 800510e:	bd38      	pop	{r3, r4, r5, pc}
 8005110:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005112:	b112      	cbz	r2, 800511a <_raise_r+0x1e>
 8005114:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005118:	b94b      	cbnz	r3, 800512e <_raise_r+0x32>
 800511a:	4620      	mov	r0, r4
 800511c:	f000 f830 	bl	8005180 <_getpid_r>
 8005120:	462a      	mov	r2, r5
 8005122:	4601      	mov	r1, r0
 8005124:	4620      	mov	r0, r4
 8005126:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800512a:	f000 b817 	b.w	800515c <_kill_r>
 800512e:	2b01      	cmp	r3, #1
 8005130:	d00a      	beq.n	8005148 <_raise_r+0x4c>
 8005132:	1c59      	adds	r1, r3, #1
 8005134:	d103      	bne.n	800513e <_raise_r+0x42>
 8005136:	2316      	movs	r3, #22
 8005138:	6003      	str	r3, [r0, #0]
 800513a:	2001      	movs	r0, #1
 800513c:	e7e7      	b.n	800510e <_raise_r+0x12>
 800513e:	2400      	movs	r4, #0
 8005140:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005144:	4628      	mov	r0, r5
 8005146:	4798      	blx	r3
 8005148:	2000      	movs	r0, #0
 800514a:	e7e0      	b.n	800510e <_raise_r+0x12>

0800514c <raise>:
 800514c:	4b02      	ldr	r3, [pc, #8]	; (8005158 <raise+0xc>)
 800514e:	4601      	mov	r1, r0
 8005150:	6818      	ldr	r0, [r3, #0]
 8005152:	f7ff bfd3 	b.w	80050fc <_raise_r>
 8005156:	bf00      	nop
 8005158:	20000130 	.word	0x20000130

0800515c <_kill_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4d07      	ldr	r5, [pc, #28]	; (800517c <_kill_r+0x20>)
 8005160:	2300      	movs	r3, #0
 8005162:	4604      	mov	r4, r0
 8005164:	4608      	mov	r0, r1
 8005166:	4611      	mov	r1, r2
 8005168:	602b      	str	r3, [r5, #0]
 800516a:	f7fd fa01 	bl	8002570 <_kill>
 800516e:	1c43      	adds	r3, r0, #1
 8005170:	d102      	bne.n	8005178 <_kill_r+0x1c>
 8005172:	682b      	ldr	r3, [r5, #0]
 8005174:	b103      	cbz	r3, 8005178 <_kill_r+0x1c>
 8005176:	6023      	str	r3, [r4, #0]
 8005178:	bd38      	pop	{r3, r4, r5, pc}
 800517a:	bf00      	nop
 800517c:	20000370 	.word	0x20000370

08005180 <_getpid_r>:
 8005180:	f7fd b9ee 	b.w	8002560 <_getpid>

08005184 <_sbrk_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4d06      	ldr	r5, [pc, #24]	; (80051a0 <_sbrk_r+0x1c>)
 8005188:	2300      	movs	r3, #0
 800518a:	4604      	mov	r4, r0
 800518c:	4608      	mov	r0, r1
 800518e:	602b      	str	r3, [r5, #0]
 8005190:	f7fd fa08 	bl	80025a4 <_sbrk>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d102      	bne.n	800519e <_sbrk_r+0x1a>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	b103      	cbz	r3, 800519e <_sbrk_r+0x1a>
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	20000370 	.word	0x20000370

080051a4 <__errno>:
 80051a4:	4b01      	ldr	r3, [pc, #4]	; (80051ac <__errno+0x8>)
 80051a6:	6818      	ldr	r0, [r3, #0]
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	20000130 	.word	0x20000130

080051b0 <__libc_init_array>:
 80051b0:	b570      	push	{r4, r5, r6, lr}
 80051b2:	4d0d      	ldr	r5, [pc, #52]	; (80051e8 <__libc_init_array+0x38>)
 80051b4:	4c0d      	ldr	r4, [pc, #52]	; (80051ec <__libc_init_array+0x3c>)
 80051b6:	1b64      	subs	r4, r4, r5
 80051b8:	10a4      	asrs	r4, r4, #2
 80051ba:	2600      	movs	r6, #0
 80051bc:	42a6      	cmp	r6, r4
 80051be:	d109      	bne.n	80051d4 <__libc_init_array+0x24>
 80051c0:	4d0b      	ldr	r5, [pc, #44]	; (80051f0 <__libc_init_array+0x40>)
 80051c2:	4c0c      	ldr	r4, [pc, #48]	; (80051f4 <__libc_init_array+0x44>)
 80051c4:	f000 f866 	bl	8005294 <_init>
 80051c8:	1b64      	subs	r4, r4, r5
 80051ca:	10a4      	asrs	r4, r4, #2
 80051cc:	2600      	movs	r6, #0
 80051ce:	42a6      	cmp	r6, r4
 80051d0:	d105      	bne.n	80051de <__libc_init_array+0x2e>
 80051d2:	bd70      	pop	{r4, r5, r6, pc}
 80051d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d8:	4798      	blx	r3
 80051da:	3601      	adds	r6, #1
 80051dc:	e7ee      	b.n	80051bc <__libc_init_array+0xc>
 80051de:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e2:	4798      	blx	r3
 80051e4:	3601      	adds	r6, #1
 80051e6:	e7f2      	b.n	80051ce <__libc_init_array+0x1e>
 80051e8:	08005310 	.word	0x08005310
 80051ec:	08005310 	.word	0x08005310
 80051f0:	08005310 	.word	0x08005310
 80051f4:	08005318 	.word	0x08005318

080051f8 <__retarget_lock_acquire_recursive>:
 80051f8:	4770      	bx	lr

080051fa <__retarget_lock_release_recursive>:
 80051fa:	4770      	bx	lr

080051fc <_free_r>:
 80051fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80051fe:	2900      	cmp	r1, #0
 8005200:	d044      	beq.n	800528c <_free_r+0x90>
 8005202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005206:	9001      	str	r0, [sp, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f1a1 0404 	sub.w	r4, r1, #4
 800520e:	bfb8      	it	lt
 8005210:	18e4      	addlt	r4, r4, r3
 8005212:	f7ff ff5f 	bl	80050d4 <__malloc_lock>
 8005216:	4a1e      	ldr	r2, [pc, #120]	; (8005290 <_free_r+0x94>)
 8005218:	9801      	ldr	r0, [sp, #4]
 800521a:	6813      	ldr	r3, [r2, #0]
 800521c:	b933      	cbnz	r3, 800522c <_free_r+0x30>
 800521e:	6063      	str	r3, [r4, #4]
 8005220:	6014      	str	r4, [r2, #0]
 8005222:	b003      	add	sp, #12
 8005224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005228:	f7ff bf5a 	b.w	80050e0 <__malloc_unlock>
 800522c:	42a3      	cmp	r3, r4
 800522e:	d908      	bls.n	8005242 <_free_r+0x46>
 8005230:	6825      	ldr	r5, [r4, #0]
 8005232:	1961      	adds	r1, r4, r5
 8005234:	428b      	cmp	r3, r1
 8005236:	bf01      	itttt	eq
 8005238:	6819      	ldreq	r1, [r3, #0]
 800523a:	685b      	ldreq	r3, [r3, #4]
 800523c:	1949      	addeq	r1, r1, r5
 800523e:	6021      	streq	r1, [r4, #0]
 8005240:	e7ed      	b.n	800521e <_free_r+0x22>
 8005242:	461a      	mov	r2, r3
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	b10b      	cbz	r3, 800524c <_free_r+0x50>
 8005248:	42a3      	cmp	r3, r4
 800524a:	d9fa      	bls.n	8005242 <_free_r+0x46>
 800524c:	6811      	ldr	r1, [r2, #0]
 800524e:	1855      	adds	r5, r2, r1
 8005250:	42a5      	cmp	r5, r4
 8005252:	d10b      	bne.n	800526c <_free_r+0x70>
 8005254:	6824      	ldr	r4, [r4, #0]
 8005256:	4421      	add	r1, r4
 8005258:	1854      	adds	r4, r2, r1
 800525a:	42a3      	cmp	r3, r4
 800525c:	6011      	str	r1, [r2, #0]
 800525e:	d1e0      	bne.n	8005222 <_free_r+0x26>
 8005260:	681c      	ldr	r4, [r3, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	6053      	str	r3, [r2, #4]
 8005266:	440c      	add	r4, r1
 8005268:	6014      	str	r4, [r2, #0]
 800526a:	e7da      	b.n	8005222 <_free_r+0x26>
 800526c:	d902      	bls.n	8005274 <_free_r+0x78>
 800526e:	230c      	movs	r3, #12
 8005270:	6003      	str	r3, [r0, #0]
 8005272:	e7d6      	b.n	8005222 <_free_r+0x26>
 8005274:	6825      	ldr	r5, [r4, #0]
 8005276:	1961      	adds	r1, r4, r5
 8005278:	428b      	cmp	r3, r1
 800527a:	bf04      	itt	eq
 800527c:	6819      	ldreq	r1, [r3, #0]
 800527e:	685b      	ldreq	r3, [r3, #4]
 8005280:	6063      	str	r3, [r4, #4]
 8005282:	bf04      	itt	eq
 8005284:	1949      	addeq	r1, r1, r5
 8005286:	6021      	streq	r1, [r4, #0]
 8005288:	6054      	str	r4, [r2, #4]
 800528a:	e7ca      	b.n	8005222 <_free_r+0x26>
 800528c:	b003      	add	sp, #12
 800528e:	bd30      	pop	{r4, r5, pc}
 8005290:	20000230 	.word	0x20000230

08005294 <_init>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	bf00      	nop
 8005298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529a:	bc08      	pop	{r3}
 800529c:	469e      	mov	lr, r3
 800529e:	4770      	bx	lr

080052a0 <_fini>:
 80052a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a2:	bf00      	nop
 80052a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052a6:	bc08      	pop	{r3}
 80052a8:	469e      	mov	lr, r3
 80052aa:	4770      	bx	lr
