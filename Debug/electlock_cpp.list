
electlock_cpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d0  080060d0  00020140  2**0
                  CONTENTS
  4 .ARM          00000000  080060d0  080060d0  00020140  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060d0  080060d0  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  080060e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000140  08006220  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08006220  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002367e  00000000  00000000  000201b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a45  00000000  00000000  00043831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017c8  00000000  00000000  00048278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000122d  00000000  00000000  00049a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027951  00000000  00000000  0004ac6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b08a  00000000  00000000  000725be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0ac8  00000000  00000000  0008d648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006e14  00000000  00000000  0016e110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00174f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000140 	.word	0x20000140
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006018 	.word	0x08006018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000144 	.word	0x20000144
 80001cc:	08006018 	.word	0x08006018

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_ZN11AdjustClockC1EP6AppArg>:
 *      Author: owner
 */

#include "AdjustClock.hpp"

AdjustClock::AdjustClock(AppArg *apparg):
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
    Application(apparg)
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	6839      	ldr	r1, [r7, #0]
 800027e:	4618      	mov	r0, r3
 8000280:	f000 fa2c 	bl	80006dc <_ZN11ApplicationC1EP6AppArg>
 8000284:	4a25      	ldr	r2, [pc, #148]	; (800031c <_ZN11AdjustClockC1EP6AppArg+0xac>)
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	601a      	str	r2, [r3, #0]
{
  HAL_RTC_GetTime(apparg->hrtc.get(), &gTime, RTC_FORMAT_BIN);
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	330c      	adds	r3, #12
 800028e:	4618      	mov	r0, r3
 8000290:	f000 f980 	bl	8000594 <_ZNKSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE3getEv>
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3304      	adds	r3, #4
 8000298:	2200      	movs	r2, #0
 800029a:	4619      	mov	r1, r3
 800029c:	f004 faa3 	bl	80047e6 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(apparg->hrtc.get(), &gDate, RTC_FORMAT_BIN);
 80002a0:	683b      	ldr	r3, [r7, #0]
 80002a2:	330c      	adds	r3, #12
 80002a4:	4618      	mov	r0, r3
 80002a6:	f000 f975 	bl	8000594 <_ZNKSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE3getEv>
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3318      	adds	r3, #24
 80002ae:	2200      	movs	r2, #0
 80002b0:	4619      	mov	r1, r3
 80002b2:	f004 faf4 	bl	800489e <HAL_RTC_GetDate>

  gTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  gTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2200      	movs	r2, #0
 80002c0:	615a      	str	r2, [r3, #20]

  hour = gTime.Hours;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	791b      	ldrb	r3, [r3, #4]
 80002c6:	b25a      	sxtb	r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	771a      	strb	r2, [r3, #28]
  min = gTime.Minutes;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	795b      	ldrb	r3, [r3, #5]
 80002d0:	b25a      	sxtb	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	775a      	strb	r2, [r3, #29]
  sec = gTime.Seconds;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	799b      	ldrb	r3, [r3, #6]
 80002da:	b25a      	sxtb	r2, r3
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	779a      	strb	r2, [r3, #30]

  setHour(hour);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fc35 	bl	8000b58 <_Z7setHourh>
  setMinute(min);
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	4618      	mov	r0, r3
 80002f8:	f000 fc5a 	bl	8000bb0 <_Z9setMinuteh>
  setSecond(sec);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8000302:	b2db      	uxtb	r3, r3
 8000304:	4618      	mov	r0, r3
 8000306:	f000 fc73 	bl	8000bf0 <_Z9setSecondh>

  mode_hms = 0;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	2200      	movs	r2, #0
 800030e:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	4618      	mov	r0, r3
 8000316:	3708      	adds	r7, #8
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	08006040 	.word	0x08006040

08000320 <_ZN11AdjustClock3runEP6AppArg>:

AdjustClock::~AdjustClock(){};

void AdjustClock::run(AppArg *apparg)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b082      	sub	sp, #8
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
  move_num = 0;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2200      	movs	r2, #0
 800032e:	77da      	strb	r2, [r3, #31]
  if (apparg->sw2->getFirstPress() || apparg->sw2->getHold())
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	3304      	adds	r3, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f000 f93a 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 800033a:	4603      	mov	r3, r0
 800033c:	4618      	mov	r0, r3
 800033e:	f000 fabf 	bl	80008c0 <_ZN8InputPin13getFirstPressEv>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d10b      	bne.n	8000360 <_ZN11AdjustClock3runEP6AppArg+0x40>
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	3304      	adds	r3, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f000 f92e 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000352:	4603      	mov	r3, r0
 8000354:	4618      	mov	r0, r3
 8000356:	f000 fad5 	bl	8000904 <_ZN8InputPin7getHoldEv>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <_ZN11AdjustClock3runEP6AppArg+0x44>
 8000360:	2301      	movs	r3, #1
 8000362:	e000      	b.n	8000366 <_ZN11AdjustClock3runEP6AppArg+0x46>
 8000364:	2300      	movs	r3, #0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d002      	beq.n	8000370 <_ZN11AdjustClock3runEP6AppArg+0x50>
  {
    move_num = 1;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	2201      	movs	r2, #1
 800036e:	77da      	strb	r2, [r3, #31]
  }

  if (apparg->sw3->getFirstPress() || apparg->sw3->getHold())
 8000370:	683b      	ldr	r3, [r7, #0]
 8000372:	3308      	adds	r3, #8
 8000374:	4618      	mov	r0, r3
 8000376:	f000 f91a 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 800037a:	4603      	mov	r3, r0
 800037c:	4618      	mov	r0, r3
 800037e:	f000 fa9f 	bl	80008c0 <_ZN8InputPin13getFirstPressEv>
 8000382:	4603      	mov	r3, r0
 8000384:	2b00      	cmp	r3, #0
 8000386:	d10b      	bne.n	80003a0 <_ZN11AdjustClock3runEP6AppArg+0x80>
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	3308      	adds	r3, #8
 800038c:	4618      	mov	r0, r3
 800038e:	f000 f90e 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000392:	4603      	mov	r3, r0
 8000394:	4618      	mov	r0, r3
 8000396:	f000 fab5 	bl	8000904 <_ZN8InputPin7getHoldEv>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <_ZN11AdjustClock3runEP6AppArg+0x84>
 80003a0:	2301      	movs	r3, #1
 80003a2:	e000      	b.n	80003a6 <_ZN11AdjustClock3runEP6AppArg+0x86>
 80003a4:	2300      	movs	r3, #0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d002      	beq.n	80003b0 <_ZN11AdjustClock3runEP6AppArg+0x90>
  {
    move_num = -1;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	22ff      	movs	r2, #255	; 0xff
 80003ae:	77da      	strb	r2, [r3, #31]
  }

  if (apparg->sw1->getFirstPress())
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 f8fb 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 80003b8:	4603      	mov	r3, r0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f000 fa80 	bl	80008c0 <_ZN8InputPin13getFirstPressEv>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d037      	beq.n	8000436 <_ZN11AdjustClock3runEP6AppArg+0x116>
  {
    mode_hms++;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80003cc:	3301      	adds	r3, #1
 80003ce:	b2da      	uxtb	r2, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f883 2020 	strb.w	r2, [r3, #32]
    if (mode_hms > 2)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80003dc:	2b02      	cmp	r3, #2
 80003de:	d92a      	bls.n	8000436 <_ZN11AdjustClock3runEP6AppArg+0x116>
    {
      mode_hms = 0;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	2200      	movs	r2, #0
 80003e4:	f883 2020 	strb.w	r2, [r3, #32]
      gTime.Hours = hour;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	f993 301c 	ldrsb.w	r3, [r3, #28]
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	711a      	strb	r2, [r3, #4]
      gTime.Minutes = min;
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80003fa:	b2da      	uxtb	r2, r3
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	715a      	strb	r2, [r3, #5]
      gTime.Seconds = sec;
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8000406:	b2da      	uxtb	r2, r3
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	719a      	strb	r2, [r3, #6]
      if (HAL_RTC_SetTime(apparg->hrtc.get(), &gTime, RTC_FORMAT_BIN) != HAL_OK)
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	330c      	adds	r3, #12
 8000410:	4618      	mov	r0, r3
 8000412:	f000 f8bf 	bl	8000594 <_ZNKSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE3getEv>
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3304      	adds	r3, #4
 800041a:	2200      	movs	r2, #0
 800041c:	4619      	mov	r1, r3
 800041e:	f004 f945 	bl	80046ac <HAL_RTC_SetTime>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	bf14      	ite	ne
 8000428:	2301      	movne	r3, #1
 800042a:	2300      	moveq	r3, #0
 800042c:	b2db      	uxtb	r3, r3
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <_ZN11AdjustClock3runEP6AppArg+0x116>
      {
        // エラーハンドリング
        Error_Handler();
 8000432:	f001 f839 	bl	80014a8 <Error_Handler>
      }
    }
  }

  switch (mode_hms)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	f893 3020 	ldrb.w	r3, [r3, #32]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d05e      	beq.n	80004fe <_ZN11AdjustClock3runEP6AppArg+0x1de>
 8000440:	2b02      	cmp	r3, #2
 8000442:	f300 8088 	bgt.w	8000556 <_ZN11AdjustClock3runEP6AppArg+0x236>
 8000446:	2b00      	cmp	r3, #0
 8000448:	d002      	beq.n	8000450 <_ZN11AdjustClock3runEP6AppArg+0x130>
 800044a:	2b01      	cmp	r3, #1
 800044c:	d02b      	beq.n	80004a6 <_ZN11AdjustClock3runEP6AppArg+0x186>
    sec += move_num;
    sec = sec < 0 ? 59 : sec;
    sec = sec % 60;
    break;
  default:
    break;
 800044e:	e082      	b.n	8000556 <_ZN11AdjustClock3runEP6AppArg+0x236>
    hour += move_num;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8000456:	b2da      	uxtb	r2, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f993 301f 	ldrsb.w	r3, [r3, #31]
 800045e:	b2db      	uxtb	r3, r3
 8000460:	4413      	add	r3, r2
 8000462:	b2db      	uxtb	r3, r3
 8000464:	b25a      	sxtb	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	771a      	strb	r2, [r3, #28]
    hour = hour < 0 ? 11 : hour;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8000470:	2b00      	cmp	r3, #0
 8000472:	db03      	blt.n	800047c <_ZN11AdjustClock3runEP6AppArg+0x15c>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f993 201c 	ldrsb.w	r2, [r3, #28]
 800047a:	e000      	b.n	800047e <_ZN11AdjustClock3runEP6AppArg+0x15e>
 800047c:	220b      	movs	r2, #11
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	771a      	strb	r2, [r3, #28]
    hour = hour % 24;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8000488:	4b40      	ldr	r3, [pc, #256]	; (800058c <_ZN11AdjustClock3runEP6AppArg+0x26c>)
 800048a:	fb83 1302 	smull	r1, r3, r3, r2
 800048e:	1099      	asrs	r1, r3, #2
 8000490:	17d3      	asrs	r3, r2, #31
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	460b      	mov	r3, r1
 8000496:	005b      	lsls	r3, r3, #1
 8000498:	440b      	add	r3, r1
 800049a:	00db      	lsls	r3, r3, #3
 800049c:	1ad3      	subs	r3, r2, r3
 800049e:	b25a      	sxtb	r2, r3
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	771a      	strb	r2, [r3, #28]
    break;
 80004a4:	e058      	b.n	8000558 <_ZN11AdjustClock3runEP6AppArg+0x238>
    min += move_num;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80004ac:	b2da      	uxtb	r2, r3
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	f993 301f 	ldrsb.w	r3, [r3, #31]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	4413      	add	r3, r2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	b25a      	sxtb	r2, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	775a      	strb	r2, [r3, #29]
    min = min < 0 ? 59 : min;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f993 301d 	ldrsb.w	r3, [r3, #29]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	db03      	blt.n	80004d2 <_ZN11AdjustClock3runEP6AppArg+0x1b2>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f993 201d 	ldrsb.w	r2, [r3, #29]
 80004d0:	e000      	b.n	80004d4 <_ZN11AdjustClock3runEP6AppArg+0x1b4>
 80004d2:	223b      	movs	r2, #59	; 0x3b
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	775a      	strb	r2, [r3, #29]
    min = min % 60;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f993 201d 	ldrsb.w	r2, [r3, #29]
 80004de:	4b2c      	ldr	r3, [pc, #176]	; (8000590 <_ZN11AdjustClock3runEP6AppArg+0x270>)
 80004e0:	fb83 1302 	smull	r1, r3, r3, r2
 80004e4:	4413      	add	r3, r2
 80004e6:	1159      	asrs	r1, r3, #5
 80004e8:	17d3      	asrs	r3, r2, #31
 80004ea:	1ac9      	subs	r1, r1, r3
 80004ec:	460b      	mov	r3, r1
 80004ee:	011b      	lsls	r3, r3, #4
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	1ad3      	subs	r3, r2, r3
 80004f6:	b25a      	sxtb	r2, r3
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	775a      	strb	r2, [r3, #29]
    break;
 80004fc:	e02c      	b.n	8000558 <_ZN11AdjustClock3runEP6AppArg+0x238>
    sec += move_num;
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8000504:	b2da      	uxtb	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f993 301f 	ldrsb.w	r3, [r3, #31]
 800050c:	b2db      	uxtb	r3, r3
 800050e:	4413      	add	r3, r2
 8000510:	b2db      	uxtb	r3, r3
 8000512:	b25a      	sxtb	r2, r3
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	779a      	strb	r2, [r3, #30]
    sec = sec < 0 ? 59 : sec;
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f993 301e 	ldrsb.w	r3, [r3, #30]
 800051e:	2b00      	cmp	r3, #0
 8000520:	db03      	blt.n	800052a <_ZN11AdjustClock3runEP6AppArg+0x20a>
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f993 201e 	ldrsb.w	r2, [r3, #30]
 8000528:	e000      	b.n	800052c <_ZN11AdjustClock3runEP6AppArg+0x20c>
 800052a:	223b      	movs	r2, #59	; 0x3b
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	779a      	strb	r2, [r3, #30]
    sec = sec % 60;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f993 201e 	ldrsb.w	r2, [r3, #30]
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <_ZN11AdjustClock3runEP6AppArg+0x270>)
 8000538:	fb83 1302 	smull	r1, r3, r3, r2
 800053c:	4413      	add	r3, r2
 800053e:	1159      	asrs	r1, r3, #5
 8000540:	17d3      	asrs	r3, r2, #31
 8000542:	1ac9      	subs	r1, r1, r3
 8000544:	460b      	mov	r3, r1
 8000546:	011b      	lsls	r3, r3, #4
 8000548:	1a5b      	subs	r3, r3, r1
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	1ad3      	subs	r3, r2, r3
 800054e:	b25a      	sxtb	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	779a      	strb	r2, [r3, #30]
    break;
 8000554:	e000      	b.n	8000558 <_ZN11AdjustClock3runEP6AppArg+0x238>
    break;
 8000556:	bf00      	nop
  }

  setHour(hour);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f993 301c 	ldrsb.w	r3, [r3, #28]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	4618      	mov	r0, r3
 8000562:	f000 faf9 	bl	8000b58 <_Z7setHourh>
  setMinute(min);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f993 301d 	ldrsb.w	r3, [r3, #29]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f000 fb1e 	bl	8000bb0 <_Z9setMinuteh>
  setSecond(sec);
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	f993 301e 	ldrsb.w	r3, [r3, #30]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fb37 	bl	8000bf0 <_Z9setSecondh>
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2aaaaaab 	.word	0x2aaaaaab
 8000590:	88888889 	.word	0x88888889

08000594 <_ZNKSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE3getEv>:
	return get();
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f811 	bl	80005c6 <_ZNKSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4618      	mov	r0, r3
 80005a8:	3708      	adds	r7, #8
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}

080005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
	return get();
 80005b6:	6878      	ldr	r0, [r7, #4]
 80005b8:	f000 f813 	bl	80005e2 <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EE3getEv>
 80005bc:	4603      	mov	r3, r0
      }
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}

080005c6 <_ZNKSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 80005c6:	b580      	push	{r7, lr}
 80005c8:	b082      	sub	sp, #8
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f813 	bl	80005fc <_ZSt3getILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 80005d6:	4603      	mov	r3, r0
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}

080005e2 <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b082      	sub	sp, #8
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f812 	bl	8000616 <_ZNKSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4618      	mov	r0, r3
 80005f6:	3708      	adds	r7, #8
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <_ZSt3getILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    { return std::__get_helper<__i>(__t); }

  /// Return a const reference to the ith element of a const tuple.
  template<size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f813 	bl	8000632 <_ZSt12__get_helperILj0EP17RTC_HandleTypeDefJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800060c:	4603      	mov	r3, r0
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <_ZNKSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f812 	bl	800064a <_ZSt3getILj0EJP8InputPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8000626:	4603      	mov	r3, r0
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4618      	mov	r0, r3
 800062c:	3708      	adds	r7, #8
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}

08000632 <_ZSt12__get_helperILj0EP17RTC_HandleTypeDefJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f812 	bl	8000664 <_ZNSt11_Tuple_implILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEE7_M_headERKS4_>
 8000640:	4603      	mov	r3, r0
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}

0800064a <_ZSt3getILj0EJP8InputPinSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 800064a:	b580      	push	{r7, lr}
 800064c:	b082      	sub	sp, #8
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4618      	mov	r0, r3
 8000656:	f000 f812 	bl	800067e <_ZSt12__get_helperILj0EP8InputPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 800065a:	4603      	mov	r3, r0
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <_ZNSt11_Tuple_implILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f811 	bl	8000696 <_ZNSt10_Head_baseILj0EP17RTC_HandleTypeDefLb0EE7_M_headERKS2_>
 8000674:	4603      	mov	r3, r0
 8000676:	4618      	mov	r0, r3
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <_ZSt12__get_helperILj0EP8InputPinJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f000 f810 	bl	80006ac <_ZNSt11_Tuple_implILj0EJP8InputPinSt14default_deleteIS0_EEE7_M_headERKS4_>
 800068c:	4603      	mov	r3, r0
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <_ZNSt10_Head_baseILj0EP17RTC_HandleTypeDefLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8000696:	b480      	push	{r7}
 8000698:	b083      	sub	sp, #12
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4618      	mov	r0, r3
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <_ZNSt11_Tuple_implILj0EJP8InputPinSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 f805 	bl	80006c6 <_ZNSt10_Head_baseILj0EP8InputPinLb0EE7_M_headERKS2_>
 80006bc:	4603      	mov	r3, r0
 80006be:	4618      	mov	r0, r3
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <_ZNSt10_Head_baseILj0EP8InputPinLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006da:	4770      	bx	lr

080006dc <_ZN11ApplicationC1EP6AppArg>:

#include "Application.hpp"



Application::Application(AppArg *apparg){};
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
 80006e6:	4a05      	ldr	r2, [pc, #20]	; (80006fc <_ZN11ApplicationC1EP6AppArg+0x20>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4618      	mov	r0, r3
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	0800604c 	.word	0x0800604c

08000700 <_ZN11ApplicationD1Ev>:

Application::~Application(){};
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	4a04      	ldr	r2, [pc, #16]	; (800071c <_ZN11ApplicationD1Ev+0x1c>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4618      	mov	r0, r3
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	0800604c 	.word	0x0800604c

08000720 <_ZN11Application3runEP6AppArg>:

 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
 800072a:	bf00      	nop
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr

08000736 <_ZN8InputPinC1EP12GPIO_TypeDeftb>:
 */


#include "InputPin.hpp"

InputPin::InputPin(GPIO_TypeDef *ptrPort, uint16_t pin, bool logic_invert){
 8000736:	b580      	push	{r7, lr}
 8000738:	b084      	sub	sp, #16
 800073a:	af00      	add	r7, sp, #0
 800073c:	60f8      	str	r0, [r7, #12]
 800073e:	60b9      	str	r1, [r7, #8]
 8000740:	4611      	mov	r1, r2
 8000742:	461a      	mov	r2, r3
 8000744:	460b      	mov	r3, r1
 8000746:	80fb      	strh	r3, [r7, #6]
 8000748:	4613      	mov	r3, r2
 800074a:	717b      	strb	r3, [r7, #5]
	_ptrPort = ptrPort;
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	601a      	str	r2, [r3, #0]
	_pin = pin;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	88fa      	ldrh	r2, [r7, #6]
 8000756:	809a      	strh	r2, [r3, #4]
	_logic_invert = logic_invert;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	797a      	ldrb	r2, [r7, #5]
 800075c:	719a      	strb	r2, [r3, #6]

	_HOLD_MS = 1000;
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000764:	811a      	strh	r2, [r3, #8]

	_pin_state = (HAL_GPIO_ReadPin(_ptrPort, _pin) == GPIO_PIN_SET);
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	889b      	ldrh	r3, [r3, #4]
 800076e:	4619      	mov	r1, r3
 8000770:	4610      	mov	r0, r2
 8000772:	f002 fb73 	bl	8002e5c <HAL_GPIO_ReadPin>
 8000776:	4603      	mov	r3, r0
 8000778:	2b01      	cmp	r3, #1
 800077a:	bf0c      	ite	eq
 800077c:	2301      	moveq	r3, #1
 800077e:	2300      	movne	r3, #0
 8000780:	b2da      	uxtb	r2, r3
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	745a      	strb	r2, [r3, #17]
	_pin_state ^= _logic_invert;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	7c5a      	ldrb	r2, [r3, #17]
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	799b      	ldrb	r3, [r3, #6]
 800078e:	429a      	cmp	r2, r3
 8000790:	bf14      	ite	ne
 8000792:	2301      	movne	r3, #1
 8000794:	2300      	moveq	r3, #0
 8000796:	b2da      	uxtb	r2, r3
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	745a      	strb	r2, [r3, #17]
	_b_pin_state = _pin_state;
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	7c5a      	ldrb	r2, [r3, #17]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	749a      	strb	r2, [r3, #18]

	_state = INPUTPIN_STATE_IDLE;
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2200      	movs	r2, #0
 80007a8:	741a      	strb	r2, [r3, #16]
}
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	4618      	mov	r0, r3
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <_ZN8InputPin5fetchEv>:

void InputPin::fetch(){
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	_b_pin_state = _pin_state;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	7c5a      	ldrb	r2, [r3, #17]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	749a      	strb	r2, [r3, #18]
	_pin_state = (HAL_GPIO_ReadPin(_ptrPort, _pin) == GPIO_PIN_SET);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	889b      	ldrh	r3, [r3, #4]
 80007cc:	4619      	mov	r1, r3
 80007ce:	4610      	mov	r0, r2
 80007d0:	f002 fb44 	bl	8002e5c <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	bf0c      	ite	eq
 80007da:	2301      	moveq	r3, #1
 80007dc:	2300      	movne	r3, #0
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	745a      	strb	r2, [r3, #17]
	_pin_state ^= _logic_invert;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	7c5a      	ldrb	r2, [r3, #17]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	799b      	ldrb	r3, [r3, #6]
 80007ec:	429a      	cmp	r2, r3
 80007ee:	bf14      	ite	ne
 80007f0:	2301      	movne	r3, #1
 80007f2:	2300      	moveq	r3, #0
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	745a      	strb	r2, [r3, #17]
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <_ZN8InputPin6updateEv>:

void InputPin::update(){
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	uint32_t time_now = HAL_GetTick();
 800080c:	f002 f86a 	bl	80028e4 <HAL_GetTick>
 8000810:	60f8      	str	r0, [r7, #12]

	switch(_state){
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	7c1b      	ldrb	r3, [r3, #16]
 8000816:	3b05      	subs	r3, #5
 8000818:	2b01      	cmp	r3, #1
 800081a:	d803      	bhi.n	8000824 <_ZN8InputPin6updateEv+0x20>
	case INPUTPIN_FIRST_RELEASE:
	case INPUTPIN_FIRST_HOLD_RELEASE:
		_state = INPUTPIN_STATE_IDLE;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2200      	movs	r2, #0
 8000820:	741a      	strb	r2, [r3, #16]
		break;
 8000822:	bf00      	nop
	}
	if (_pin_state == true){
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	7c5b      	ldrb	r3, [r3, #17]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d12c      	bne.n	8000886 <_ZN8InputPin6updateEv+0x82>
		switch(_state){
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	7c1b      	ldrb	r3, [r3, #16]
 8000830:	2b04      	cmp	r3, #4
 8000832:	d83c      	bhi.n	80008ae <_ZN8InputPin6updateEv+0xaa>
 8000834:	a201      	add	r2, pc, #4	; (adr r2, 800083c <_ZN8InputPin6updateEv+0x38>)
 8000836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800083a:	bf00      	nop
 800083c:	08000851 	.word	0x08000851
 8000840:	0800085f 	.word	0x0800085f
 8000844:	08000867 	.word	0x08000867
 8000848:	0800087f 	.word	0x0800087f
 800084c:	080008af 	.word	0x080008af
		case INPUTPIN_STATE_IDLE:
			_state = INPUTPIN_FIRST_PRESS;
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2201      	movs	r2, #1
 8000854:	741a      	strb	r2, [r3, #16]
			_time_press = time_now;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68fa      	ldr	r2, [r7, #12]
 800085a:	60da      	str	r2, [r3, #12]
			break;
 800085c:	e027      	b.n	80008ae <_ZN8InputPin6updateEv+0xaa>
		case INPUTPIN_FIRST_PRESS:
			_state = INPUTPIN_STATE_PRESS;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2202      	movs	r2, #2
 8000862:	741a      	strb	r2, [r3, #16]
			break;
 8000864:	e023      	b.n	80008ae <_ZN8InputPin6updateEv+0xaa>
		case INPUTPIN_STATE_PRESS:
			if ((time_now - _time_press) > _HOLD_MS){
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	8912      	ldrh	r2, [r2, #8]
 8000872:	4293      	cmp	r3, r2
 8000874:	d91a      	bls.n	80008ac <_ZN8InputPin6updateEv+0xa8>
				_state = INPUTPIN_FIRST_HOLD;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2203      	movs	r2, #3
 800087a:	741a      	strb	r2, [r3, #16]
			}
			break;
 800087c:	e016      	b.n	80008ac <_ZN8InputPin6updateEv+0xa8>
		case INPUTPIN_FIRST_HOLD:
			_state = INPUTPIN_STATE_HOLD;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2204      	movs	r2, #4
 8000882:	741a      	strb	r2, [r3, #16]
			break;
 8000884:	e013      	b.n	80008ae <_ZN8InputPin6updateEv+0xaa>
		case INPUTPIN_STATE_HOLD:
			break;
		}
	}else{
		switch(_state){
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	7c1b      	ldrb	r3, [r3, #16]
 800088a:	2b02      	cmp	r3, #2
 800088c:	dc02      	bgt.n	8000894 <_ZN8InputPin6updateEv+0x90>
 800088e:	2b00      	cmp	r3, #0
 8000890:	dc04      	bgt.n	800089c <_ZN8InputPin6updateEv+0x98>
 8000892:	e00c      	b.n	80008ae <_ZN8InputPin6updateEv+0xaa>
 8000894:	3b03      	subs	r3, #3
 8000896:	2b01      	cmp	r3, #1
 8000898:	d809      	bhi.n	80008ae <_ZN8InputPin6updateEv+0xaa>
 800089a:	e003      	b.n	80008a4 <_ZN8InputPin6updateEv+0xa0>
		case INPUTPIN_FIRST_PRESS:
		case INPUTPIN_STATE_PRESS:
			_state = INPUTPIN_FIRST_RELEASE;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2205      	movs	r2, #5
 80008a0:	741a      	strb	r2, [r3, #16]
			break;
 80008a2:	e004      	b.n	80008ae <_ZN8InputPin6updateEv+0xaa>
		case INPUTPIN_FIRST_HOLD:
		case INPUTPIN_STATE_HOLD:
			_state = INPUTPIN_FIRST_HOLD_RELEASE;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2206      	movs	r2, #6
 80008a8:	741a      	strb	r2, [r3, #16]
			break;
 80008aa:	e000      	b.n	80008ae <_ZN8InputPin6updateEv+0xaa>
			break;
 80008ac:	bf00      	nop
		}
	}
	_b_pin_state = _pin_state;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	7c5a      	ldrb	r2, [r3, #17]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	749a      	strb	r2, [r3, #18]
}
 80008b6:	bf00      	nop
 80008b8:	3710      	adds	r7, #16
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop

080008c0 <_ZN8InputPin13getFirstPressEv>:

bool InputPin::get(){
  return _pin_state;
}

bool InputPin::getFirstPress(){
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	return _state == INPUTPIN_FIRST_PRESS;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	7c1b      	ldrb	r3, [r3, #16]
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	bf0c      	ite	eq
 80008d0:	2301      	moveq	r3, #1
 80008d2:	2300      	movne	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <_ZN8InputPin12getFirstHoldEv>:

bool InputPin::getPress(){
	return _state == INPUTPIN_STATE_PRESS;
}

bool InputPin::getFirstHold(){
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
	return _state == INPUTPIN_FIRST_HOLD;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	7c1b      	ldrb	r3, [r3, #16]
 80008ee:	2b03      	cmp	r3, #3
 80008f0:	bf0c      	ite	eq
 80008f2:	2301      	moveq	r3, #1
 80008f4:	2300      	movne	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <_ZN8InputPin7getHoldEv>:

bool InputPin::getHold(){
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	return _state == INPUTPIN_STATE_HOLD;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	7c1b      	ldrb	r3, [r3, #16]
 8000910:	2b04      	cmp	r3, #4
 8000912:	bf0c      	ite	eq
 8000914:	2301      	moveq	r3, #1
 8000916:	2300      	movne	r3, #0
 8000918:	b2db      	uxtb	r3, r3
}
 800091a:	4618      	mov	r0, r3
 800091c:	370c      	adds	r7, #12
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <_ZN11SimpleClockC1EP6AppArg>:
 *      Author: owner
 */

#include "SimpleClock.hpp"

SimpleClock::SimpleClock(AppArg *apparg) : Application(apparg)
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	6839      	ldr	r1, [r7, #0]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff fed0 	bl	80006dc <_ZN11ApplicationC1EP6AppArg>
 800093c:	4a09      	ldr	r2, [pc, #36]	; (8000964 <_ZN11SimpleClockC1EP6AppArg+0x3c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	601a      	str	r2, [r3, #0]
{
  setHour(0);
 8000942:	2000      	movs	r0, #0
 8000944:	f000 f908 	bl	8000b58 <_Z7setHourh>
  setMinute(0);
 8000948:	2000      	movs	r0, #0
 800094a:	f000 f931 	bl	8000bb0 <_Z9setMinuteh>
  setSecond(0);
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f94e 	bl	8000bf0 <_Z9setSecondh>

  disp_mode = false;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	771a      	strb	r2, [r3, #28]
};
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4618      	mov	r0, r3
 800095e:	3708      	adds	r7, #8
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	08006058 	.word	0x08006058

08000968 <_ZN11SimpleClock3runEP6AppArg>:

SimpleClock::~SimpleClock(){};

void SimpleClock::run(AppArg *apparg)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  HAL_RTC_GetTime(apparg->hrtc.get(), &gTime, RTC_FORMAT_BIN);
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	330c      	adds	r3, #12
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fe0c 	bl	8000594 <_ZNKSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE3getEv>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3304      	adds	r3, #4
 8000980:	2200      	movs	r2, #0
 8000982:	4619      	mov	r1, r3
 8000984:	f003 ff2f 	bl	80047e6 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(apparg->hrtc.get(), &gDate, RTC_FORMAT_BIN);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	330c      	adds	r3, #12
 800098c:	4618      	mov	r0, r3
 800098e:	f7ff fe01 	bl	8000594 <_ZNKSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE3getEv>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3318      	adds	r3, #24
 8000996:	2200      	movs	r2, #0
 8000998:	4619      	mov	r1, r3
 800099a:	f003 ff80 	bl	800489e <HAL_RTC_GetDate>

  if (apparg->sw2->getFirstHold())
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	3304      	adds	r3, #4
 80009a2:	4618      	mov	r0, r3
 80009a4:	f7ff fe03 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff99 	bl	80008e2 <_ZN8InputPin12getFirstHoldEv>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d006      	beq.n	80009c4 <_ZN11SimpleClock3runEP6AppArg+0x5c>
  {
    disp_mode = !disp_mode;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	7f1b      	ldrb	r3, [r3, #28]
 80009ba:	f083 0301 	eor.w	r3, r3, #1
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	771a      	strb	r2, [r3, #28]
  }

  if (disp_mode)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	7f1b      	ldrb	r3, [r3, #28]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d004      	beq.n	80009d6 <_ZN11SimpleClock3runEP6AppArg+0x6e>
  {
    start_ms = HAL_GetTick();
 80009cc:	f001 ff8a 	bl	80028e4 <HAL_GetTick>
 80009d0:	4603      	mov	r3, r0
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <_ZN11SimpleClock3runEP6AppArg+0x94>)
 80009d4:	6013      	str	r3, [r2, #0]
  }


  setHour(gTime.Hours);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 f8bc 	bl	8000b58 <_Z7setHourh>
  setMinute(gTime.Minutes);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	795b      	ldrb	r3, [r3, #5]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 f8e3 	bl	8000bb0 <_Z9setMinuteh>
  setSecond(gTime.Seconds);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	799b      	ldrb	r3, [r3, #6]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f000 f8fe 	bl	8000bf0 <_Z9setSecondh>
};
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000224 	.word	0x20000224

08000a00 <_Z6setHiZP12GPIO_TypeDeft>:
		{ LD3, LD6},
};



void setHiZ(GPIO_TypeDef* port, uint16_t pin){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	460b      	mov	r3, r1
 8000a0a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8000a1c:	887b      	ldrh	r3, [r7, #2]
 8000a1e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a20:	2300      	movs	r3, #0
 8000a22:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(port , &GPIO_InitStruct);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	6878      	ldr	r0, [r7, #4]
 8000a30:	f002 f89a 	bl	8002b68 <HAL_GPIO_Init>
}
 8000a34:	bf00      	nop
 8000a36:	3720      	adds	r7, #32
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <_Z6outputP12GPIO_TypeDeft13GPIO_PinState>:

void output(GPIO_TypeDef* port, uint16_t pin, GPIO_PinState state){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]
 8000a48:	4613      	mov	r3, r2
 8000a4a:	707b      	strb	r3, [r7, #1]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 030c 	add.w	r3, r7, #12
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = pin;
 8000a5c:	887b      	ldrh	r3, [r7, #2]
 8000a5e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8000a6c:	f107 030c 	add.w	r3, r7, #12
 8000a70:	4619      	mov	r1, r3
 8000a72:	6878      	ldr	r0, [r7, #4]
 8000a74:	f002 f878 	bl	8002b68 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(port, pin, state);
 8000a78:	787a      	ldrb	r2, [r7, #1]
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f002 fa04 	bl	8002e8c <HAL_GPIO_WritePin>
}
 8000a84:	bf00      	nop
 8000a86:	3720      	adds	r7, #32
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <_Z5unlitv>:

void unlit(){
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i<11; i++){
 8000a92:	2300      	movs	r3, #0
 8000a94:	71fb      	strb	r3, [r7, #7]
 8000a96:	e00e      	b.n	8000ab6 <_Z5unlitv+0x2a>
		setHiZ(gpio_port[i], gpio_pin[i]);
 8000a98:	79fb      	ldrb	r3, [r7, #7]
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <_Z5unlitv+0x3c>)
 8000a9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	490a      	ldr	r1, [pc, #40]	; (8000acc <_Z5unlitv+0x40>)
 8000aa4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4610      	mov	r0, r2
 8000aac:	f7ff ffa8 	bl	8000a00 <_Z6setHiZP12GPIO_TypeDeft>
	for (uint8_t i=0; i<11; i++){
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	71fb      	strb	r3, [r7, #7]
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	2b0a      	cmp	r3, #10
 8000aba:	d9ed      	bls.n	8000a98 <_Z5unlitv+0xc>
	}
}
 8000abc:	bf00      	nop
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000000 	.word	0x20000000
 8000acc:	2000002c 	.word	0x2000002c

08000ad0 <_Z6litLEDh>:

void litLED(uint8_t num){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* p_port, *n_port;
	uint16_t p_pin, n_pin;

	unlit();
 8000ada:	f7ff ffd7 	bl	8000a8c <_Z5unlitv>

	p_port = gpio_port[led_wiring[num][1]];
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4a1a      	ldr	r2, [pc, #104]	; (8000b4c <_Z6litLEDh+0x7c>)
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4413      	add	r3, r2
 8000ae6:	785b      	ldrb	r3, [r3, #1]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <_Z6litLEDh+0x80>)
 8000aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000af0:	617b      	str	r3, [r7, #20]
	p_pin = gpio_pin[led_wiring[num][1]];
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	4a15      	ldr	r2, [pc, #84]	; (8000b4c <_Z6litLEDh+0x7c>)
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	4413      	add	r3, r2
 8000afa:	785b      	ldrb	r3, [r3, #1]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <_Z6litLEDh+0x84>)
 8000b00:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b04:	827b      	strh	r3, [r7, #18]
	n_port = gpio_port[led_wiring[num][0]];
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <_Z6litLEDh+0x7c>)
 8000b0a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <_Z6litLEDh+0x80>)
 8000b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b16:	60fb      	str	r3, [r7, #12]
	n_pin = gpio_pin[led_wiring[num][0]];
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	4a0c      	ldr	r2, [pc, #48]	; (8000b4c <_Z6litLEDh+0x7c>)
 8000b1c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <_Z6litLEDh+0x84>)
 8000b24:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000b28:	817b      	strh	r3, [r7, #10]
	output(p_port, p_pin, GPIO_PIN_SET);
 8000b2a:	8a7b      	ldrh	r3, [r7, #18]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	4619      	mov	r1, r3
 8000b30:	6978      	ldr	r0, [r7, #20]
 8000b32:	f7ff ff83 	bl	8000a3c <_Z6outputP12GPIO_TypeDeft13GPIO_PinState>
	output(n_port, n_pin, GPIO_PIN_RESET);
 8000b36:	897b      	ldrh	r3, [r7, #10]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f7ff ff7d 	bl	8000a3c <_Z6outputP12GPIO_TypeDeft13GPIO_PinState>
}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000044 	.word	0x20000044
 8000b50:	20000000 	.word	0x20000000
 8000b54:	2000002c 	.word	0x2000002c

08000b58 <_Z7setHourh>:


void setHour(uint8_t _hour)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  static uint8_t _b = 0xff;
  if (_b == _hour)
 8000b62:	4b10      	ldr	r3, [pc, #64]	; (8000ba4 <_Z7setHourh+0x4c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	79fa      	ldrb	r2, [r7, #7]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d015      	beq.n	8000b98 <_Z7setHourh+0x40>
    return;
  _hour = _hour < 0 ? 0 : _hour;
  _hour = _hour > 23 ? 23 : _hour;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b17      	cmp	r3, #23
 8000b70:	bf28      	it	cs
 8000b72:	2317      	movcs	r3, #23
 8000b74:	71fb      	strb	r3, [r7, #7]
  hour = _hour % 12;
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <_Z7setHourh+0x50>)
 8000b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b7e:	08d9      	lsrs	r1, r3, #3
 8000b80:	460b      	mov	r3, r1
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	440b      	add	r3, r1
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <_Z7setHourh+0x54>)
 8000b8e:	701a      	strb	r2, [r3, #0]
  _b = _hour;
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <_Z7setHourh+0x4c>)
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	7013      	strb	r3, [r2, #0]
 8000b96:	e000      	b.n	8000b9a <_Z7setHourh+0x42>
    return;
 8000b98:	bf00      	nop
}
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	200000d4 	.word	0x200000d4
 8000ba8:	aaaaaaab 	.word	0xaaaaaaab
 8000bac:	2000015c 	.word	0x2000015c

08000bb0 <_Z9setMinuteh>:

void setMinute(uint8_t _minute)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  static uint8_t _b = 0xff;
  if (_b == _minute)
 8000bba:	4b0b      	ldr	r3, [pc, #44]	; (8000be8 <_Z9setMinuteh+0x38>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	79fa      	ldrb	r2, [r7, #7]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d00b      	beq.n	8000bdc <_Z9setMinuteh+0x2c>
    return;
  _minute = _minute < 0 ? 0 : _minute;
  _minute = _minute > 59 ? 59 : _minute;
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	2b3b      	cmp	r3, #59	; 0x3b
 8000bc8:	bf28      	it	cs
 8000bca:	233b      	movcs	r3, #59	; 0x3b
 8000bcc:	71fb      	strb	r3, [r7, #7]
  minute = _minute;
 8000bce:	4a07      	ldr	r2, [pc, #28]	; (8000bec <_Z9setMinuteh+0x3c>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	7013      	strb	r3, [r2, #0]
  _b = _minute;
 8000bd4:	4a04      	ldr	r2, [pc, #16]	; (8000be8 <_Z9setMinuteh+0x38>)
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	7013      	strb	r3, [r2, #0]
 8000bda:	e000      	b.n	8000bde <_Z9setMinuteh+0x2e>
    return;
 8000bdc:	bf00      	nop
}
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	200000d5 	.word	0x200000d5
 8000bec:	2000015d 	.word	0x2000015d

08000bf0 <_Z9setSecondh>:

void setSecond(uint8_t _second)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  static uint8_t _b = 0xff;
  if (_b == _second)
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <_Z9setSecondh+0x38>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	79fa      	ldrb	r2, [r7, #7]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d00b      	beq.n	8000c1c <_Z9setSecondh+0x2c>
    return;
  _second = _second < 0 ? 0 : _second;
  _second = _second > 59 ? 59 : _second;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	2b3b      	cmp	r3, #59	; 0x3b
 8000c08:	bf28      	it	cs
 8000c0a:	233b      	movcs	r3, #59	; 0x3b
 8000c0c:	71fb      	strb	r3, [r7, #7]
  second = _second;
 8000c0e:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <_Z9setSecondh+0x3c>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	7013      	strb	r3, [r2, #0]
  _b = _second;
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <_Z9setSecondh+0x38>)
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	7013      	strb	r3, [r2, #0]
 8000c1a:	e000      	b.n	8000c1e <_Z9setSecondh+0x2e>
    return;
 8000c1c:	bf00      	nop
}
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	200000d6 	.word	0x200000d6
 8000c2c:	2000015e 	.word	0x2000015e

08000c30 <_ZNSt5tupleIJP6AppArgSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f805 	bl	8000c4a <_ZNSt11_Tuple_implILj0EJP6AppArgSt14default_deleteIS0_EEEC2Ev>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_ZNSt11_Tuple_implILj0EJP6AppArgSt14default_deleteIS0_EEEC2Ev>:
      constexpr _Tuple_impl()
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b082      	sub	sp, #8
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f000 f809 	bl	8000c6a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6AppArgEEEC2Ev>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f81c 	bl	8000c98 <_ZNSt10_Head_baseILj0EP6AppArgLb0EEC2Ev>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4618      	mov	r0, r3
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6AppArgEEEC2Ev>:
      _Tuple_impl()
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	b082      	sub	sp, #8
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f000 f805 	bl	8000c82 <_ZNSt10_Head_baseILj1ESt14default_deleteI6AppArgELb1EEC2Ev>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <_ZNSt10_Head_baseILj1ESt14default_deleteI6AppArgELb1EEC2Ev>:
      constexpr _Head_base()
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <_ZNSt10_Head_baseILj0EP6AppArgLb0EEC2Ev>:
      constexpr _Head_base()
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_Z14EnterStop2Modev>:
    Error_Handler();
  }
}

void EnterStop2Mode(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  // TIM6割り込みを無効にする
  HAL_TIM_Base_Stop_IT(&htim6);
 8000cb8:	4804      	ldr	r0, [pc, #16]	; (8000ccc <_Z14EnterStop2Modev+0x18>)
 8000cba:	f003 ffb9 	bl	8004c30 <HAL_TIM_Base_Stop_IT>

  unlit();
 8000cbe:	f7ff fee5 	bl	8000a8c <_Z5unlitv>
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f002 fb34 	bl	8003330 <HAL_PWREx_EnterSTOP2Mode>
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	200001d8 	.word	0x200001d8

08000cd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  static uint8_t phaze = 0;

  if (htim == &htim6)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d130      	bne.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x72>
  {
    if (++phaze >= 3)
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	4b19      	ldr	r3, [pc, #100]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cea:	701a      	strb	r2, [r3, #0]
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b02      	cmp	r3, #2
 8000cf2:	bf8c      	ite	hi
 8000cf4:	2301      	movhi	r3, #1
 8000cf6:	2300      	movls	r3, #0
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d002      	beq.n	8000d04 <HAL_TIM_PeriodElapsedCallback+0x34>
      phaze = 0;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	701a      	strb	r2, [r3, #0]

    switch (phaze)
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d014      	beq.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x66>
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	dc18      	bgt.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x72>
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d002      	beq.n	8000d1a <HAL_TIM_PeriodElapsedCallback+0x4a>
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d008      	beq.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x5a>
    case 2:
      litLED(second);
      break;
    }
  }
}
 8000d18:	e013      	b.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x72>
      litLED(60 + hour);
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	333c      	adds	r3, #60	; 0x3c
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fed4 	bl	8000ad0 <_Z6litLEDh>
      break;
 8000d28:	e00b      	b.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x72>
      litLED(minute);
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fece 	bl	8000ad0 <_Z6litLEDh>
      break;
 8000d34:	e005      	b.n	8000d42 <HAL_TIM_PeriodElapsedCallback+0x72>
      litLED(second);
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fec8 	bl	8000ad0 <_Z6litLEDh>
      break;
 8000d40:	bf00      	nop
}
 8000d42:	bf00      	nop
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200001d8 	.word	0x200001d8
 8000d50:	2000022c 	.word	0x2000022c
 8000d54:	2000015c 	.word	0x2000015c
 8000d58:	2000015d 	.word	0x2000015d
 8000d5c:	2000015e 	.word	0x2000015e

08000d60 <_ZNSt15__uniq_ptr_dataI6AppArgSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	683a      	ldr	r2, [r7, #0]
 8000d6e:	4611      	mov	r1, r2
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 fc64 	bl	800163e <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EEaSEOS3_>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	683a      	ldr	r2, [r7, #0]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ffe5 	bl	8000d60 <_ZNSt15__uniq_ptr_dataI6AppArgSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <_ZNSt15__uniq_ptr_dataI8InputPinSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f000 fcb9 	bl	8001728 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EEaSEOS3_>
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	683a      	ldr	r2, [r7, #0]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ffe5 	bl	8000da0 <_ZNSt15__uniq_ptr_dataI8InputPinSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <_ZNSt15__uniq_ptr_dataI17RTC_HandleTypeDefSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>:
      __uniq_ptr_data& operator=(__uniq_ptr_data&&) = default;
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	683a      	ldr	r2, [r7, #0]
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 fcf4 	bl	80017de <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EEaSEOS3_>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EEaSEOS3_>:
      unique_ptr& operator=(unique_ptr&&) = default;
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	6039      	str	r1, [r7, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	683a      	ldr	r2, [r7, #0]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ffe5 	bl	8000de0 <_ZNSt15__uniq_ptr_dataI17RTC_HandleTypeDefSt14default_deleteIS0_ELb1ELb1EEaSEOS3_>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000e20:	b5b0      	push	{r4, r5, r7, lr}
 8000e22:	b094      	sub	sp, #80	; 0x50
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f001 fcf4 	bl	8002812 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f979 	bl	8001120 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 fa97 	bl	8001360 <_ZL12MX_GPIO_Initv>
  MX_RTC_Init();
 8000e32:	f000 fa27 	bl	8001284 <_ZL11MX_RTC_Initv>
  MX_I2C3_Init();
 8000e36:	f000 f9d7 	bl	80011e8 <_ZL12MX_I2C3_Initv>
  MX_TIM6_Init();
 8000e3a:	f000 fa51 	bl	80012e0 <_ZL12MX_TIM6_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  apparg = std::make_unique<AppArg>();
 8000e3e:	f107 0320 	add.w	r3, r7, #32
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 fbbf 	bl	80015c6 <_ZSt11make_uniqueI6AppArgJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000e48:	f107 0320 	add.w	r3, r7, #32
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	48ae      	ldr	r0, [pc, #696]	; (8001108 <main+0x2e8>)
 8000e50:	f7ff ff96 	bl	8000d80 <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EEaSEOS3_>
 8000e54:	f107 0320 	add.w	r3, r7, #32
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fbce 	bl	80015fa <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EED1Ev>
  apparg->sw1 = std::make_unique<InputPin>(SW1_GPIO_Port, SW1_Pin, INPUTPIN_NEGATIVE_LOGIC);
 8000e5e:	48aa      	ldr	r0, [pc, #680]	; (8001108 <main+0x2e8>)
 8000e60:	f000 fc09 	bl	8001676 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000e64:	4603      	mov	r3, r0
 8000e66:	461c      	mov	r4, r3
 8000e68:	4ba8      	ldr	r3, [pc, #672]	; (800110c <main+0x2ec>)
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e70:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000e72:	2301      	movs	r3, #1
 8000e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e78:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000e7c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8000e80:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000e84:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000e88:	f000 fc01 	bl	800168e <_ZSt11make_uniqueI8InputPinJP12GPIO_TypeDeftbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4620      	mov	r0, r4
 8000e94:	f7ff ff94 	bl	8000dc0 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEaSEOS3_>
 8000e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fc21 	bl	80016e4 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>
  apparg->sw2 = std::make_unique<InputPin>(SW2_GPIO_Port, SW2_Pin, INPUTPIN_NEGATIVE_LOGIC);
 8000ea2:	4899      	ldr	r0, [pc, #612]	; (8001108 <main+0x2e8>)
 8000ea4:	f000 fbe7 	bl	8001676 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	1d1c      	adds	r4, r3, #4
 8000eac:	4b97      	ldr	r3, [pc, #604]	; (800110c <main+0x2ec>)
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
 8000eb0:	2380      	movs	r3, #128	; 0x80
 8000eb2:	873b      	strh	r3, [r7, #56]	; 0x38
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8000eba:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000ebe:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8000ec2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000ec6:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000eca:	f000 fbe0 	bl	800168e <_ZSt11make_uniqueI8InputPinJP12GPIO_TypeDeftbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000ece:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4620      	mov	r0, r4
 8000ed6:	f7ff ff73 	bl	8000dc0 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEaSEOS3_>
 8000eda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 fc00 	bl	80016e4 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>
  apparg->sw3 = std::make_unique<InputPin>(SW3_GPIO_Port, SW3_Pin, INPUTPIN_NEGATIVE_LOGIC);
 8000ee4:	4888      	ldr	r0, [pc, #544]	; (8001108 <main+0x2e8>)
 8000ee6:	f000 fbc6 	bl	8001676 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000eea:	4603      	mov	r3, r0
 8000eec:	f103 0408 	add.w	r4, r3, #8
 8000ef0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8000efc:	2301      	movs	r3, #1
 8000efe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8000f02:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000f06:	f107 0347 	add.w	r3, r7, #71	; 0x47
 8000f0a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000f0e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000f12:	f000 fbbc 	bl	800168e <_ZSt11make_uniqueI8InputPinJP12GPIO_TypeDeftbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000f16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff ff4f 	bl	8000dc0 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEaSEOS3_>
 8000f22:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 fbdc 	bl	80016e4 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>

  apparg->hrtc = std::make_unique<RTC_HandleTypeDef>(hrtc);
 8000f2c:	4876      	ldr	r0, [pc, #472]	; (8001108 <main+0x2e8>)
 8000f2e:	f000 fba2 	bl	8001676 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000f32:	4603      	mov	r3, r0
 8000f34:	f103 040c 	add.w	r4, r3, #12
 8000f38:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f3c:	4974      	ldr	r1, [pc, #464]	; (8001110 <main+0x2f0>)
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 fc0e 	bl	8001760 <_ZSt11make_uniqueI17RTC_HandleTypeDefJRS0_EENSt9_MakeUniqIT_E15__single_objectEDpOT0_>
 8000f44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	f7ff ff58 	bl	8000e00 <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EEaSEOS3_>
 8000f50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fc20 	bl	800179a <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EED1Ev>

  HAL_TIM_Base_Start_IT(&htim6);
 8000f5a:	486e      	ldr	r0, [pc, #440]	; (8001114 <main+0x2f4>)
 8000f5c:	f003 fe14 	bl	8004b88 <HAL_TIM_Base_Start_IT>

  start_ms = HAL_GetTick();
 8000f60:	f001 fcc0 	bl	80028e4 <HAL_GetTick>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a6c      	ldr	r2, [pc, #432]	; (8001118 <main+0x2f8>)
 8000f68:	6013      	str	r3, [r2, #0]

  std::unique_ptr<Application> app;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
  app.reset(new SimpleClock(apparg.get()));
 8000f6e:	4866      	ldr	r0, [pc, #408]	; (8001108 <main+0x2e8>)
 8000f70:	f000 fc51 	bl	8001816 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EE3getEv>
 8000f74:	4605      	mov	r5, r0
 8000f76:	2020      	movs	r0, #32
 8000f78:	f004 f89e 	bl	80050b8 <_Znwj>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	461c      	mov	r4, r3
 8000f80:	4629      	mov	r1, r5
 8000f82:	4620      	mov	r0, r4
 8000f84:	f7ff fcd0 	bl	8000928 <_ZN11SimpleClockC1EP6AppArg>
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4621      	mov	r1, r4
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fc4e 	bl	8001830 <_ZNSt10unique_ptrI11ApplicationSt14default_deleteIS0_EE5resetEPS0_>

  RTC_TimeTypeDef gTime;
  RTC_DateTypeDef gDate;

  uint8_t mode = 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

    apparg->sw1->fetch();
 8000f9a:	485b      	ldr	r0, [pc, #364]	; (8001108 <main+0x2e8>)
 8000f9c:	f000 fb6b 	bl	8001676 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fb03 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fc02 	bl	80007b4 <_ZN8InputPin5fetchEv>
    apparg->sw2->fetch();
 8000fb0:	4855      	ldr	r0, [pc, #340]	; (8001108 <main+0x2e8>)
 8000fb2:	f000 fb60 	bl	8001676 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	3304      	adds	r3, #4
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff faf7 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f7ff fbf6 	bl	80007b4 <_ZN8InputPin5fetchEv>
    apparg->sw3->fetch();
 8000fc8:	484f      	ldr	r0, [pc, #316]	; (8001108 <main+0x2e8>)
 8000fca:	f000 fb54 	bl	8001676 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	3308      	adds	r3, #8
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff faeb 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fbea 	bl	80007b4 <_ZN8InputPin5fetchEv>
    apparg->sw1->update();
 8000fe0:	4849      	ldr	r0, [pc, #292]	; (8001108 <main+0x2e8>)
 8000fe2:	f000 fb48 	bl	8001676 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fae0 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fc07 	bl	8000804 <_ZN8InputPin6updateEv>
    apparg->sw2->update();
 8000ff6:	4844      	ldr	r0, [pc, #272]	; (8001108 <main+0x2e8>)
 8000ff8:	f000 fb3d 	bl	8001676 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	3304      	adds	r3, #4
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fad4 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8001006:	4603      	mov	r3, r0
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fbfb 	bl	8000804 <_ZN8InputPin6updateEv>
    apparg->sw3->update();
 800100e:	483e      	ldr	r0, [pc, #248]	; (8001108 <main+0x2e8>)
 8001010:	f000 fb31 	bl	8001676 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 8001014:	4603      	mov	r3, r0
 8001016:	3308      	adds	r3, #8
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fac8 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 800101e:	4603      	mov	r3, r0
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fbef 	bl	8000804 <_ZN8InputPin6updateEv>

    if (apparg->sw1->getFirstHold())
 8001026:	4838      	ldr	r0, [pc, #224]	; (8001108 <main+0x2e8>)
 8001028:	f000 fb25 	bl	8001676 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>
 800102c:	4603      	mov	r3, r0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff fabd 	bl	80005ae <_ZNKSt10unique_ptrI8InputPinSt14default_deleteIS0_EEptEv>
 8001034:	4603      	mov	r3, r0
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fc53 	bl	80008e2 <_ZN8InputPin12getFirstHoldEv>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d03a      	beq.n	80010b8 <main+0x298>
    {
      mode++;
 8001042:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001046:	3301      	adds	r3, #1
 8001048:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      if (mode > 1)
 800104c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001050:	2b01      	cmp	r3, #1
 8001052:	d902      	bls.n	800105a <main+0x23a>
        mode = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      
      switch (mode){
 800105a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800105e:	2b00      	cmp	r3, #0
 8001060:	d002      	beq.n	8001068 <main+0x248>
 8001062:	2b01      	cmp	r3, #1
 8001064:	d014      	beq.n	8001090 <main+0x270>
 8001066:	e027      	b.n	80010b8 <main+0x298>
        case 0:
          app.reset(new SimpleClock(apparg.get()));
 8001068:	4827      	ldr	r0, [pc, #156]	; (8001108 <main+0x2e8>)
 800106a:	f000 fbd4 	bl	8001816 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EE3getEv>
 800106e:	4605      	mov	r5, r0
 8001070:	2020      	movs	r0, #32
 8001072:	f004 f821 	bl	80050b8 <_Znwj>
 8001076:	4603      	mov	r3, r0
 8001078:	461c      	mov	r4, r3
 800107a:	4629      	mov	r1, r5
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff fc53 	bl	8000928 <_ZN11SimpleClockC1EP6AppArg>
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4621      	mov	r1, r4
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fbd1 	bl	8001830 <_ZNSt10unique_ptrI11ApplicationSt14default_deleteIS0_EE5resetEPS0_>
          break;
 800108e:	e013      	b.n	80010b8 <main+0x298>
        case 1:
          app.reset(new AdjustClock(apparg.get()));
 8001090:	481d      	ldr	r0, [pc, #116]	; (8001108 <main+0x2e8>)
 8001092:	f000 fbc0 	bl	8001816 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EE3getEv>
 8001096:	4605      	mov	r5, r0
 8001098:	2024      	movs	r0, #36	; 0x24
 800109a:	f004 f80d 	bl	80050b8 <_Znwj>
 800109e:	4603      	mov	r3, r0
 80010a0:	461c      	mov	r4, r3
 80010a2:	4629      	mov	r1, r5
 80010a4:	4620      	mov	r0, r4
 80010a6:	f7ff f8e3 	bl	8000270 <_ZN11AdjustClockC1EP6AppArg>
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4621      	mov	r1, r4
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 fbbd 	bl	8001830 <_ZNSt10unique_ptrI11ApplicationSt14default_deleteIS0_EE5resetEPS0_>
          break;
 80010b6:	bf00      	nop
      }
    }

    app->run(apparg.get());
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fbcb 	bl	8001858 <_ZNKSt10unique_ptrI11ApplicationSt14default_deleteIS0_EEptEv>
 80010c2:	4604      	mov	r4, r0
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	681d      	ldr	r5, [r3, #0]
 80010c8:	480f      	ldr	r0, [pc, #60]	; (8001108 <main+0x2e8>)
 80010ca:	f000 fba4 	bl	8001816 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EE3getEv>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4619      	mov	r1, r3
 80010d2:	4620      	mov	r0, r4
 80010d4:	47a8      	blx	r5

    // 5秒経ったらSTOP2モードに入?��?
    if ((HAL_GetTick() - start_ms) > 10000)
 80010d6:	f001 fc05 	bl	80028e4 <HAL_GetTick>
 80010da:	4602      	mov	r2, r0
 80010dc:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <main+0x2f8>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80010e6:	4293      	cmp	r3, r2
 80010e8:	bf8c      	ite	hi
 80010ea:	2301      	movhi	r3, #1
 80010ec:	2300      	movls	r3, #0
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <main+0x2d8>
    {
      EnterStop2Mode();
 80010f4:	f7ff fdde 	bl	8000cb4 <_Z14EnterStop2Modev>
    }
    printf("hello!");
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <main+0x2fc>)
 80010fa:	f004 f97f 	bl	80053fc <iprintf>
    HAL_Delay(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f001 fbfc 	bl	80028fc <HAL_Delay>
    apparg->sw1->fetch();
 8001104:	e749      	b.n	8000f9a <main+0x17a>
 8001106:	bf00      	nop
 8001108:	20000228 	.word	0x20000228
 800110c:	48000400 	.word	0x48000400
 8001110:	200001b4 	.word	0x200001b4
 8001114:	200001d8 	.word	0x200001d8
 8001118:	20000224 	.word	0x20000224
 800111c:	08006030 	.word	0x08006030

08001120 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b096      	sub	sp, #88	; 0x58
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	2244      	movs	r2, #68	; 0x44
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f004 f9b9 	bl	80054a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001142:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001146:	f002 f89d 	bl	8003284 <HAL_PWREx_ControlVoltageScaling>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	bf14      	ite	ne
 8001150:	2301      	movne	r3, #1
 8001152:	2300      	moveq	r3, #0
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 800115a:	f000 f9a5 	bl	80014a8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
   */
  HAL_PWR_EnableBkUpAccess();
 800115e:	f002 f803 	bl	8003168 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <_Z18SystemClock_Configv+0xc4>)
 8001164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001168:	4a1e      	ldr	r2, [pc, #120]	; (80011e4 <_Z18SystemClock_Configv+0xc4>)
 800116a:	f023 0318 	bic.w	r3, r3, #24
 800116e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_MSI;
 8001172:	2314      	movs	r3, #20
 8001174:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001176:	2301      	movs	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800117a:	2301      	movs	r3, #1
 800117c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800117e:	2300      	movs	r3, #0
 8001180:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8001182:	2340      	movs	r3, #64	; 0x40
 8001184:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001186:	2300      	movs	r3, #0
 8001188:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4618      	mov	r0, r3
 8001190:	f002 f8fa 	bl	8003388 <HAL_RCC_OscConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	bf14      	ite	ne
 800119a:	2301      	movne	r3, #1
 800119c:	2300      	moveq	r3, #0
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80011a4:	f000 f980 	bl	80014a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80011a8:	230f      	movs	r3, #15
 80011aa:	603b      	str	r3, [r7, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011b8:	2300      	movs	r3, #0
 80011ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011bc:	463b      	mov	r3, r7
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 fcf5 	bl	8003bb0 <HAL_RCC_ClockConfig>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf14      	ite	ne
 80011cc:	2301      	movne	r3, #1
 80011ce:	2300      	moveq	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 80011d6:	f000 f967 	bl	80014a8 <Error_Handler>
  }
}
 80011da:	bf00      	nop
 80011dc:	3758      	adds	r7, #88	; 0x58
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000

080011e8 <_ZL12MX_I2C3_Initv>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011ec:	4b23      	ldr	r3, [pc, #140]	; (800127c <_ZL12MX_I2C3_Initv+0x94>)
 80011ee:	4a24      	ldr	r2, [pc, #144]	; (8001280 <_ZL12MX_I2C3_Initv+0x98>)
 80011f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000103;
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <_ZL12MX_I2C3_Initv+0x94>)
 80011f4:	f240 1203 	movw	r2, #259	; 0x103
 80011f8:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <_ZL12MX_I2C3_Initv+0x94>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <_ZL12MX_I2C3_Initv+0x94>)
 8001202:	2201      	movs	r2, #1
 8001204:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <_ZL12MX_I2C3_Initv+0x94>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <_ZL12MX_I2C3_Initv+0x94>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <_ZL12MX_I2C3_Initv+0x94>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <_ZL12MX_I2C3_Initv+0x94>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121e:	4b17      	ldr	r3, [pc, #92]	; (800127c <_ZL12MX_I2C3_Initv+0x94>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001224:	4815      	ldr	r0, [pc, #84]	; (800127c <_ZL12MX_I2C3_Initv+0x94>)
 8001226:	f001 fe6c 	bl	8002f02 <HAL_I2C_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	bf14      	ite	ne
 8001230:	2301      	movne	r3, #1
 8001232:	2300      	moveq	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 800123a:	f000 f935 	bl	80014a8 <Error_Handler>
  }

  /** Configure Analogue filter
   */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800123e:	2100      	movs	r1, #0
 8001240:	480e      	ldr	r0, [pc, #56]	; (800127c <_ZL12MX_I2C3_Initv+0x94>)
 8001242:	f001 fef9 	bl	8003038 <HAL_I2CEx_ConfigAnalogFilter>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	bf14      	ite	ne
 800124c:	2301      	movne	r3, #1
 800124e:	2300      	moveq	r3, #0
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <_ZL12MX_I2C3_Initv+0x72>
  {
    Error_Handler();
 8001256:	f000 f927 	bl	80014a8 <Error_Handler>
  }

  /** Configure Digital filter
   */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800125a:	2100      	movs	r1, #0
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <_ZL12MX_I2C3_Initv+0x94>)
 800125e:	f001 ff36 	bl	80030ce <HAL_I2CEx_ConfigDigitalFilter>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <_ZL12MX_I2C3_Initv+0x8e>
  {
    Error_Handler();
 8001272:	f000 f919 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000160 	.word	0x20000160
 8001280:	40005c00 	.word	0x40005c00

08001284 <_ZL11MX_RTC_Initv>:
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
   */
  hrtc.Instance = RTC;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <_ZL11MX_RTC_Initv+0x54>)
 800128a:	4a14      	ldr	r2, [pc, #80]	; (80012dc <_ZL11MX_RTC_Initv+0x58>)
 800128c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <_ZL11MX_RTC_Initv+0x54>)
 8001290:	2200      	movs	r2, #0
 8001292:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001294:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <_ZL11MX_RTC_Initv+0x54>)
 8001296:	227f      	movs	r2, #127	; 0x7f
 8001298:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <_ZL11MX_RTC_Initv+0x54>)
 800129c:	22ff      	movs	r2, #255	; 0xff
 800129e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <_ZL11MX_RTC_Initv+0x54>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <_ZL11MX_RTC_Initv+0x54>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <_ZL11MX_RTC_Initv+0x54>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <_ZL11MX_RTC_Initv+0x54>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012b8:	4807      	ldr	r0, [pc, #28]	; (80012d8 <_ZL11MX_RTC_Initv+0x54>)
 80012ba:	f003 f96f 	bl	800459c <HAL_RTC_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	bf14      	ite	ne
 80012c4:	2301      	movne	r3, #1
 80012c6:	2300      	moveq	r3, #0
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <_ZL11MX_RTC_Initv+0x4e>
  {
    Error_Handler();
 80012ce:	f000 f8eb 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200001b4 	.word	0x200001b4
 80012dc:	40002800 	.word	0x40002800

080012e0 <_ZL12MX_TIM6_Initv>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012f0:	4b19      	ldr	r3, [pc, #100]	; (8001358 <_ZL12MX_TIM6_Initv+0x78>)
 80012f2:	4a1a      	ldr	r2, [pc, #104]	; (800135c <_ZL12MX_TIM6_Initv+0x7c>)
 80012f4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7;
 80012f6:	4b18      	ldr	r3, [pc, #96]	; (8001358 <_ZL12MX_TIM6_Initv+0x78>)
 80012f8:	2207      	movs	r2, #7
 80012fa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012fc:	4b16      	ldr	r3, [pc, #88]	; (8001358 <_ZL12MX_TIM6_Initv+0x78>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1023;
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <_ZL12MX_TIM6_Initv+0x78>)
 8001304:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001308:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <_ZL12MX_TIM6_Initv+0x78>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001310:	4811      	ldr	r0, [pc, #68]	; (8001358 <_ZL12MX_TIM6_Initv+0x78>)
 8001312:	f003 fbe1 	bl	8004ad8 <HAL_TIM_Base_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	bf14      	ite	ne
 800131c:	2301      	movne	r3, #1
 800131e:	2300      	moveq	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8001326:	f000 f8bf 	bl	80014a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	4619      	mov	r1, r3
 8001336:	4808      	ldr	r0, [pc, #32]	; (8001358 <_ZL12MX_TIM6_Initv+0x78>)
 8001338:	f003 fe38 	bl	8004fac <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	bf14      	ite	ne
 8001342:	2301      	movne	r3, #1
 8001344:	2300      	moveq	r3, #0
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800134c:	f000 f8ac 	bl	80014a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */
}
 8001350:	bf00      	nop
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200001d8 	.word	0x200001d8
 800135c:	40001000 	.word	0x40001000

08001360 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	4b4a      	ldr	r3, [pc, #296]	; (80014a0 <_ZL12MX_GPIO_Initv+0x140>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <_ZL12MX_GPIO_Initv+0x140>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001382:	4b47      	ldr	r3, [pc, #284]	; (80014a0 <_ZL12MX_GPIO_Initv+0x140>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b44      	ldr	r3, [pc, #272]	; (80014a0 <_ZL12MX_GPIO_Initv+0x140>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a43      	ldr	r2, [pc, #268]	; (80014a0 <_ZL12MX_GPIO_Initv+0x140>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b41      	ldr	r3, [pc, #260]	; (80014a0 <_ZL12MX_GPIO_Initv+0x140>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	4b3e      	ldr	r3, [pc, #248]	; (80014a0 <_ZL12MX_GPIO_Initv+0x140>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a3d      	ldr	r2, [pc, #244]	; (80014a0 <_ZL12MX_GPIO_Initv+0x140>)
 80013ac:	f043 0302 	orr.w	r3, r3, #2
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <_ZL12MX_GPIO_Initv+0x140>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	603b      	str	r3, [r7, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin | LED4_Pin | LED11_Pin | LED7_Pin | LED6_Pin | LED8_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f641 7110 	movw	r1, #7952	; 0x1f10
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c8:	f001 fd60 	bl	8002e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin | LED10_Pin | LED9_Pin | LED5_Pin | LED1_Pin, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	f44f 519b 	mov.w	r1, #4960	; 0x1360
 80013d2:	4834      	ldr	r0, [pc, #208]	; (80014a4 <_ZL12MX_GPIO_Initv+0x144>)
 80013d4:	f001 fd5a 	bl	8002e8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SW3_Pin */
  GPIO_InitStruct.Pin = SW3_Pin;
 80013d8:	2308      	movs	r3, #8
 80013da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SW3_GPIO_Port, &GPIO_InitStruct);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f001 fbba 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED4_Pin LED11_Pin LED7_Pin
                           LED6_Pin LED8_Pin */
  GPIO_InitStruct.Pin = LED2_Pin | LED4_Pin | LED11_Pin | LED7_Pin | LED6_Pin | LED8_Pin;
 80013f4:	f641 7310 	movw	r3, #7952	; 0x1f10
 80013f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	2301      	movs	r3, #1
 80013fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001402:	2300      	movs	r3, #0
 8001404:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001406:	f107 030c 	add.w	r3, r7, #12
 800140a:	4619      	mov	r1, r3
 800140c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001410:	f001 fbaa 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001414:	2301      	movs	r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4619      	mov	r1, r3
 8001426:	481f      	ldr	r0, [pc, #124]	; (80014a4 <_ZL12MX_GPIO_Initv+0x144>)
 8001428:	f001 fb9e 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED10_Pin LED9_Pin LED5_Pin
                           LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin | LED10_Pin | LED9_Pin | LED5_Pin | LED1_Pin;
 800142c:	f44f 539b 	mov.w	r3, #4960	; 0x1360
 8001430:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800143e:	f107 030c 	add.w	r3, r7, #12
 8001442:	4619      	mov	r1, r3
 8001444:	4817      	ldr	r0, [pc, #92]	; (80014a4 <_ZL12MX_GPIO_Initv+0x144>)
 8001446:	f001 fb8f 	bl	8002b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin */
  GPIO_InitStruct.Pin = SW1_Pin | SW2_Pin;
 800144a:	f248 0380 	movw	r3, #32896	; 0x8080
 800144e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001450:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001454:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 030c 	add.w	r3, r7, #12
 800145e:	4619      	mov	r1, r3
 8001460:	4810      	ldr	r0, [pc, #64]	; (80014a4 <_ZL12MX_GPIO_Initv+0x144>)
 8001462:	f001 fb81 	bl	8002b68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	2009      	movs	r0, #9
 800146c:	f001 fb45 	bl	8002afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001470:	2009      	movs	r0, #9
 8001472:	f001 fb5e 	bl	8002b32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	2017      	movs	r0, #23
 800147c:	f001 fb3d 	bl	8002afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001480:	2017      	movs	r0, #23
 8001482:	f001 fb56 	bl	8002b32 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	2028      	movs	r0, #40	; 0x28
 800148c:	f001 fb35 	bl	8002afa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001490:	2028      	movs	r0, #40	; 0x28
 8001492:	f001 fb4e 	bl	8002b32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001496:	bf00      	nop
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	48000400 	.word	0x48000400

080014a8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014ac:	b672      	cpsid	i
}
 80014ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <Error_Handler+0x8>

080014b2 <_ZNSt5tupleIJP8InputPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	f000 f9d7 	bl	8001870 <_ZNSt11_Tuple_implILj0EJP8InputPinSt14default_deleteIS0_EEEC1Ev>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4618      	mov	r0, r3
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff ffeb 	bl	80014b2 <_ZNSt5tupleIJP8InputPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <_ZNSt15__uniq_ptr_dataI8InputPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ffeb 	bl	80014cc <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EEC1Ev>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	: _M_t()
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ffe8 	bl	80014e6 <_ZNSt15__uniq_ptr_dataI8InputPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4618      	mov	r0, r3
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <_ZNSt5tupleIJP17RTC_HandleTypeDefSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>:
	tuple()
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
	: _Inherited() { }
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f9b0 	bl	8001890 <_ZNSt11_Tuple_implILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEEC1Ev>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1Ev>:
      __uniq_ptr_impl() = default;
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ffeb 	bl	8001520 <_ZNSt5tupleIJP17RTC_HandleTypeDefSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4618      	mov	r0, r3
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <_ZNSt15__uniq_ptr_dataI17RTC_HandleTypeDefSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ffeb 	bl	800153a <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1Ev>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1IS2_vEEv>:
	constexpr unique_ptr() noexcept
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
	: _M_t()
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ffe8 	bl	8001554 <_ZNSt15__uniq_ptr_dataI17RTC_HandleTypeDefSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEv>
	{ }
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4618      	mov	r0, r3
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <_ZN6AppArgC1Ev>:


  std::unique_ptr<RTC_HandleTypeDef> hrtc;

  
}AppArg;
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ffb1 	bl	8001500 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEC1IS2_vEEv>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	3304      	adds	r3, #4
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff ffac 	bl	8001500 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEC1IS2_vEEv>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3308      	adds	r3, #8
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ffa7 	bl	8001500 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEC1IS2_vEEv>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	330c      	adds	r3, #12
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7ff ffd9 	bl	800156e <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1IS2_vEEv>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <_ZSt11make_uniqueI6AppArgJEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
  /// @endcond

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
 80015c6:	b590      	push	{r4, r7, lr}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 80015ce:	2010      	movs	r0, #16
 80015d0:	f003 fd72 	bl	80050b8 <_Znwj>
 80015d4:	4603      	mov	r3, r0
 80015d6:	461c      	mov	r4, r3
 80015d8:	4622      	mov	r2, r4
 80015da:	2300      	movs	r3, #0
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	6053      	str	r3, [r2, #4]
 80015e0:	6093      	str	r3, [r2, #8]
 80015e2:	60d3      	str	r3, [r2, #12]
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff ffd2 	bl	800158e <_ZN6AppArgC1Ev>
 80015ea:	4621      	mov	r1, r4
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f000 f96f 	bl	80018d0 <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd90      	pop	{r4, r7, pc}

080015fa <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80015fa:	b590      	push	{r4, r7, lr}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f972 	bl	80018ee <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 800160a:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d00c      	beq.n	800162e <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f977 	bl	8001908 <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EE11get_deleterEv>
 800161a:	4604      	mov	r4, r0
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 f980 	bl	8001922 <_ZSt4moveIRP6AppArgEONSt16remove_referenceIT_E4typeEOS4_>
 8001622:	4603      	mov	r3, r0
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	4620      	mov	r0, r4
 800162a:	f000 f9a1 	bl	8001970 <_ZNKSt14default_deleteI6AppArgEclEPS0_>
	__ptr = pointer();
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
      }
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	bd90      	pop	{r4, r7, pc}

0800163e <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8001648:	6838      	ldr	r0, [r7, #0]
 800164a:	f000 f9c4 	bl	80019d6 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE7releaseEv>
 800164e:	4603      	mov	r3, r0
 8001650:	4619      	mov	r1, r3
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f99f 	bl	8001996 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8001658:	6838      	ldr	r0, [r7, #0]
 800165a:	f000 f9d1 	bl	8001a00 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE10_M_deleterEv>
 800165e:	4603      	mov	r3, r0
 8001660:	4618      	mov	r0, r3
 8001662:	f000 f9da 	bl	8001a1a <_ZSt7forwardISt14default_deleteI6AppArgEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f9ca 	bl	8001a00 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800166c:	687b      	ldr	r3, [r7, #4]
      }
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
	return get();
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f8c9 	bl	8001816 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EE3getEv>
 8001684:	4603      	mov	r3, r0
      }
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <_ZSt11make_uniqueI8InputPinJP12GPIO_TypeDeftbEENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 800168e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	603b      	str	r3, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	f000 f9c6 	bl	8001a30 <_ZSt7forwardIP12GPIO_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80016a4:	4603      	mov	r3, r0
 80016a6:	681c      	ldr	r4, [r3, #0]
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f000 f9cc 	bl	8001a46 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 80016ae:	4603      	mov	r3, r0
 80016b0:	881d      	ldrh	r5, [r3, #0]
 80016b2:	6838      	ldr	r0, [r7, #0]
 80016b4:	f000 f9d2 	bl	8001a5c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>
 80016b8:	4603      	mov	r3, r0
 80016ba:	781e      	ldrb	r6, [r3, #0]
 80016bc:	2014      	movs	r0, #20
 80016be:	f003 fcfb 	bl	80050b8 <_Znwj>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4698      	mov	r8, r3
 80016c6:	4633      	mov	r3, r6
 80016c8:	462a      	mov	r2, r5
 80016ca:	4621      	mov	r1, r4
 80016cc:	4640      	mov	r0, r8
 80016ce:	f7ff f832 	bl	8000736 <_ZN8InputPinC1EP12GPIO_TypeDeftb>
 80016d2:	4641      	mov	r1, r8
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f000 f9dc 	bl	8001a92 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 80016da:	68f8      	ldr	r0, [r7, #12]
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080016e4 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f9de 	bl	8001ab0 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 80016f4:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d00c      	beq.n	8001718 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f9e3 	bl	8001aca <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EE11get_deleterEv>
 8001704:	4604      	mov	r4, r0
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f000 f9ec 	bl	8001ae4 <_ZSt4moveIRP8InputPinEONSt16remove_referenceIT_E4typeEOS4_>
 800170c:	4603      	mov	r3, r0
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	4620      	mov	r0, r4
 8001714:	f000 f9f1 	bl	8001afa <_ZNKSt14default_deleteI8InputPinEclEPS0_>
	__ptr = pointer();
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
      }
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}

08001728 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 8001732:	6838      	ldr	r0, [r7, #0]
 8001734:	f000 fa11 	bl	8001b5a <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE7releaseEv>
 8001738:	4603      	mov	r3, r0
 800173a:	4619      	mov	r1, r3
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f9ec 	bl	8001b1a <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 8001742:	6838      	ldr	r0, [r7, #0]
 8001744:	f000 fa1e 	bl	8001b84 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE10_M_deleterEv>
 8001748:	4603      	mov	r3, r0
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fa27 	bl	8001b9e <_ZSt7forwardISt14default_deleteI8InputPinEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f000 fa17 	bl	8001b84 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 8001756:	687b      	ldr	r3, [r7, #4]
      }
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_ZSt11make_uniqueI17RTC_HandleTypeDefJRS0_EENSt9_MakeUniqIT_E15__single_objectEDpOT0_>:
    make_unique(_Args&&... __args)
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
 800176a:	6838      	ldr	r0, [r7, #0]
 800176c:	f000 fa22 	bl	8001bb4 <_ZSt7forwardIR17RTC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8001770:	4605      	mov	r5, r0
 8001772:	2024      	movs	r0, #36	; 0x24
 8001774:	f003 fca0 	bl	80050b8 <_Znwj>
 8001778:	4603      	mov	r3, r0
 800177a:	461e      	mov	r6, r3
 800177c:	4634      	mov	r4, r6
 800177e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001782:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001786:	682b      	ldr	r3, [r5, #0]
 8001788:	6023      	str	r3, [r4, #0]
 800178a:	4631      	mov	r1, r6
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 fa2c 	bl	8001bea <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1IS2_vEEPS0_>
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800179a <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EED1Ev>:
      ~unique_ptr() noexcept
 800179a:	b590      	push	{r4, r7, lr}
 800179c:	b085      	sub	sp, #20
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
	auto& __ptr = _M_t._M_ptr();
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fa2f 	bl	8001c08 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 80017aa:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00c      	beq.n	80017ce <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EED1Ev+0x34>
	  get_deleter()(std::move(__ptr));
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fa34 	bl	8001c22 <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE11get_deleterEv>
 80017ba:	4604      	mov	r4, r0
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f000 fa3d 	bl	8001c3c <_ZSt4moveIRP17RTC_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 80017c2:	4603      	mov	r3, r0
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4619      	mov	r1, r3
 80017c8:	4620      	mov	r0, r4
 80017ca:	f000 fa42 	bl	8001c52 <_ZNKSt14default_deleteI17RTC_HandleTypeDefEclEPS0_>
	__ptr = pointer();
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
      }
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}

080017de <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EEaSEOS3_>:
      __uniq_ptr_impl& operator=(__uniq_ptr_impl&& __u) noexcept
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	6039      	str	r1, [r7, #0]
	reset(__u.release());
 80017e8:	6838      	ldr	r0, [r7, #0]
 80017ea:	f000 fa62 	bl	8001cb2 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE7releaseEv>
 80017ee:	4603      	mov	r3, r0
 80017f0:	4619      	mov	r1, r3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fa3d 	bl	8001c72 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE5resetEPS0_>
	_M_deleter() = std::forward<_Dp>(__u._M_deleter());
 80017f8:	6838      	ldr	r0, [r7, #0]
 80017fa:	f000 fa6f 	bl	8001cdc <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE10_M_deleterEv>
 80017fe:	4603      	mov	r3, r0
 8001800:	4618      	mov	r0, r3
 8001802:	f000 fa78 	bl	8001cf6 <_ZSt7forwardISt14default_deleteI17RTC_HandleTypeDefEEOT_RNSt16remove_referenceIS3_E4typeE>
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 fa68 	bl	8001cdc <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE10_M_deleterEv>
	return *this;
 800180c:	687b      	ldr	r3, [r7, #4]
      }
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <_ZNKSt10unique_ptrI6AppArgSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 fa9e 	bl	8001d62 <_ZNKSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 8001826:	4603      	mov	r3, r0
 8001828:	4618      	mov	r0, r3
 800182a:	3708      	adds	r7, #8
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_ZNSt10unique_ptrI11ApplicationSt14default_deleteIS0_EE5resetEPS0_>:
      reset(pointer __p = pointer()) noexcept
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	_M_t.reset(std::move(__p));
 800183a:	687c      	ldr	r4, [r7, #4]
 800183c:	463b      	mov	r3, r7
 800183e:	4618      	mov	r0, r3
 8001840:	f000 fa71 	bl	8001d26 <_ZSt4moveIRP11ApplicationEONSt16remove_referenceIT_E4typeEOS4_>
 8001844:	4603      	mov	r3, r0
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4619      	mov	r1, r3
 800184a:	4620      	mov	r0, r4
 800184c:	f000 fa97 	bl	8001d7e <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE5resetEPS0_>
      }
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}

08001858 <_ZNKSt10unique_ptrI11ApplicationSt14default_deleteIS0_EEptEv>:
      operator->() const noexcept
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	return get();
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 faac 	bl	8001dbe <_ZNKSt10unique_ptrI11ApplicationSt14default_deleteIS0_EE3getEv>
 8001866:	4603      	mov	r3, r0
      }
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <_ZNSt11_Tuple_implILj0EJP8InputPinSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f000 faad 	bl	8001dd8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8InputPinEEEC1Ev>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4618      	mov	r0, r3
 8001882:	f000 fab5 	bl	8001df0 <_ZNSt10_Head_baseILj0EP8InputPinLb0EEC1Ev>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4618      	mov	r0, r3
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <_ZNSt11_Tuple_implILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEEC1Ev>:
      constexpr _Tuple_impl()
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
      : _Inherited(), _Base() { }
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 fab7 	bl	8001e0c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17RTC_HandleTypeDefEEEC1Ev>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 fabf 	bl	8001e24 <_ZNSt10_Head_baseILj0EP17RTC_HandleTypeDefLb0EEC1Ev>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZNSt15__uniq_ptr_dataI6AppArgSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f000 fabd 	bl	8001e40 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EEC1EPS0_>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6839      	ldr	r1, [r7, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ffe6 	bl	80018b0 <_ZNSt15__uniq_ptr_dataI6AppArgSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4618      	mov	r0, r3
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fab5 	bl	8001e68 <_ZSt3getILj0EJP6AppArgSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 80018fe:	4603      	mov	r3, r0
 8001900:	4618      	mov	r0, r3
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4618      	mov	r0, r3
 8001914:	f000 f874 	bl	8001a00 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE10_M_deleterEv>
 8001918:	4603      	mov	r3, r0
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_ZSt4moveIRP6AppArgEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001922:	b480      	push	{r7}
 8001924:	b083      	sub	sp, #12
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_ZN6AppArgD1Ev>:
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	330c      	adds	r3, #12
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff28 	bl	800179a <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EED1Ev>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3308      	adds	r3, #8
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fec8 	bl	80016e4 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3304      	adds	r3, #4
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fec3 	bl	80016e4 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff febf 	bl	80016e4 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EED1Ev>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <_ZNKSt14default_deleteI6AppArgEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
	delete __ptr;
 800197a:	683c      	ldr	r4, [r7, #0]
 800197c:	2c00      	cmp	r4, #0
 800197e:	d006      	beq.n	800198e <_ZNKSt14default_deleteI6AppArgEclEPS0_+0x1e>
 8001980:	4620      	mov	r0, r4
 8001982:	f7ff ffd9 	bl	8001938 <_ZN6AppArgD1Ev>
 8001986:	2110      	movs	r1, #16
 8001988:	4620      	mov	r0, r4
 800198a:	f003 fb93 	bl	80050b4 <_ZdlPvj>
      }
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bd90      	pop	{r4, r7, pc}

08001996 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8001996:	b580      	push	{r7, lr}
 8001998:	b084      	sub	sp, #16
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7ff ffa4 	bl	80018ee <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 80019a6:	4603      	mov	r3, r0
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff9e 	bl	80018ee <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 80019b2:	4602      	mov	r2, r0
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6013      	str	r3, [r2, #0]
	if (__old_p)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d007      	beq.n	80019ce <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f000 f81e 	bl	8001a00 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE10_M_deleterEv>
 80019c4:	4603      	mov	r3, r0
 80019c6:	68f9      	ldr	r1, [r7, #12]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ffd1 	bl	8001970 <_ZNKSt14default_deleteI6AppArgEclEPS0_>
      }
 80019ce:	bf00      	nop
 80019d0:	3710      	adds	r7, #16
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b084      	sub	sp, #16
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff ff85 	bl	80018ee <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 80019e4:	4603      	mov	r3, r0
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff ff7f 	bl	80018ee <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
	return __p;
 80019f6:	68fb      	ldr	r3, [r7, #12]
      }
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fa39 	bl	8001e82 <_ZSt3getILj1EJP6AppArgSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <_ZSt7forwardISt14default_deleteI6AppArgEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <_ZSt7forwardIP12GPIO_TypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_ZSt7forwardIbEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4618      	mov	r0, r3
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <_ZNSt15__uniq_ptr_dataI8InputPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	683a      	ldr	r2, [r7, #0]
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fa09 	bl	8001e9a <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EEC1EPS0_>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6839      	ldr	r1, [r7, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ffe6 	bl	8001a72 <_ZNSt15__uniq_ptr_dataI8InputPinSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fa01 	bl	8001ec2 <_ZSt3getILj0EJP8InputPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}

08001aca <_ZNSt10unique_ptrI8InputPinSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 f855 	bl	8001b84 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE10_M_deleterEv>
 8001ada:	4603      	mov	r3, r0
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_ZSt4moveIRP8InputPinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_ZNKSt14default_deleteI8InputPinEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <_ZNKSt14default_deleteI8InputPinEclEPS0_+0x18>
 8001b0a:	2114      	movs	r1, #20
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 fad1 	bl	80050b4 <_ZdlPvj>
      }
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ffc3 	bl	8001ab0 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ffbd 	bl	8001ab0 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 8001b36:	4602      	mov	r2, r0
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f81e 	bl	8001b84 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE10_M_deleterEv>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	68f9      	ldr	r1, [r7, #12]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ffd4 	bl	8001afa <_ZNKSt14default_deleteI8InputPinEclEPS0_>
      }
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b084      	sub	sp, #16
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7ff ffa4 	bl	8001ab0 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff ff9e 	bl	8001ab0 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
	return __p;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
      }
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f000 f9a4 	bl	8001edc <_ZSt3getILj1EJP8InputPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <_ZSt7forwardISt14default_deleteI8InputPinEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_ZSt7forwardIR17RTC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <_ZNSt15__uniq_ptr_dataI17RTC_HandleTypeDefSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>:
      using __uniq_ptr_impl<_Tp, _Dp>::__uniq_ptr_impl;
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	4611      	mov	r1, r2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f98a 	bl	8001ef4 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1EPS0_>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1IS2_vEEPS0_>:
	unique_ptr(pointer __p) noexcept
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	6039      	str	r1, [r7, #0]
	: _M_t(__p)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ffe6 	bl	8001bca <_ZNSt15__uniq_ptr_dataI17RTC_HandleTypeDefSt14default_deleteIS0_ELb1ELb1EECI1St15__uniq_ptr_implIS0_S2_EEPS0_>
        { }
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f982 	bl	8001f1c <_ZSt3getILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_ZNSt10unique_ptrI17RTC_HandleTypeDefSt14default_deleteIS0_EE11get_deleterEv>:
      get_deleter() noexcept
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f855 	bl	8001cdc <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE10_M_deleterEv>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <_ZSt4moveIRP17RTC_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <_ZNKSt14default_deleteI17RTC_HandleTypeDefEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <_ZNKSt14default_deleteI17RTC_HandleTypeDefEclEPS0_+0x18>
 8001c62:	2124      	movs	r1, #36	; 0x24
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fa25 	bl	80050b4 <_ZdlPvj>
      }
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b084      	sub	sp, #16
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ffc3 	bl	8001c08 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 8001c82:	4603      	mov	r3, r0
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ffbd 	bl	8001c08 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f81e 	bl	8001cdc <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE10_M_deleterEv>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	68f9      	ldr	r1, [r7, #12]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ffd4 	bl	8001c52 <_ZNKSt14default_deleteI17RTC_HandleTypeDefEclEPS0_>
      }
 8001caa:	bf00      	nop
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE7releaseEv>:
      pointer release() noexcept
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b084      	sub	sp, #16
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
	pointer __p = _M_ptr();
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa4 	bl	8001c08 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
	_M_ptr() = nullptr;
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ff9e 	bl	8001c08 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
	return __p;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
      }
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f925 	bl	8001f36 <_ZSt3getILj1EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001cec:	4603      	mov	r3, r0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <_ZSt7forwardISt14default_deleteI17RTC_HandleTypeDefEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f919 	bl	8001f4e <_ZSt3getILj0EJP11ApplicationSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZSt4moveIRP11ApplicationEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4618      	mov	r0, r3
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <_ZNKSt14default_deleteI11ApplicationEclEPS0_>:
      operator()(_Tp* __ptr) const
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
	delete __ptr;
 8001d46:	683c      	ldr	r4, [r7, #0]
 8001d48:	2c00      	cmp	r4, #0
 8001d4a:	d006      	beq.n	8001d5a <_ZNKSt14default_deleteI11ApplicationEclEPS0_+0x1e>
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7fe fcd7 	bl	8000700 <_ZN11ApplicationD1Ev>
 8001d52:	2104      	movs	r1, #4
 8001d54:	4620      	mov	r0, r4
 8001d56:	f003 f9ad 	bl	80050b4 <_ZdlPvj>
      }
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}

08001d62 <_ZNKSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f908 	bl	8001f82 <_ZSt3getILj0EJP6AppArgSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8001d72:	4603      	mov	r3, r0
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE5resetEPS0_>:
      void reset(pointer __p) noexcept
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b084      	sub	sp, #16
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
	const pointer __old_p = _M_ptr();
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ffbf 	bl	8001d0c <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE6_M_ptrEv>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	60fb      	str	r3, [r7, #12]
	_M_ptr() = __p;
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ffb9 	bl	8001d0c <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE6_M_ptrEv>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	6013      	str	r3, [r2, #0]
	if (__old_p)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d007      	beq.n	8001db6 <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE5resetEPS0_+0x38>
	  _M_deleter()(__old_p);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8de 	bl	8001f68 <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE10_M_deleterEv>
 8001dac:	4603      	mov	r3, r0
 8001dae:	68f9      	ldr	r1, [r7, #12]
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7ff ffc3 	bl	8001d3c <_ZNKSt14default_deleteI11ApplicationEclEPS0_>
      }
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <_ZNKSt10unique_ptrI11ApplicationSt14default_deleteIS0_EE3getEv>:
      get() const noexcept
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b082      	sub	sp, #8
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 f8e7 	bl	8001f9c <_ZNKSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE6_M_ptrEv>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8InputPinEEEC1Ev>:
      _Tuple_impl()
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f8e9 	bl	8001fb8 <_ZNSt10_Head_baseILj1ESt14default_deleteI8InputPinELb1EEC1Ev>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <_ZNSt10_Head_baseILj0EP8InputPinLb0EEC1Ev>:
      constexpr _Head_base()
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4618      	mov	r0, r3
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17RTC_HandleTypeDefEEEC1Ev>:
      _Tuple_impl()
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
      : _Base() { }
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8da 	bl	8001fce <_ZNSt10_Head_baseILj1ESt14default_deleteI17RTC_HandleTypeDefELb1EEC1Ev>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_ZNSt10_Head_baseILj0EP17RTC_HandleTypeDefLb0EEC1Ev>:
      constexpr _Head_base()
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4618      	mov	r0, r3
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EEC1EPS0_>:
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe feef 	bl	8000c30 <_ZNSt5tupleIJP6AppArgSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff fd4b 	bl	80018ee <_ZNSt15__uniq_ptr_implI6AppArgSt14default_deleteIS0_EE6_M_ptrEv>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	6013      	str	r3, [r2, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4618      	mov	r0, r3
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_ZSt3getILj0EJP6AppArgSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f8b6 	bl	8001fe4 <_ZSt12__get_helperILj0EP6AppArgJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_ZSt3getILj1EJP6AppArgSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8b6 	bl	8001ffc <_ZSt12__get_helperILj1ESt14default_deleteI6AppArgEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001e90:	4603      	mov	r3, r0
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EEC1EPS0_>:
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fb03 	bl	80014b2 <_ZNSt5tupleIJP8InputPinSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff fdff 	bl	8001ab0 <_ZNSt15__uniq_ptr_implI8InputPinSt14default_deleteIS0_EE6_M_ptrEv>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_ZSt3getILj0EJP8InputPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f8a1 	bl	8002014 <_ZSt12__get_helperILj0EP8InputPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZSt3getILj1EJP8InputPinSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f8a1 	bl	800202c <_ZSt12__get_helperILj1ESt14default_deleteI8InputPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EEC1EPS0_>:
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fb0d 	bl	8001520 <_ZNSt5tupleIJP17RTC_HandleTypeDefSt14default_deleteIS0_EEEC1ILb1ELb1EEEv>
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fe7e 	bl	8001c08 <_ZNSt15__uniq_ptr_implI17RTC_HandleTypeDefSt14default_deleteIS0_EE6_M_ptrEv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <_ZSt3getILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f88c 	bl	8002044 <_ZSt12__get_helperILj0EP17RTC_HandleTypeDefJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_ZSt3getILj1EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f88c 	bl	800205c <_ZSt12__get_helperILj1ESt14default_deleteI17RTC_HandleTypeDefEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4618      	mov	r0, r3
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_ZSt3getILj0EJP11ApplicationSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 f88b 	bl	8002074 <_ZSt12__get_helperILj0EP11ApplicationJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <_ZNSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 f88a 	bl	800208c <_ZSt3getILj1EJP11ApplicationSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <_ZSt3getILj0EJP6AppArgSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b082      	sub	sp, #8
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 f889 	bl	80020a4 <_ZSt12__get_helperILj0EP6AppArgJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <_ZNKSt15__uniq_ptr_implI11ApplicationSt14default_deleteIS0_EE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f888 	bl	80020bc <_ZSt3getILj0EJP11ApplicationSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>
 8001fac:	4603      	mov	r3, r0
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <_ZNSt10_Head_baseILj1ESt14default_deleteI8InputPinELb1EEC1Ev>:
      constexpr _Head_base()
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <_ZNSt10_Head_baseILj1ESt14default_deleteI17RTC_HandleTypeDefELb1EEC1Ev>:
      constexpr _Head_base()
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
      : _M_head_impl() { }
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_ZSt12__get_helperILj0EP6AppArgJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f872 	bl	80020d6 <_ZNSt11_Tuple_implILj0EJP6AppArgSt14default_deleteIS0_EEE7_M_headERS4_>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_ZSt12__get_helperILj1ESt14default_deleteI6AppArgEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f873 	bl	80020f0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6AppArgEEE7_M_headERS3_>
 800200a:	4603      	mov	r3, r0
 800200c:	4618      	mov	r0, r3
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <_ZSt12__get_helperILj0EP8InputPinJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f873 	bl	8002108 <_ZNSt11_Tuple_implILj0EJP8InputPinSt14default_deleteIS0_EEE7_M_headERS4_>
 8002022:	4603      	mov	r3, r0
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_ZSt12__get_helperILj1ESt14default_deleteI8InputPinEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f874 	bl	8002122 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8InputPinEEE7_M_headERS3_>
 800203a:	4603      	mov	r3, r0
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <_ZSt12__get_helperILj0EP17RTC_HandleTypeDefJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f874 	bl	800213a <_ZNSt11_Tuple_implILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEE7_M_headERS4_>
 8002052:	4603      	mov	r3, r0
 8002054:	4618      	mov	r0, r3
 8002056:	3708      	adds	r7, #8
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_ZSt12__get_helperILj1ESt14default_deleteI17RTC_HandleTypeDefEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f875 	bl	8002154 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17RTC_HandleTypeDefEEE7_M_headERS3_>
 800206a:	4603      	mov	r3, r0
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_ZSt12__get_helperILj0EP11ApplicationJSt14default_deleteIS0_EEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f875 	bl	800216c <_ZNSt11_Tuple_implILj0EJP11ApplicationSt14default_deleteIS0_EEE7_M_headERS4_>
 8002082:	4603      	mov	r3, r0
 8002084:	4618      	mov	r0, r3
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <_ZSt3getILj1EJP11ApplicationSt14default_deleteIS0_EEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f876 	bl	8002186 <_ZSt12__get_helperILj1ESt14default_deleteI11ApplicationEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>
 800209a:	4603      	mov	r3, r0
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZSt12__get_helperILj0EP6AppArgJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f876 	bl	800219e <_ZNSt11_Tuple_implILj0EJP6AppArgSt14default_deleteIS0_EEE7_M_headERKS4_>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZSt3getILj0EJP11ApplicationSt14default_deleteIS0_EEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKS8_>:
    get(const tuple<_Elements...>& __t) noexcept
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 f876 	bl	80021b8 <_ZSt12__get_helperILj0EP11ApplicationJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <_ZNSt11_Tuple_implILj0EJP6AppArgSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 f875 	bl	80021d0 <_ZNSt10_Head_baseILj0EP6AppArgLb0EE7_M_headERS2_>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4618      	mov	r0, r3
 80020ea:	3708      	adds	r7, #8
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI6AppArgEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f874 	bl	80021e6 <_ZNSt10_Head_baseILj1ESt14default_deleteI6AppArgELb1EE7_M_headERS3_>
 80020fe:	4603      	mov	r3, r0
 8002100:	4618      	mov	r0, r3
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <_ZNSt11_Tuple_implILj0EJP8InputPinSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4618      	mov	r0, r3
 8002114:	f000 f872 	bl	80021fc <_ZNSt10_Head_baseILj0EP8InputPinLb0EE7_M_headERS2_>
 8002118:	4603      	mov	r3, r0
 800211a:	4618      	mov	r0, r3
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI8InputPinEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 f871 	bl	8002212 <_ZNSt10_Head_baseILj1ESt14default_deleteI8InputPinELb1EE7_M_headERS3_>
 8002130:	4603      	mov	r3, r0
 8002132:	4618      	mov	r0, r3
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_ZNSt11_Tuple_implILj0EJP17RTC_HandleTypeDefSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800213a:	b580      	push	{r7, lr}
 800213c:	b082      	sub	sp, #8
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	f000 f86f 	bl	8002228 <_ZNSt10_Head_baseILj0EP17RTC_HandleTypeDefLb0EE7_M_headERS2_>
 800214a:	4603      	mov	r3, r0
 800214c:	4618      	mov	r0, r3
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZNSt11_Tuple_implILj1EJSt14default_deleteI17RTC_HandleTypeDefEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 f86e 	bl	800223e <_ZNSt10_Head_baseILj1ESt14default_deleteI17RTC_HandleTypeDefELb1EE7_M_headERS3_>
 8002162:	4603      	mov	r3, r0
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_ZNSt11_Tuple_implILj0EJP11ApplicationSt14default_deleteIS0_EEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f86c 	bl	8002254 <_ZNSt10_Head_baseILj0EP11ApplicationLb0EE7_M_headERS2_>
 800217c:	4603      	mov	r3, r0
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <_ZSt12__get_helperILj1ESt14default_deleteI11ApplicationEJEERT0_RSt11_Tuple_implIXT_EJS3_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002186:	b580      	push	{r7, lr}
 8002188:	b082      	sub	sp, #8
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f86b 	bl	800226a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11ApplicationEEE7_M_headERS3_>
 8002194:	4603      	mov	r3, r0
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <_ZNSt11_Tuple_implILj0EJP6AppArgSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 f86a 	bl	8002282 <_ZNSt10_Head_baseILj0EP6AppArgLb0EE7_M_headERKS2_>
 80021ae:	4603      	mov	r3, r0
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <_ZSt12__get_helperILj0EP11ApplicationJSt14default_deleteIS0_EEERKT0_RKSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 f869 	bl	8002298 <_ZNSt11_Tuple_implILj0EJP11ApplicationSt14default_deleteIS0_EEE7_M_headERKS4_>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <_ZNSt10_Head_baseILj0EP6AppArgLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_ZNSt10_Head_baseILj1ESt14default_deleteI6AppArgELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_ZNSt10_Head_baseILj0EP8InputPinLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <_ZNSt10_Head_baseILj1ESt14default_deleteI8InputPinELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002212:	b480      	push	{r7}
 8002214:	b083      	sub	sp, #12
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <_ZNSt10_Head_baseILj0EP17RTC_HandleTypeDefLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4618      	mov	r0, r3
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <_ZNSt10_Head_baseILj1ESt14default_deleteI17RTC_HandleTypeDefELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <_ZNSt10_Head_baseILj0EP11ApplicationLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4618      	mov	r0, r3
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <_ZNSt11_Tuple_implILj1EJSt14default_deleteI11ApplicationEEE7_M_headERS3_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 f81d 	bl	80022b2 <_ZNSt10_Head_baseILj1ESt14default_deleteI11ApplicationELb1EE7_M_headERS3_>
 8002278:	4603      	mov	r3, r0
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <_ZNSt10_Head_baseILj0EP6AppArgLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8002282:	b480      	push	{r7}
 8002284:	b083      	sub	sp, #12
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4618      	mov	r0, r3
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_ZNSt11_Tuple_implILj0EJP11ApplicationSt14default_deleteIS0_EEE7_M_headERKS4_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 f810 	bl	80022c8 <_ZNSt10_Head_baseILj0EP11ApplicationLb0EE7_M_headERKS2_>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <_ZNSt10_Head_baseILj1ESt14default_deleteI11ApplicationELb1EE7_M_headERS3_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <_ZNSt10_Head_baseILj0EP11ApplicationLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
 80022e8:	6039      	str	r1, [r7, #0]
std::unique_ptr<AppArg> apparg;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d107      	bne.n	8002300 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d102      	bne.n	8002300 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80022fa:	4803      	ldr	r0, [pc, #12]	; (8002308 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80022fc:	f7ff f97d 	bl	80015fa <_ZNSt10unique_ptrI6AppArgSt14default_deleteIS0_EED1Ev>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000228 	.word	0x20000228

0800230c <_GLOBAL__sub_I_hi2c3>:
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
 8002310:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002314:	2001      	movs	r0, #1
 8002316:	f7ff ffe3 	bl	80022e0 <_Z41__static_initialization_and_destruction_0ii>
 800231a:	bd80      	pop	{r7, pc}

0800231c <_GLOBAL__sub_D_hi2c3>:
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
 8002320:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002324:	2000      	movs	r0, #0
 8002326:	f7ff ffdb 	bl	80022e0 <_Z41__static_initialization_and_destruction_0ii>
 800232a:	bd80      	pop	{r7, pc}

0800232c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8002332:	f107 0308 	add.w	r3, r7, #8
 8002336:	2200      	movs	r2, #0
 8002338:	601a      	str	r2, [r3, #0]
 800233a:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800233c:	4b13      	ldr	r3, [pc, #76]	; (800238c <HAL_MspInit+0x60>)
 800233e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002340:	4a12      	ldr	r2, [pc, #72]	; (800238c <HAL_MspInit+0x60>)
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	6613      	str	r3, [r2, #96]	; 0x60
 8002348:	4b10      	ldr	r3, [pc, #64]	; (800238c <HAL_MspInit+0x60>)
 800234a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234c:	f003 0301 	and.w	r3, r3, #1
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002354:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_MspInit+0x60>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_MspInit+0x60>)
 800235a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235e:	6593      	str	r3, [r2, #88]	; 0x58
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_MspInit+0x60>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8002374:	f107 0308 	add.w	r3, r7, #8
 8002378:	4618      	mov	r0, r3
 800237a:	f000 ff05 	bl	8003188 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800237e:	f000 ff63 	bl	8003248 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000

08002390 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b0a2      	sub	sp, #136	; 0x88
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023a8:	f107 0318 	add.w	r3, r7, #24
 80023ac:	225c      	movs	r2, #92	; 0x5c
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f003 f878 	bl	80054a6 <memset>
  if(hi2c->Instance==I2C3)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a2f      	ldr	r2, [pc, #188]	; (8002478 <HAL_I2C_MspInit+0xe8>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d157      	bne.n	8002470 <HAL_I2C_MspInit+0xe0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80023c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80023c6:	2300      	movs	r3, #0
 80023c8:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ca:	f107 0318 	add.w	r3, r7, #24
 80023ce:	4618      	mov	r0, r3
 80023d0:	f001 fdda 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80023da:	f7ff f865 	bl	80014a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023de:	4b27      	ldr	r3, [pc, #156]	; (800247c <HAL_I2C_MspInit+0xec>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	4a26      	ldr	r2, [pc, #152]	; (800247c <HAL_I2C_MspInit+0xec>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ea:	4b24      	ldr	r3, [pc, #144]	; (800247c <HAL_I2C_MspInit+0xec>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	617b      	str	r3, [r7, #20]
 80023f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	4b21      	ldr	r3, [pc, #132]	; (800247c <HAL_I2C_MspInit+0xec>)
 80023f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fa:	4a20      	ldr	r2, [pc, #128]	; (800247c <HAL_I2C_MspInit+0xec>)
 80023fc:	f043 0302 	orr.w	r3, r3, #2
 8002400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002402:	4b1e      	ldr	r3, [pc, #120]	; (800247c <HAL_I2C_MspInit+0xec>)
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	613b      	str	r3, [r7, #16]
 800240c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002412:	2312      	movs	r3, #18
 8002414:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002420:	2304      	movs	r3, #4
 8002422:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800242a:	4619      	mov	r1, r3
 800242c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002430:	f000 fb9a 	bl	8002b68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002434:	2310      	movs	r3, #16
 8002436:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002438:	2312      	movs	r3, #18
 800243a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002446:	2304      	movs	r3, #4
 8002448:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002450:	4619      	mov	r1, r3
 8002452:	480b      	ldr	r0, [pc, #44]	; (8002480 <HAL_I2C_MspInit+0xf0>)
 8002454:	f000 fb88 	bl	8002b68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_I2C_MspInit+0xec>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_I2C_MspInit+0xec>)
 800245e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002462:	6593      	str	r3, [r2, #88]	; 0x58
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_I2C_MspInit+0xec>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002470:	bf00      	nop
 8002472:	3788      	adds	r7, #136	; 0x88
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40005c00 	.word	0x40005c00
 800247c:	40021000 	.word	0x40021000
 8002480:	48000400 	.word	0x48000400

08002484 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b09a      	sub	sp, #104	; 0x68
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	225c      	movs	r2, #92	; 0x5c
 8002492:	2100      	movs	r1, #0
 8002494:	4618      	mov	r0, r3
 8002496:	f003 f806 	bl	80054a6 <memset>
  if(hrtc->Instance==RTC)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a0f      	ldr	r2, [pc, #60]	; (80024dc <HAL_RTC_MspInit+0x58>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d117      	bne.n	80024d4 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80024aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ae:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024b0:	f107 030c 	add.w	r3, r7, #12
 80024b4:	4618      	mov	r0, r3
 80024b6:	f001 fd67 	bl	8003f88 <HAL_RCCEx_PeriphCLKConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80024c0:	f7fe fff2 	bl	80014a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024c4:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_RTC_MspInit+0x5c>)
 80024c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ca:	4a05      	ldr	r2, [pc, #20]	; (80024e0 <HAL_RTC_MspInit+0x5c>)
 80024cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80024d4:	bf00      	nop
 80024d6:	3768      	adds	r7, #104	; 0x68
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40002800 	.word	0x40002800
 80024e0:	40021000 	.word	0x40021000

080024e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <HAL_TIM_Base_MspInit+0x44>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d113      	bne.n	800251e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80024f6:	4b0d      	ldr	r3, [pc, #52]	; (800252c <HAL_TIM_Base_MspInit+0x48>)
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fa:	4a0c      	ldr	r2, [pc, #48]	; (800252c <HAL_TIM_Base_MspInit+0x48>)
 80024fc:	f043 0310 	orr.w	r3, r3, #16
 8002500:	6593      	str	r3, [r2, #88]	; 0x58
 8002502:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_TIM_Base_MspInit+0x48>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800250e:	2200      	movs	r2, #0
 8002510:	2100      	movs	r1, #0
 8002512:	2036      	movs	r0, #54	; 0x36
 8002514:	f000 faf1 	bl	8002afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002518:	2036      	movs	r0, #54	; 0x36
 800251a:	f000 fb0a 	bl	8002b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40001000 	.word	0x40001000
 800252c:	40021000 	.word	0x40021000

08002530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <NMI_Handler+0x4>

08002536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253a:	e7fe      	b.n	800253a <HardFault_Handler+0x4>

0800253c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <MemManage_Handler+0x4>

08002542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <BusFault_Handler+0x4>

08002548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <UsageFault_Handler+0x4>

0800254e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257c:	f000 f99e 	bl	80028bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_Pin);
 8002588:	2008      	movs	r0, #8
 800258a:	f000 fc97 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  start_ms = HAL_GetTick();
 800258e:	f000 f9a9 	bl	80028e4 <HAL_GetTick>
 8002592:	4603      	mov	r3, r0
 8002594:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <EXTI3_IRQHandler+0x20>)
 8002596:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 8002598:	4803      	ldr	r0, [pc, #12]	; (80025a8 <EXTI3_IRQHandler+0x24>)
 800259a:	f002 faf5 	bl	8004b88 <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI3_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000224 	.word	0x20000224
 80025a8:	200001d8 	.word	0x200001d8

080025ac <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW2_Pin);
 80025b0:	2080      	movs	r0, #128	; 0x80
 80025b2:	f000 fc83 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  start_ms = HAL_GetTick();
 80025b6:	f000 f995 	bl	80028e4 <HAL_GetTick>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4a03      	ldr	r2, [pc, #12]	; (80025cc <EXTI9_5_IRQHandler+0x20>)
 80025be:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 80025c0:	4803      	ldr	r0, [pc, #12]	; (80025d0 <EXTI9_5_IRQHandler+0x24>)
 80025c2:	f002 fae1 	bl	8004b88 <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80025c6:	bf00      	nop
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000224 	.word	0x20000224
 80025d0:	200001d8 	.word	0x200001d8

080025d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_Pin);
 80025d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025dc:	f000 fc6e 	bl	8002ebc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  start_ms = HAL_GetTick();
 80025e0:	f000 f980 	bl	80028e4 <HAL_GetTick>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4a03      	ldr	r2, [pc, #12]	; (80025f4 <EXTI15_10_IRQHandler+0x20>)
 80025e8:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start_IT(&htim6);
 80025ea:	4803      	ldr	r0, [pc, #12]	; (80025f8 <EXTI15_10_IRQHandler+0x24>)
 80025ec:	f002 facc 	bl	8004b88 <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000224 	.word	0x20000224
 80025f8:	200001d8 	.word	0x200001d8

080025fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002600:	4802      	ldr	r0, [pc, #8]	; (800260c <TIM6_DAC_IRQHandler+0x10>)
 8002602:	f002 fb44 	bl	8004c8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	200001d8 	.word	0x200001d8

08002610 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  return 1;
 8002614:	2301      	movs	r3, #1
}
 8002616:	4618      	mov	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <_kill>:

int _kill(int pid, int sig)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800262a:	f002 ffdf 	bl	80055ec <__errno>
 800262e:	4603      	mov	r3, r0
 8002630:	2216      	movs	r2, #22
 8002632:	601a      	str	r2, [r3, #0]
  return -1;
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <_exit>:

void _exit (int status)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002648:	f04f 31ff 	mov.w	r1, #4294967295
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ffe7 	bl	8002620 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002652:	e7fe      	b.n	8002652 <_exit+0x12>

08002654 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	e00a      	b.n	800267c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002666:	f3af 8000 	nop.w
 800266a:	4601      	mov	r1, r0
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	60ba      	str	r2, [r7, #8]
 8002672:	b2ca      	uxtb	r2, r1
 8002674:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3301      	adds	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	dbf0      	blt.n	8002666 <_read+0x12>
  }

  return len;
 8002684:	687b      	ldr	r3, [r7, #4]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	60f8      	str	r0, [r7, #12]
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800269a:	2300      	movs	r3, #0
 800269c:	617b      	str	r3, [r7, #20]
 800269e:	e009      	b.n	80026b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	60ba      	str	r2, [r7, #8]
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3301      	adds	r3, #1
 80026b2:	617b      	str	r3, [r7, #20]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	dbf1      	blt.n	80026a0 <_write+0x12>
  }
  return len;
 80026bc:	687b      	ldr	r3, [r7, #4]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <_close>:

int _close(int file)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026de:	b480      	push	{r7}
 80026e0:	b083      	sub	sp, #12
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ee:	605a      	str	r2, [r3, #4]
  return 0;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr

080026fe <_isatty>:

int _isatty(int file)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002706:	2301      	movs	r3, #1
}
 8002708:	4618      	mov	r0, r3
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002738:	4a14      	ldr	r2, [pc, #80]	; (800278c <_sbrk+0x5c>)
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <_sbrk+0x60>)
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002744:	4b13      	ldr	r3, [pc, #76]	; (8002794 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <_sbrk+0x64>)
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <_sbrk+0x68>)
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	429a      	cmp	r2, r3
 800275e:	d207      	bcs.n	8002770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002760:	f002 ff44 	bl	80055ec <__errno>
 8002764:	4603      	mov	r3, r0
 8002766:	220c      	movs	r2, #12
 8002768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
 800276e:	e009      	b.n	8002784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <_sbrk+0x64>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <_sbrk+0x64>)
 8002780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002782:	68fb      	ldr	r3, [r7, #12]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20010000 	.word	0x20010000
 8002790:	00000400 	.word	0x00000400
 8002794:	20000230 	.word	0x20000230
 8002798:	20000388 	.word	0x20000388

0800279c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <SystemInit+0x20>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	4a05      	ldr	r2, [pc, #20]	; (80027bc <SystemInit+0x20>)
 80027a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027c4:	f7ff ffea 	bl	800279c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <LoopForever+0x6>)
  ldr r1, =_edata
 80027ca:	490d      	ldr	r1, [pc, #52]	; (8002800 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <LoopForever+0xe>)
  movs r3, #0
 80027ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027d0:	e002      	b.n	80027d8 <LoopCopyDataInit>

080027d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027d6:	3304      	adds	r3, #4

080027d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027dc:	d3f9      	bcc.n	80027d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027de:	4a0a      	ldr	r2, [pc, #40]	; (8002808 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027e0:	4c0a      	ldr	r4, [pc, #40]	; (800280c <LoopForever+0x16>)
  movs r3, #0
 80027e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e4:	e001      	b.n	80027ea <LoopFillZerobss>

080027e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e8:	3204      	adds	r2, #4

080027ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027ec:	d3fb      	bcc.n	80027e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ee:	f002 ff03 	bl	80055f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027f2:	f7fe fb15 	bl	8000e20 <main>

080027f6 <LoopForever>:

LoopForever:
    b LoopForever
 80027f6:	e7fe      	b.n	80027f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027f8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002800:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8002804:	080060e0 	.word	0x080060e0
  ldr r2, =_sbss
 8002808:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 800280c:	20000388 	.word	0x20000388

08002810 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002810:	e7fe      	b.n	8002810 <ADC1_IRQHandler>

08002812 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b082      	sub	sp, #8
 8002816:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800281c:	2003      	movs	r0, #3
 800281e:	f000 f961 	bl	8002ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002822:	200f      	movs	r0, #15
 8002824:	f000 f80e 	bl	8002844 <HAL_InitTick>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	71fb      	strb	r3, [r7, #7]
 8002832:	e001      	b.n	8002838 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002834:	f7ff fd7a 	bl	800232c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002838:	79fb      	ldrb	r3, [r7, #7]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002850:	4b17      	ldr	r3, [pc, #92]	; (80028b0 <HAL_InitTick+0x6c>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d023      	beq.n	80028a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002858:	4b16      	ldr	r3, [pc, #88]	; (80028b4 <HAL_InitTick+0x70>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <HAL_InitTick+0x6c>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	4619      	mov	r1, r3
 8002862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002866:	fbb3 f3f1 	udiv	r3, r3, r1
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	4618      	mov	r0, r3
 8002870:	f000 f96d 	bl	8002b4e <HAL_SYSTICK_Config>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10f      	bne.n	800289a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b0f      	cmp	r3, #15
 800287e:	d809      	bhi.n	8002894 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002880:	2200      	movs	r2, #0
 8002882:	6879      	ldr	r1, [r7, #4]
 8002884:	f04f 30ff 	mov.w	r0, #4294967295
 8002888:	f000 f937 	bl	8002afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800288c:	4a0a      	ldr	r2, [pc, #40]	; (80028b8 <HAL_InitTick+0x74>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e007      	b.n	80028a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	e004      	b.n	80028a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	73fb      	strb	r3, [r7, #15]
 800289e:	e001      	b.n	80028a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	200000e0 	.word	0x200000e0
 80028b4:	200000d8 	.word	0x200000d8
 80028b8:	200000dc 	.word	0x200000dc

080028bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_IncTick+0x20>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_IncTick+0x24>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4413      	add	r3, r2
 80028cc:	4a04      	ldr	r2, [pc, #16]	; (80028e0 <HAL_IncTick+0x24>)
 80028ce:	6013      	str	r3, [r2, #0]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	200000e0 	.word	0x200000e0
 80028e0:	20000234 	.word	0x20000234

080028e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return uwTick;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_GetTick+0x14>)
 80028ea:	681b      	ldr	r3, [r3, #0]
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	20000234 	.word	0x20000234

080028fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff ffee 	bl	80028e4 <HAL_GetTick>
 8002908:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002914:	d005      	beq.n	8002922 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_Delay+0x44>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002922:	bf00      	nop
 8002924:	f7ff ffde 	bl	80028e4 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	429a      	cmp	r2, r3
 8002932:	d8f7      	bhi.n	8002924 <HAL_Delay+0x28>
  {
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200000e0 	.word	0x200000e0

08002944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800296c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60d3      	str	r3, [r2, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002990:	4b04      	ldr	r3, [pc, #16]	; (80029a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 0307 	and.w	r3, r3, #7
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	db0b      	blt.n	80029d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4907      	ldr	r1, [pc, #28]	; (80029e0 <__NVIC_EnableIRQ+0x38>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2001      	movs	r0, #1
 80029ca:	fa00 f202 	lsl.w	r2, r0, r2
 80029ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000e100 	.word	0xe000e100

080029e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	db0a      	blt.n	8002a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	490c      	ldr	r1, [pc, #48]	; (8002a30 <__NVIC_SetPriority+0x4c>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	0112      	lsls	r2, r2, #4
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	440b      	add	r3, r1
 8002a08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a0c:	e00a      	b.n	8002a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4908      	ldr	r1, [pc, #32]	; (8002a34 <__NVIC_SetPriority+0x50>)
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	3b04      	subs	r3, #4
 8002a1c:	0112      	lsls	r2, r2, #4
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	440b      	add	r3, r1
 8002a22:	761a      	strb	r2, [r3, #24]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000e100 	.word	0xe000e100
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b089      	sub	sp, #36	; 0x24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f1c3 0307 	rsb	r3, r3, #7
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	bf28      	it	cs
 8002a56:	2304      	movcs	r3, #4
 8002a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d902      	bls.n	8002a68 <NVIC_EncodePriority+0x30>
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3b03      	subs	r3, #3
 8002a66:	e000      	b.n	8002a6a <NVIC_EncodePriority+0x32>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43da      	mvns	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a80:	f04f 31ff 	mov.w	r1, #4294967295
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	43d9      	mvns	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	4313      	orrs	r3, r2
         );
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3724      	adds	r7, #36	; 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab0:	d301      	bcc.n	8002ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00f      	b.n	8002ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	; (8002ae0 <SysTick_Config+0x40>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002abe:	210f      	movs	r1, #15
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	f7ff ff8e 	bl	80029e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <SysTick_Config+0x40>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ace:	4b04      	ldr	r3, [pc, #16]	; (8002ae0 <SysTick_Config+0x40>)
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	e000e010 	.word	0xe000e010

08002ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff29 	bl	8002944 <__NVIC_SetPriorityGrouping>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b0c:	f7ff ff3e 	bl	800298c <__NVIC_GetPriorityGrouping>
 8002b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	6978      	ldr	r0, [r7, #20]
 8002b18:	f7ff ff8e 	bl	8002a38 <NVIC_EncodePriority>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff5d 	bl	80029e4 <__NVIC_SetPriority>
}
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff31 	bl	80029a8 <__NVIC_EnableIRQ>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ffa2 	bl	8002aa0 <SysTick_Config>
 8002b5c:	4603      	mov	r3, r0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b76:	e154      	b.n	8002e22 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 8146 	beq.w	8002e1c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d005      	beq.n	8002ba8 <HAL_GPIO_Init+0x40>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d130      	bne.n	8002c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bde:	2201      	movs	r2, #1
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f003 0201 	and.w	r2, r3, #1
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d017      	beq.n	8002c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2203      	movs	r2, #3
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d123      	bne.n	8002c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	08da      	lsrs	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3208      	adds	r2, #8
 8002c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	220f      	movs	r2, #15
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	08da      	lsrs	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3208      	adds	r2, #8
 8002c94:	6939      	ldr	r1, [r7, #16]
 8002c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0203 	and.w	r2, r3, #3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80a0 	beq.w	8002e1c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cdc:	4b58      	ldr	r3, [pc, #352]	; (8002e40 <HAL_GPIO_Init+0x2d8>)
 8002cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce0:	4a57      	ldr	r2, [pc, #348]	; (8002e40 <HAL_GPIO_Init+0x2d8>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6613      	str	r3, [r2, #96]	; 0x60
 8002ce8:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <HAL_GPIO_Init+0x2d8>)
 8002cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cf4:	4a53      	ldr	r2, [pc, #332]	; (8002e44 <HAL_GPIO_Init+0x2dc>)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d1e:	d019      	beq.n	8002d54 <HAL_GPIO_Init+0x1ec>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a49      	ldr	r2, [pc, #292]	; (8002e48 <HAL_GPIO_Init+0x2e0>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d013      	beq.n	8002d50 <HAL_GPIO_Init+0x1e8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a48      	ldr	r2, [pc, #288]	; (8002e4c <HAL_GPIO_Init+0x2e4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00d      	beq.n	8002d4c <HAL_GPIO_Init+0x1e4>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a47      	ldr	r2, [pc, #284]	; (8002e50 <HAL_GPIO_Init+0x2e8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d007      	beq.n	8002d48 <HAL_GPIO_Init+0x1e0>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a46      	ldr	r2, [pc, #280]	; (8002e54 <HAL_GPIO_Init+0x2ec>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d101      	bne.n	8002d44 <HAL_GPIO_Init+0x1dc>
 8002d40:	2304      	movs	r3, #4
 8002d42:	e008      	b.n	8002d56 <HAL_GPIO_Init+0x1ee>
 8002d44:	2307      	movs	r3, #7
 8002d46:	e006      	b.n	8002d56 <HAL_GPIO_Init+0x1ee>
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e004      	b.n	8002d56 <HAL_GPIO_Init+0x1ee>
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	e002      	b.n	8002d56 <HAL_GPIO_Init+0x1ee>
 8002d50:	2301      	movs	r3, #1
 8002d52:	e000      	b.n	8002d56 <HAL_GPIO_Init+0x1ee>
 8002d54:	2300      	movs	r3, #0
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	f002 0203 	and.w	r2, r2, #3
 8002d5c:	0092      	lsls	r2, r2, #2
 8002d5e:	4093      	lsls	r3, r2
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d66:	4937      	ldr	r1, [pc, #220]	; (8002e44 <HAL_GPIO_Init+0x2dc>)
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	089b      	lsrs	r3, r3, #2
 8002d6c:	3302      	adds	r3, #2
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d74:	4b38      	ldr	r3, [pc, #224]	; (8002e58 <HAL_GPIO_Init+0x2f0>)
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	43db      	mvns	r3, r3
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	4013      	ands	r3, r2
 8002d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d98:	4a2f      	ldr	r2, [pc, #188]	; (8002e58 <HAL_GPIO_Init+0x2f0>)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d9e:	4b2e      	ldr	r3, [pc, #184]	; (8002e58 <HAL_GPIO_Init+0x2f0>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	43db      	mvns	r3, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4013      	ands	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dc2:	4a25      	ldr	r2, [pc, #148]	; (8002e58 <HAL_GPIO_Init+0x2f0>)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002dc8:	4b23      	ldr	r3, [pc, #140]	; (8002e58 <HAL_GPIO_Init+0x2f0>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d003      	beq.n	8002dec <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dec:	4a1a      	ldr	r2, [pc, #104]	; (8002e58 <HAL_GPIO_Init+0x2f0>)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002df2:	4b19      	ldr	r3, [pc, #100]	; (8002e58 <HAL_GPIO_Init+0x2f0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d003      	beq.n	8002e16 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e16:	4a10      	ldr	r2, [pc, #64]	; (8002e58 <HAL_GPIO_Init+0x2f0>)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f47f aea3 	bne.w	8002b78 <HAL_GPIO_Init+0x10>
  }
}
 8002e32:	bf00      	nop
 8002e34:	bf00      	nop
 8002e36:	371c      	adds	r7, #28
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	40021000 	.word	0x40021000
 8002e44:	40010000 	.word	0x40010000
 8002e48:	48000400 	.word	0x48000400
 8002e4c:	48000800 	.word	0x48000800
 8002e50:	48000c00 	.word	0x48000c00
 8002e54:	48001000 	.word	0x48001000
 8002e58:	40010400 	.word	0x40010400

08002e5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	460b      	mov	r3, r1
 8002e66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	887b      	ldrh	r3, [r7, #2]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
 8002e78:	e001      	b.n	8002e7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3714      	adds	r7, #20
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	807b      	strh	r3, [r7, #2]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e9c:	787b      	ldrb	r3, [r7, #1]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ea2:	887a      	ldrh	r2, [r7, #2]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ea8:	e002      	b.n	8002eb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eaa:	887a      	ldrh	r2, [r7, #2]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ec6:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ec8:	695a      	ldr	r2, [r3, #20]
 8002eca:	88fb      	ldrh	r3, [r7, #6]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ed2:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 f806 	bl	8002eec <HAL_GPIO_EXTI_Callback>
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40010400 	.word	0x40010400

08002eec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e08d      	b.n	8003030 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d106      	bne.n	8002f2e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff fa31 	bl	8002390 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2224      	movs	r2, #36	; 0x24
 8002f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0201 	bic.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f52:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f62:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f78:	609a      	str	r2, [r3, #8]
 8002f7a:	e006      	b.n	8002f8a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f88:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d108      	bne.n	8002fa4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	e007      	b.n	8002fb4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6812      	ldr	r2, [r2, #0]
 8002fbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fd6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	691a      	ldr	r2, [r3, #16]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69d9      	ldr	r1, [r3, #28]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1a      	ldr	r2, [r3, #32]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2220      	movs	r2, #32
 800301c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b20      	cmp	r3, #32
 800304c:	d138      	bne.n	80030c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003058:	2302      	movs	r3, #2
 800305a:	e032      	b.n	80030c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2224      	movs	r2, #36	; 0x24
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800308a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6819      	ldr	r1, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d139      	bne.n	8003158 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e033      	b.n	800315a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2224      	movs	r2, #36	; 0x24
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003120:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a04      	ldr	r2, [pc, #16]	; (8003184 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003172:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003176:	6013      	str	r3, [r2, #0]
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40007000 	.word	0x40007000

08003188 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage thresholds corresponding to each
  *         detection level.
  * @retval None
  */
HAL_StatusTypeDef HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS bits according to PVDLevel value */
  MODIFY_REG(PWR->CR2, PWR_CR2_PLS, sConfigPVD->PVDLevel);
 8003190:	4b2b      	ldr	r3, [pc, #172]	; (8003240 <HAL_PWR_ConfigPVD+0xb8>)
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 020e 	bic.w	r2, r3, #14
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4928      	ldr	r1, [pc, #160]	; (8003240 <HAL_PWR_ConfigPVD+0xb8>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]

  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	4a27      	ldr	r2, [pc, #156]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 80031a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ac:	6053      	str	r3, [r2, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 80031ae:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a24      	ldr	r2, [pc, #144]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 80031b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b8:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE();
 80031ba:	4b22      	ldr	r3, [pc, #136]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	4a21      	ldr	r2, [pc, #132]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 80031c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c4:	60d3      	str	r3, [r2, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 80031c6:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 80031cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031d0:	6093      	str	r3, [r2, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_PWR_ConfigPVD+0x62>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80031de:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a18      	ldr	r2, [pc, #96]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 80031e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e8:	6013      	str	r3, [r2, #0]
  }

  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_PWR_ConfigPVD+0x7a>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80031f6:	4b13      	ldr	r3, [pc, #76]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4a12      	ldr	r2, [pc, #72]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 80031fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003200:	6053      	str	r3, [r2, #4]
  }

  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <HAL_PWR_ConfigPVD+0x92>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	4a0c      	ldr	r2, [pc, #48]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 8003214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003218:	6093      	str	r3, [r2, #8]
  }

  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_PWR_ConfigPVD+0xaa>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	4a06      	ldr	r2, [pc, #24]	; (8003244 <HAL_PWR_ConfigPVD+0xbc>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	60d3      	str	r3, [r2, #12]
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	40007000 	.word	0x40007000
 8003244:	40010400 	.word	0x40010400

08003248 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Power Voltage Detector (PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_PVDE);
 800324c:	4b05      	ldr	r3, [pc, #20]	; (8003264 <HAL_PWR_EnablePVD+0x1c>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a04      	ldr	r2, [pc, #16]	; (8003264 <HAL_PWR_EnablePVD+0x1c>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	6053      	str	r3, [r2, #4]
}
 8003258:	bf00      	nop
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40007000 	.word	0x40007000

08003268 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <HAL_PWREx_GetVoltageRange+0x18>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40007000 	.word	0x40007000

08003284 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003292:	d130      	bne.n	80032f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003294:	4b23      	ldr	r3, [pc, #140]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800329c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032a0:	d038      	beq.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032a2:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032aa:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2232      	movs	r2, #50	; 0x32
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	4a1b      	ldr	r2, [pc, #108]	; (800332c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	0c9b      	lsrs	r3, r3, #18
 80032c4:	3301      	adds	r3, #1
 80032c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032c8:	e002      	b.n	80032d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032dc:	d102      	bne.n	80032e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f2      	bne.n	80032ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032f0:	d110      	bne.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e00f      	b.n	8003316 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d007      	beq.n	8003314 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003304:	4b07      	ldr	r3, [pc, #28]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800330c:	4a05      	ldr	r2, [pc, #20]	; (8003324 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800330e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003312:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003314:	2300      	movs	r3, #0
}
 8003316:	4618      	mov	r0, r3
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40007000 	.word	0x40007000
 8003328:	200000d8 	.word	0x200000d8
 800332c:	431bde83 	.word	0x431bde83

08003330 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 800333a:	4b11      	ldr	r3, [pc, #68]	; (8003380 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f023 0307 	bic.w	r3, r3, #7
 8003342:	4a0f      	ldr	r2, [pc, #60]	; (8003380 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003344:	f043 0302 	orr.w	r3, r3, #2
 8003348:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	4a0d      	ldr	r2, [pc, #52]	; (8003384 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d101      	bne.n	8003360 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800335c:	bf30      	wfi
 800335e:	e002      	b.n	8003366 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003360:	bf40      	sev
    __WFE();
 8003362:	bf20      	wfe
    __WFE();
 8003364:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003366:	4b07      	ldr	r3, [pc, #28]	; (8003384 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	4a06      	ldr	r2, [pc, #24]	; (8003384 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6113      	str	r3, [r2, #16]
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40007000 	.word	0x40007000
 8003384:	e000ed00 	.word	0xe000ed00

08003388 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f000 bc02 	b.w	8003ba0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339c:	4b96      	ldr	r3, [pc, #600]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 030c 	and.w	r3, r3, #12
 80033a4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a6:	4b94      	ldr	r3, [pc, #592]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f000 80e4 	beq.w	8003586 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d007      	beq.n	80033d4 <HAL_RCC_OscConfig+0x4c>
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	f040 808b 	bne.w	80034e2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	f040 8087 	bne.w	80034e2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033d4:	4b88      	ldr	r3, [pc, #544]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d005      	beq.n	80033ec <HAL_RCC_OscConfig+0x64>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e3d9      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a1a      	ldr	r2, [r3, #32]
 80033f0:	4b81      	ldr	r3, [pc, #516]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0308 	and.w	r3, r3, #8
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <HAL_RCC_OscConfig+0x7e>
 80033fc:	4b7e      	ldr	r3, [pc, #504]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003404:	e005      	b.n	8003412 <HAL_RCC_OscConfig+0x8a>
 8003406:	4b7c      	ldr	r3, [pc, #496]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800340c:	091b      	lsrs	r3, r3, #4
 800340e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003412:	4293      	cmp	r3, r2
 8003414:	d223      	bcs.n	800345e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fd54 	bl	8003ec8 <RCC_SetFlashLatencyFromMSIRange>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e3ba      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800342a:	4b73      	ldr	r3, [pc, #460]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a72      	ldr	r2, [pc, #456]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003430:	f043 0308 	orr.w	r3, r3, #8
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b70      	ldr	r3, [pc, #448]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	496d      	ldr	r1, [pc, #436]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003444:	4313      	orrs	r3, r2
 8003446:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003448:	4b6b      	ldr	r3, [pc, #428]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	021b      	lsls	r3, r3, #8
 8003456:	4968      	ldr	r1, [pc, #416]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
 800345c:	e025      	b.n	80034aa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800345e:	4b66      	ldr	r3, [pc, #408]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a65      	ldr	r2, [pc, #404]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003464:	f043 0308 	orr.w	r3, r3, #8
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b63      	ldr	r3, [pc, #396]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4960      	ldr	r1, [pc, #384]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003478:	4313      	orrs	r3, r2
 800347a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800347c:	4b5e      	ldr	r3, [pc, #376]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	021b      	lsls	r3, r3, #8
 800348a:	495b      	ldr	r1, [pc, #364]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d109      	bne.n	80034aa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fd14 	bl	8003ec8 <RCC_SetFlashLatencyFromMSIRange>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e37a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80034aa:	f000 fc81 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 80034ae:	4602      	mov	r2, r0
 80034b0:	4b51      	ldr	r3, [pc, #324]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	091b      	lsrs	r3, r3, #4
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	4950      	ldr	r1, [pc, #320]	; (80035fc <HAL_RCC_OscConfig+0x274>)
 80034bc:	5ccb      	ldrb	r3, [r1, r3]
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	fa22 f303 	lsr.w	r3, r2, r3
 80034c6:	4a4e      	ldr	r2, [pc, #312]	; (8003600 <HAL_RCC_OscConfig+0x278>)
 80034c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80034ca:	4b4e      	ldr	r3, [pc, #312]	; (8003604 <HAL_RCC_OscConfig+0x27c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff f9b8 	bl	8002844 <HAL_InitTick>
 80034d4:	4603      	mov	r3, r0
 80034d6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d052      	beq.n	8003584 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	e35e      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	699b      	ldr	r3, [r3, #24]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d032      	beq.n	8003550 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80034ea:	4b43      	ldr	r3, [pc, #268]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a42      	ldr	r2, [pc, #264]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80034f6:	f7ff f9f5 	bl	80028e4 <HAL_GetTick>
 80034fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80034fe:	f7ff f9f1 	bl	80028e4 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e347      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003510:	4b39      	ldr	r3, [pc, #228]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0f0      	beq.n	80034fe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800351c:	4b36      	ldr	r3, [pc, #216]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a35      	ldr	r2, [pc, #212]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003522:	f043 0308 	orr.w	r3, r3, #8
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	4b33      	ldr	r3, [pc, #204]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	4930      	ldr	r1, [pc, #192]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800353a:	4b2f      	ldr	r3, [pc, #188]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	492b      	ldr	r1, [pc, #172]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 800354a:	4313      	orrs	r3, r2
 800354c:	604b      	str	r3, [r1, #4]
 800354e:	e01a      	b.n	8003586 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003550:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a28      	ldr	r2, [pc, #160]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800355c:	f7ff f9c2 	bl	80028e4 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003564:	f7ff f9be 	bl	80028e4 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e314      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003576:	4b20      	ldr	r3, [pc, #128]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x1dc>
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003584:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d073      	beq.n	800367a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	2b08      	cmp	r3, #8
 8003596:	d005      	beq.n	80035a4 <HAL_RCC_OscConfig+0x21c>
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d10e      	bne.n	80035bc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d10b      	bne.n	80035bc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035a4:	4b14      	ldr	r3, [pc, #80]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d063      	beq.n	8003678 <HAL_RCC_OscConfig+0x2f0>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d15f      	bne.n	8003678 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e2f1      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035c4:	d106      	bne.n	80035d4 <HAL_RCC_OscConfig+0x24c>
 80035c6:	4b0c      	ldr	r3, [pc, #48]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80035cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d0:	6013      	str	r3, [r2, #0]
 80035d2:	e025      	b.n	8003620 <HAL_RCC_OscConfig+0x298>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035dc:	d114      	bne.n	8003608 <HAL_RCC_OscConfig+0x280>
 80035de:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80035e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a02      	ldr	r2, [pc, #8]	; (80035f8 <HAL_RCC_OscConfig+0x270>)
 80035f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f4:	6013      	str	r3, [r2, #0]
 80035f6:	e013      	b.n	8003620 <HAL_RCC_OscConfig+0x298>
 80035f8:	40021000 	.word	0x40021000
 80035fc:	0800605c 	.word	0x0800605c
 8003600:	200000d8 	.word	0x200000d8
 8003604:	200000dc 	.word	0x200000dc
 8003608:	4ba0      	ldr	r3, [pc, #640]	; (800388c <HAL_RCC_OscConfig+0x504>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a9f      	ldr	r2, [pc, #636]	; (800388c <HAL_RCC_OscConfig+0x504>)
 800360e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003612:	6013      	str	r3, [r2, #0]
 8003614:	4b9d      	ldr	r3, [pc, #628]	; (800388c <HAL_RCC_OscConfig+0x504>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a9c      	ldr	r2, [pc, #624]	; (800388c <HAL_RCC_OscConfig+0x504>)
 800361a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800361e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d013      	beq.n	8003650 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003628:	f7ff f95c 	bl	80028e4 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003630:	f7ff f958 	bl	80028e4 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e2ae      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003642:	4b92      	ldr	r3, [pc, #584]	; (800388c <HAL_RCC_OscConfig+0x504>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x2a8>
 800364e:	e014      	b.n	800367a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003650:	f7ff f948 	bl	80028e4 <HAL_GetTick>
 8003654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003656:	e008      	b.n	800366a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003658:	f7ff f944 	bl	80028e4 <HAL_GetTick>
 800365c:	4602      	mov	r2, r0
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b64      	cmp	r3, #100	; 0x64
 8003664:	d901      	bls.n	800366a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e29a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x504>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1f0      	bne.n	8003658 <HAL_RCC_OscConfig+0x2d0>
 8003676:	e000      	b.n	800367a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d060      	beq.n	8003748 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d005      	beq.n	8003698 <HAL_RCC_OscConfig+0x310>
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b0c      	cmp	r3, #12
 8003690:	d119      	bne.n	80036c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d116      	bne.n	80036c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003698:	4b7c      	ldr	r3, [pc, #496]	; (800388c <HAL_RCC_OscConfig+0x504>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_OscConfig+0x328>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e277      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036b0:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x504>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	061b      	lsls	r3, r3, #24
 80036be:	4973      	ldr	r1, [pc, #460]	; (800388c <HAL_RCC_OscConfig+0x504>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036c4:	e040      	b.n	8003748 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d023      	beq.n	8003716 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036ce:	4b6f      	ldr	r3, [pc, #444]	; (800388c <HAL_RCC_OscConfig+0x504>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a6e      	ldr	r2, [pc, #440]	; (800388c <HAL_RCC_OscConfig+0x504>)
 80036d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036da:	f7ff f903 	bl	80028e4 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036e2:	f7ff f8ff 	bl	80028e4 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e255      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f4:	4b65      	ldr	r3, [pc, #404]	; (800388c <HAL_RCC_OscConfig+0x504>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0f0      	beq.n	80036e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003700:	4b62      	ldr	r3, [pc, #392]	; (800388c <HAL_RCC_OscConfig+0x504>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	061b      	lsls	r3, r3, #24
 800370e:	495f      	ldr	r1, [pc, #380]	; (800388c <HAL_RCC_OscConfig+0x504>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
 8003714:	e018      	b.n	8003748 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003716:	4b5d      	ldr	r3, [pc, #372]	; (800388c <HAL_RCC_OscConfig+0x504>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a5c      	ldr	r2, [pc, #368]	; (800388c <HAL_RCC_OscConfig+0x504>)
 800371c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003722:	f7ff f8df 	bl	80028e4 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003728:	e008      	b.n	800373c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372a:	f7ff f8db 	bl	80028e4 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e231      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800373c:	4b53      	ldr	r3, [pc, #332]	; (800388c <HAL_RCC_OscConfig+0x504>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b00      	cmp	r3, #0
 8003752:	d03c      	beq.n	80037ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	695b      	ldr	r3, [r3, #20]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01c      	beq.n	8003796 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800375c:	4b4b      	ldr	r3, [pc, #300]	; (800388c <HAL_RCC_OscConfig+0x504>)
 800375e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003762:	4a4a      	ldr	r2, [pc, #296]	; (800388c <HAL_RCC_OscConfig+0x504>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376c:	f7ff f8ba 	bl	80028e4 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003774:	f7ff f8b6 	bl	80028e4 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b02      	cmp	r3, #2
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e20c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003786:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCC_OscConfig+0x504>)
 8003788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0ef      	beq.n	8003774 <HAL_RCC_OscConfig+0x3ec>
 8003794:	e01b      	b.n	80037ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003796:	4b3d      	ldr	r3, [pc, #244]	; (800388c <HAL_RCC_OscConfig+0x504>)
 8003798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800379c:	4a3b      	ldr	r2, [pc, #236]	; (800388c <HAL_RCC_OscConfig+0x504>)
 800379e:	f023 0301 	bic.w	r3, r3, #1
 80037a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a6:	f7ff f89d 	bl	80028e4 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ae:	f7ff f899 	bl	80028e4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e1ef      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80037c0:	4b32      	ldr	r3, [pc, #200]	; (800388c <HAL_RCC_OscConfig+0x504>)
 80037c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1ef      	bne.n	80037ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 80a6 	beq.w	8003928 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80037e0:	4b2a      	ldr	r3, [pc, #168]	; (800388c <HAL_RCC_OscConfig+0x504>)
 80037e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10d      	bne.n	8003808 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ec:	4b27      	ldr	r3, [pc, #156]	; (800388c <HAL_RCC_OscConfig+0x504>)
 80037ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037f0:	4a26      	ldr	r2, [pc, #152]	; (800388c <HAL_RCC_OscConfig+0x504>)
 80037f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f6:	6593      	str	r3, [r2, #88]	; 0x58
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_RCC_OscConfig+0x504>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003804:	2301      	movs	r3, #1
 8003806:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003808:	4b21      	ldr	r3, [pc, #132]	; (8003890 <HAL_RCC_OscConfig+0x508>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d118      	bne.n	8003846 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003814:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <HAL_RCC_OscConfig+0x508>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a1d      	ldr	r2, [pc, #116]	; (8003890 <HAL_RCC_OscConfig+0x508>)
 800381a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800381e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003820:	f7ff f860 	bl	80028e4 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003828:	f7ff f85c 	bl	80028e4 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e1b2      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800383a:	4b15      	ldr	r3, [pc, #84]	; (8003890 <HAL_RCC_OscConfig+0x508>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d108      	bne.n	8003860 <HAL_RCC_OscConfig+0x4d8>
 800384e:	4b0f      	ldr	r3, [pc, #60]	; (800388c <HAL_RCC_OscConfig+0x504>)
 8003850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003854:	4a0d      	ldr	r2, [pc, #52]	; (800388c <HAL_RCC_OscConfig+0x504>)
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800385e:	e029      	b.n	80038b4 <HAL_RCC_OscConfig+0x52c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b05      	cmp	r3, #5
 8003866:	d115      	bne.n	8003894 <HAL_RCC_OscConfig+0x50c>
 8003868:	4b08      	ldr	r3, [pc, #32]	; (800388c <HAL_RCC_OscConfig+0x504>)
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	4a07      	ldr	r2, [pc, #28]	; (800388c <HAL_RCC_OscConfig+0x504>)
 8003870:	f043 0304 	orr.w	r3, r3, #4
 8003874:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <HAL_RCC_OscConfig+0x504>)
 800387a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800387e:	4a03      	ldr	r2, [pc, #12]	; (800388c <HAL_RCC_OscConfig+0x504>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003888:	e014      	b.n	80038b4 <HAL_RCC_OscConfig+0x52c>
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000
 8003890:	40007000 	.word	0x40007000
 8003894:	4b9a      	ldr	r3, [pc, #616]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800389a:	4a99      	ldr	r2, [pc, #612]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 800389c:	f023 0301 	bic.w	r3, r3, #1
 80038a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038a4:	4b96      	ldr	r3, [pc, #600]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	4a95      	ldr	r2, [pc, #596]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 80038ac:	f023 0304 	bic.w	r3, r3, #4
 80038b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d016      	beq.n	80038ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038bc:	f7ff f812 	bl	80028e4 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038c2:	e00a      	b.n	80038da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038c4:	f7ff f80e 	bl	80028e4 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e162      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038da:	4b89      	ldr	r3, [pc, #548]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 80038dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d0ed      	beq.n	80038c4 <HAL_RCC_OscConfig+0x53c>
 80038e8:	e015      	b.n	8003916 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ea:	f7fe fffb 	bl	80028e4 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038f0:	e00a      	b.n	8003908 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7fe fff7 	bl	80028e4 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003900:	4293      	cmp	r3, r2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e14b      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003908:	4b7d      	ldr	r3, [pc, #500]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1ed      	bne.n	80038f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003916:	7ffb      	ldrb	r3, [r7, #31]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d105      	bne.n	8003928 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800391c:	4b78      	ldr	r3, [pc, #480]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 800391e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003920:	4a77      	ldr	r2, [pc, #476]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003926:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b00      	cmp	r3, #0
 8003932:	d03c      	beq.n	80039ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	2b00      	cmp	r3, #0
 800393a:	d01c      	beq.n	8003976 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800393c:	4b70      	ldr	r3, [pc, #448]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 800393e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003942:	4a6f      	ldr	r2, [pc, #444]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fe ffca 	bl	80028e4 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003954:	f7fe ffc6 	bl	80028e4 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e11c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003966:	4b66      	ldr	r3, [pc, #408]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003968:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ef      	beq.n	8003954 <HAL_RCC_OscConfig+0x5cc>
 8003974:	e01b      	b.n	80039ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003976:	4b62      	ldr	r3, [pc, #392]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003978:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800397c:	4a60      	ldr	r2, [pc, #384]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 800397e:	f023 0301 	bic.w	r3, r3, #1
 8003982:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003986:	f7fe ffad 	bl	80028e4 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800398e:	f7fe ffa9 	bl	80028e4 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e0ff      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039a0:	4b57      	ldr	r3, [pc, #348]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 80039a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1ef      	bne.n	800398e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80f3 	beq.w	8003b9e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	2b02      	cmp	r3, #2
 80039be:	f040 80c9 	bne.w	8003b54 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80039c2:	4b4f      	ldr	r3, [pc, #316]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 0203 	and.w	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d12c      	bne.n	8003a30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	3b01      	subs	r3, #1
 80039e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d123      	bne.n	8003a30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d11b      	bne.n	8003a30 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a02:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d113      	bne.n	8003a30 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	3b01      	subs	r3, #1
 8003a16:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d109      	bne.n	8003a30 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	085b      	lsrs	r3, r3, #1
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d06b      	beq.n	8003b08 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b0c      	cmp	r3, #12
 8003a34:	d062      	beq.n	8003afc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a36:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e0ac      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003a46:	4b2e      	ldr	r3, [pc, #184]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a2d      	ldr	r2, [pc, #180]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003a4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a50:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003a52:	f7fe ff47 	bl	80028e4 <HAL_GetTick>
 8003a56:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a58:	e008      	b.n	8003a6c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a5a:	f7fe ff43 	bl	80028e4 <HAL_GetTick>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	1ad3      	subs	r3, r2, r3
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e099      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a6c:	4b24      	ldr	r3, [pc, #144]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f0      	bne.n	8003a5a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a78:	4b21      	ldr	r3, [pc, #132]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	4b21      	ldr	r3, [pc, #132]	; (8003b04 <HAL_RCC_OscConfig+0x77c>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003a88:	3a01      	subs	r2, #1
 8003a8a:	0112      	lsls	r2, r2, #4
 8003a8c:	4311      	orrs	r1, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a92:	0212      	lsls	r2, r2, #8
 8003a94:	4311      	orrs	r1, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a9a:	0852      	lsrs	r2, r2, #1
 8003a9c:	3a01      	subs	r2, #1
 8003a9e:	0552      	lsls	r2, r2, #21
 8003aa0:	4311      	orrs	r1, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003aa6:	0852      	lsrs	r2, r2, #1
 8003aa8:	3a01      	subs	r2, #1
 8003aaa:	0652      	lsls	r2, r2, #25
 8003aac:	4311      	orrs	r1, r2
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ab2:	06d2      	lsls	r2, r2, #27
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	4912      	ldr	r1, [pc, #72]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003abc:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0f      	ldr	r2, [pc, #60]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	4a0c      	ldr	r2, [pc, #48]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003ace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ad2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ad4:	f7fe ff06 	bl	80028e4 <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fe ff02 	bl	80028e4 <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e058      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aee:	4b04      	ldr	r3, [pc, #16]	; (8003b00 <HAL_RCC_OscConfig+0x778>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d0f0      	beq.n	8003adc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003afa:	e050      	b.n	8003b9e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e04f      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
 8003b00:	40021000 	.word	0x40021000
 8003b04:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b08:	4b27      	ldr	r3, [pc, #156]	; (8003ba8 <HAL_RCC_OscConfig+0x820>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d144      	bne.n	8003b9e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b14:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <HAL_RCC_OscConfig+0x820>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a23      	ldr	r2, [pc, #140]	; (8003ba8 <HAL_RCC_OscConfig+0x820>)
 8003b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b20:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <HAL_RCC_OscConfig+0x820>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a20      	ldr	r2, [pc, #128]	; (8003ba8 <HAL_RCC_OscConfig+0x820>)
 8003b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b2c:	f7fe feda 	bl	80028e4 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fe fed6 	bl	80028e4 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e02c      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b46:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <HAL_RCC_OscConfig+0x820>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d0f0      	beq.n	8003b34 <HAL_RCC_OscConfig+0x7ac>
 8003b52:	e024      	b.n	8003b9e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b0c      	cmp	r3, #12
 8003b58:	d01f      	beq.n	8003b9a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b5a:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_RCC_OscConfig+0x820>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a12      	ldr	r2, [pc, #72]	; (8003ba8 <HAL_RCC_OscConfig+0x820>)
 8003b60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b66:	f7fe febd 	bl	80028e4 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b6e:	f7fe feb9 	bl	80028e4 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e00f      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_OscConfig+0x820>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f0      	bne.n	8003b6e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <HAL_RCC_OscConfig+0x820>)
 8003b8e:	68da      	ldr	r2, [r3, #12]
 8003b90:	4905      	ldr	r1, [pc, #20]	; (8003ba8 <HAL_RCC_OscConfig+0x820>)
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_OscConfig+0x824>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	60cb      	str	r3, [r1, #12]
 8003b98:	e001      	b.n	8003b9e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e000      	b.n	8003ba0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3720      	adds	r7, #32
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	feeefffc 	.word	0xfeeefffc

08003bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	e0e7      	b.n	8003d94 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc4:	4b75      	ldr	r3, [pc, #468]	; (8003d9c <HAL_RCC_ClockConfig+0x1ec>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d910      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bd2:	4b72      	ldr	r3, [pc, #456]	; (8003d9c <HAL_RCC_ClockConfig+0x1ec>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 0207 	bic.w	r2, r3, #7
 8003bda:	4970      	ldr	r1, [pc, #448]	; (8003d9c <HAL_RCC_ClockConfig+0x1ec>)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b6e      	ldr	r3, [pc, #440]	; (8003d9c <HAL_RCC_ClockConfig+0x1ec>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e0cf      	b.n	8003d94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d010      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689a      	ldr	r2, [r3, #8]
 8003c04:	4b66      	ldr	r3, [pc, #408]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d908      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c10:	4b63      	ldr	r3, [pc, #396]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4960      	ldr	r1, [pc, #384]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d04c      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b03      	cmp	r3, #3
 8003c34:	d107      	bne.n	8003c46 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c36:	4b5a      	ldr	r3, [pc, #360]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d121      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e0a6      	b.n	8003d94 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d107      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c4e:	4b54      	ldr	r3, [pc, #336]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d115      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e09a      	b.n	8003d94 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d107      	bne.n	8003c76 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c66:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d109      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e08e      	b.n	8003d94 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c76:	4b4a      	ldr	r3, [pc, #296]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e086      	b.n	8003d94 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c86:	4b46      	ldr	r3, [pc, #280]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	f023 0203 	bic.w	r2, r3, #3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4943      	ldr	r1, [pc, #268]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c98:	f7fe fe24 	bl	80028e4 <HAL_GetTick>
 8003c9c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9e:	e00a      	b.n	8003cb6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca0:	f7fe fe20 	bl	80028e4 <HAL_GetTick>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1ad3      	subs	r3, r2, r3
 8003caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e06e      	b.n	8003d94 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb6:	4b3a      	ldr	r3, [pc, #232]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f003 020c 	and.w	r2, r3, #12
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d1eb      	bne.n	8003ca0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d010      	beq.n	8003cf6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d208      	bcs.n	8003cf6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce4:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	492b      	ldr	r1, [pc, #172]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf6:	4b29      	ldr	r3, [pc, #164]	; (8003d9c <HAL_RCC_ClockConfig+0x1ec>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0307 	and.w	r3, r3, #7
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d210      	bcs.n	8003d26 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d04:	4b25      	ldr	r3, [pc, #148]	; (8003d9c <HAL_RCC_ClockConfig+0x1ec>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f023 0207 	bic.w	r2, r3, #7
 8003d0c:	4923      	ldr	r1, [pc, #140]	; (8003d9c <HAL_RCC_ClockConfig+0x1ec>)
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d14:	4b21      	ldr	r3, [pc, #132]	; (8003d9c <HAL_RCC_ClockConfig+0x1ec>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d001      	beq.n	8003d26 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e036      	b.n	8003d94 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f003 0304 	and.w	r3, r3, #4
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d008      	beq.n	8003d44 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d32:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	4918      	ldr	r1, [pc, #96]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4910      	ldr	r1, [pc, #64]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d64:	f000 f824 	bl	8003db0 <HAL_RCC_GetSysClockFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_RCC_ClockConfig+0x1f0>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	091b      	lsrs	r3, r3, #4
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	490b      	ldr	r1, [pc, #44]	; (8003da4 <HAL_RCC_ClockConfig+0x1f4>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d80:	4a09      	ldr	r2, [pc, #36]	; (8003da8 <HAL_RCC_ClockConfig+0x1f8>)
 8003d82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003d84:	4b09      	ldr	r3, [pc, #36]	; (8003dac <HAL_RCC_ClockConfig+0x1fc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f7fe fd5b 	bl	8002844 <HAL_InitTick>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	72fb      	strb	r3, [r7, #11]

  return status;
 8003d92:	7afb      	ldrb	r3, [r7, #11]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40022000 	.word	0x40022000
 8003da0:	40021000 	.word	0x40021000
 8003da4:	0800605c 	.word	0x0800605c
 8003da8:	200000d8 	.word	0x200000d8
 8003dac:	200000dc 	.word	0x200000dc

08003db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b089      	sub	sp, #36	; 0x24
 8003db4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dbe:	4b3e      	ldr	r3, [pc, #248]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dc8:	4b3b      	ldr	r3, [pc, #236]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0303 	and.w	r3, r3, #3
 8003dd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d005      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b0c      	cmp	r3, #12
 8003ddc:	d121      	bne.n	8003e22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d11e      	bne.n	8003e22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003de4:	4b34      	ldr	r3, [pc, #208]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d107      	bne.n	8003e00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003df0:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003df6:	0a1b      	lsrs	r3, r3, #8
 8003df8:	f003 030f 	and.w	r3, r3, #15
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	e005      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e00:	4b2d      	ldr	r3, [pc, #180]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	091b      	lsrs	r3, r3, #4
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e0c:	4a2b      	ldr	r2, [pc, #172]	; (8003ebc <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10d      	bne.n	8003e38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e20:	e00a      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d102      	bne.n	8003e2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e28:	4b25      	ldr	r3, [pc, #148]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	e004      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d101      	bne.n	8003e38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e34:	4b23      	ldr	r3, [pc, #140]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	d134      	bne.n	8003ea8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003e3e:	4b1e      	ldr	r3, [pc, #120]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d003      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0xa6>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b03      	cmp	r3, #3
 8003e52:	d003      	beq.n	8003e5c <HAL_RCC_GetSysClockFreq+0xac>
 8003e54:	e005      	b.n	8003e62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003e56:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e58:	617b      	str	r3, [r7, #20]
      break;
 8003e5a:	e005      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003e5c:	4b19      	ldr	r3, [pc, #100]	; (8003ec4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e5e:	617b      	str	r3, [r7, #20]
      break;
 8003e60:	e002      	b.n	8003e68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	617b      	str	r3, [r7, #20]
      break;
 8003e66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e68:	4b13      	ldr	r3, [pc, #76]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	091b      	lsrs	r3, r3, #4
 8003e6e:	f003 0307 	and.w	r3, r3, #7
 8003e72:	3301      	adds	r3, #1
 8003e74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e76:	4b10      	ldr	r3, [pc, #64]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	fb03 f202 	mul.w	r2, r3, r2
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e8e:	4b0a      	ldr	r3, [pc, #40]	; (8003eb8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	0e5b      	lsrs	r3, r3, #25
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	3301      	adds	r3, #1
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003ea8:	69bb      	ldr	r3, [r7, #24]
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3724      	adds	r7, #36	; 0x24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	0800606c 	.word	0x0800606c
 8003ec0:	00f42400 	.word	0x00f42400
 8003ec4:	007a1200 	.word	0x007a1200

08003ec8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ed4:	4b2a      	ldr	r3, [pc, #168]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ee0:	f7ff f9c2 	bl	8003268 <HAL_PWREx_GetVoltageRange>
 8003ee4:	6178      	str	r0, [r7, #20]
 8003ee6:	e014      	b.n	8003f12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ee8:	4b25      	ldr	r3, [pc, #148]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	4a24      	ldr	r2, [pc, #144]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef4:	4b22      	ldr	r3, [pc, #136]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003f00:	f7ff f9b2 	bl	8003268 <HAL_PWREx_GetVoltageRange>
 8003f04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003f06:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f18:	d10b      	bne.n	8003f32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2b80      	cmp	r3, #128	; 0x80
 8003f1e:	d919      	bls.n	8003f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2ba0      	cmp	r3, #160	; 0xa0
 8003f24:	d902      	bls.n	8003f2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f26:	2302      	movs	r3, #2
 8003f28:	613b      	str	r3, [r7, #16]
 8003f2a:	e013      	b.n	8003f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	e010      	b.n	8003f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b80      	cmp	r3, #128	; 0x80
 8003f36:	d902      	bls.n	8003f3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003f38:	2303      	movs	r3, #3
 8003f3a:	613b      	str	r3, [r7, #16]
 8003f3c:	e00a      	b.n	8003f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b80      	cmp	r3, #128	; 0x80
 8003f42:	d102      	bne.n	8003f4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003f44:	2302      	movs	r3, #2
 8003f46:	613b      	str	r3, [r7, #16]
 8003f48:	e004      	b.n	8003f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b70      	cmp	r3, #112	; 0x70
 8003f4e:	d101      	bne.n	8003f54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003f50:	2301      	movs	r3, #1
 8003f52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f54:	4b0b      	ldr	r3, [pc, #44]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 0207 	bic.w	r2, r3, #7
 8003f5c:	4909      	ldr	r1, [pc, #36]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d001      	beq.n	8003f76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}
 8003f80:	40021000 	.word	0x40021000
 8003f84:	40022000 	.word	0x40022000

08003f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003f90:	2300      	movs	r3, #0
 8003f92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003f94:	2300      	movs	r3, #0
 8003f96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d031      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fac:	d01a      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003fae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003fb2:	d814      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d009      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003fb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003fbc:	d10f      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003fbe:	4b5d      	ldr	r3, [pc, #372]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	4a5c      	ldr	r2, [pc, #368]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fca:	e00c      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3304      	adds	r3, #4
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f000 f9f0 	bl	80043b8 <RCCEx_PLLSAI1_Config>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003fdc:	e003      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	74fb      	strb	r3, [r7, #19]
      break;
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003fe4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fe6:	7cfb      	ldrb	r3, [r7, #19]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d10b      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fec:	4b51      	ldr	r3, [pc, #324]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffa:	494e      	ldr	r1, [pc, #312]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004002:	e001      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004004:	7cfb      	ldrb	r3, [r7, #19]
 8004006:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 809e 	beq.w	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004016:	2300      	movs	r3, #0
 8004018:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800401a:	4b46      	ldr	r3, [pc, #280]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800401c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800401e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800402a:	2300      	movs	r3, #0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00d      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004030:	4b40      	ldr	r3, [pc, #256]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004034:	4a3f      	ldr	r2, [pc, #252]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800403a:	6593      	str	r3, [r2, #88]	; 0x58
 800403c:	4b3d      	ldr	r3, [pc, #244]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800403e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004044:	60bb      	str	r3, [r7, #8]
 8004046:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004048:	2301      	movs	r3, #1
 800404a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800404c:	4b3a      	ldr	r3, [pc, #232]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a39      	ldr	r2, [pc, #228]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004052:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004058:	f7fe fc44 	bl	80028e4 <HAL_GetTick>
 800405c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800405e:	e009      	b.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004060:	f7fe fc40 	bl	80028e4 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d902      	bls.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	74fb      	strb	r3, [r7, #19]
        break;
 8004072:	e005      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004074:	4b30      	ldr	r3, [pc, #192]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0ef      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004080:	7cfb      	ldrb	r3, [r7, #19]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d15a      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004086:	4b2b      	ldr	r3, [pc, #172]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004090:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d01e      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d019      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040a2:	4b24      	ldr	r3, [pc, #144]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040ae:	4b21      	ldr	r3, [pc, #132]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b4:	4a1f      	ldr	r2, [pc, #124]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040be:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c4:	4a1b      	ldr	r2, [pc, #108]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040ce:	4a19      	ldr	r2, [pc, #100]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d016      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fe fc00 	bl	80028e4 <HAL_GetTick>
 80040e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e6:	e00b      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e8:	f7fe fbfc 	bl	80028e4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d902      	bls.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	74fb      	strb	r3, [r7, #19]
            break;
 80040fe:	e006      	b.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004100:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d0ec      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800410e:	7cfb      	ldrb	r3, [r7, #19]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10b      	bne.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004114:	4b07      	ldr	r3, [pc, #28]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004122:	4904      	ldr	r1, [pc, #16]	; (8004134 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004124:	4313      	orrs	r3, r2
 8004126:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800412a:	e009      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800412c:	7cfb      	ldrb	r3, [r7, #19]
 800412e:	74bb      	strb	r3, [r7, #18]
 8004130:	e006      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
 8004138:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004140:	7c7b      	ldrb	r3, [r7, #17]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d105      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004146:	4b9b      	ldr	r3, [pc, #620]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414a:	4a9a      	ldr	r2, [pc, #616]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800414c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004150:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800415e:	4b95      	ldr	r3, [pc, #596]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	f023 0203 	bic.w	r2, r3, #3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	4991      	ldr	r1, [pc, #580]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004180:	4b8c      	ldr	r3, [pc, #560]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004186:	f023 020c 	bic.w	r2, r3, #12
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	4989      	ldr	r1, [pc, #548]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0304 	and.w	r3, r3, #4
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80041a2:	4b84      	ldr	r3, [pc, #528]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b0:	4980      	ldr	r1, [pc, #512]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0320 	and.w	r3, r3, #32
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041c4:	4b7b      	ldr	r3, [pc, #492]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	4978      	ldr	r1, [pc, #480]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041e6:	4b73      	ldr	r3, [pc, #460]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f4:	496f      	ldr	r1, [pc, #444]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00a      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004208:	4b6a      	ldr	r3, [pc, #424]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800420e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4967      	ldr	r1, [pc, #412]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800422a:	4b62      	ldr	r3, [pc, #392]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800422c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004230:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004238:	495e      	ldr	r1, [pc, #376]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00a      	beq.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800424c:	4b59      	ldr	r3, [pc, #356]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004252:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425a:	4956      	ldr	r1, [pc, #344]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800426e:	4b51      	ldr	r3, [pc, #324]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004274:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	494d      	ldr	r1, [pc, #308]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d028      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004290:	4b48      	ldr	r3, [pc, #288]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800429e:	4945      	ldr	r1, [pc, #276]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042ae:	d106      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042b0:	4b40      	ldr	r3, [pc, #256]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	4a3f      	ldr	r2, [pc, #252]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ba:	60d3      	str	r3, [r2, #12]
 80042bc:	e011      	b.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042c6:	d10c      	bne.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3304      	adds	r3, #4
 80042cc:	2101      	movs	r1, #1
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f872 	bl	80043b8 <RCCEx_PLLSAI1_Config>
 80042d4:	4603      	mov	r3, r0
 80042d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042d8:	7cfb      	ldrb	r3, [r7, #19]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80042de:	7cfb      	ldrb	r3, [r7, #19]
 80042e0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d028      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042ee:	4b31      	ldr	r3, [pc, #196]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042fc:	492d      	ldr	r1, [pc, #180]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800430c:	d106      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800430e:	4b29      	ldr	r3, [pc, #164]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4a28      	ldr	r2, [pc, #160]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004318:	60d3      	str	r3, [r2, #12]
 800431a:	e011      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004320:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004324:	d10c      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3304      	adds	r3, #4
 800432a:	2101      	movs	r1, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f000 f843 	bl	80043b8 <RCCEx_PLLSAI1_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01c      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800434c:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435a:	4916      	ldr	r1, [pc, #88]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800435c:	4313      	orrs	r3, r2
 800435e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800436a:	d10c      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	3304      	adds	r3, #4
 8004370:	2102      	movs	r1, #2
 8004372:	4618      	mov	r0, r3
 8004374:	f000 f820 	bl	80043b8 <RCCEx_PLLSAI1_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8004382:	7cfb      	ldrb	r3, [r7, #19]
 8004384:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004392:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	4904      	ldr	r1, [pc, #16]	; (80043b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	40021000 	.word	0x40021000

080043b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043c6:	4b74      	ldr	r3, [pc, #464]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d018      	beq.n	8004404 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043d2:	4b71      	ldr	r3, [pc, #452]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	f003 0203 	and.w	r2, r3, #3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d10d      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
       ||
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d009      	beq.n	80043fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80043ea:	4b6b      	ldr	r3, [pc, #428]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	091b      	lsrs	r3, r3, #4
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
       ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d047      	beq.n	800448e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
 8004402:	e044      	b.n	800448e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b03      	cmp	r3, #3
 800440a:	d018      	beq.n	800443e <RCCEx_PLLSAI1_Config+0x86>
 800440c:	2b03      	cmp	r3, #3
 800440e:	d825      	bhi.n	800445c <RCCEx_PLLSAI1_Config+0xa4>
 8004410:	2b01      	cmp	r3, #1
 8004412:	d002      	beq.n	800441a <RCCEx_PLLSAI1_Config+0x62>
 8004414:	2b02      	cmp	r3, #2
 8004416:	d009      	beq.n	800442c <RCCEx_PLLSAI1_Config+0x74>
 8004418:	e020      	b.n	800445c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800441a:	4b5f      	ldr	r3, [pc, #380]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d11d      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800442a:	e01a      	b.n	8004462 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800442c:	4b5a      	ldr	r3, [pc, #360]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004434:	2b00      	cmp	r3, #0
 8004436:	d116      	bne.n	8004466 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800443c:	e013      	b.n	8004466 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800443e:	4b56      	ldr	r3, [pc, #344]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d10f      	bne.n	800446a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800444a:	4b53      	ldr	r3, [pc, #332]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d109      	bne.n	800446a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800445a:	e006      	b.n	800446a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
      break;
 8004460:	e004      	b.n	800446c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004462:	bf00      	nop
 8004464:	e002      	b.n	800446c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004466:	bf00      	nop
 8004468:	e000      	b.n	800446c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800446a:	bf00      	nop
    }

    if(status == HAL_OK)
 800446c:	7bfb      	ldrb	r3, [r7, #15]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d10d      	bne.n	800448e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004472:	4b49      	ldr	r3, [pc, #292]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	3b01      	subs	r3, #1
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	430b      	orrs	r3, r1
 8004488:	4943      	ldr	r1, [pc, #268]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800448a:	4313      	orrs	r3, r2
 800448c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d17c      	bne.n	800458e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004494:	4b40      	ldr	r3, [pc, #256]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a3f      	ldr	r2, [pc, #252]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800449a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800449e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a0:	f7fe fa20 	bl	80028e4 <HAL_GetTick>
 80044a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044a6:	e009      	b.n	80044bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044a8:	f7fe fa1c 	bl	80028e4 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d902      	bls.n	80044bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	73fb      	strb	r3, [r7, #15]
        break;
 80044ba:	e005      	b.n	80044c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044bc:	4b36      	ldr	r3, [pc, #216]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1ef      	bne.n	80044a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d15f      	bne.n	800458e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d110      	bne.n	80044f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044d4:	4b30      	ldr	r3, [pc, #192]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80044dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6892      	ldr	r2, [r2, #8]
 80044e4:	0211      	lsls	r1, r2, #8
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	68d2      	ldr	r2, [r2, #12]
 80044ea:	06d2      	lsls	r2, r2, #27
 80044ec:	430a      	orrs	r2, r1
 80044ee:	492a      	ldr	r1, [pc, #168]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	610b      	str	r3, [r1, #16]
 80044f4:	e027      	b.n	8004546 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d112      	bne.n	8004522 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044fc:	4b26      	ldr	r3, [pc, #152]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004504:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	6892      	ldr	r2, [r2, #8]
 800450c:	0211      	lsls	r1, r2, #8
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	6912      	ldr	r2, [r2, #16]
 8004512:	0852      	lsrs	r2, r2, #1
 8004514:	3a01      	subs	r2, #1
 8004516:	0552      	lsls	r2, r2, #21
 8004518:	430a      	orrs	r2, r1
 800451a:	491f      	ldr	r1, [pc, #124]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800451c:	4313      	orrs	r3, r2
 800451e:	610b      	str	r3, [r1, #16]
 8004520:	e011      	b.n	8004546 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004522:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800452a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6892      	ldr	r2, [r2, #8]
 8004532:	0211      	lsls	r1, r2, #8
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6952      	ldr	r2, [r2, #20]
 8004538:	0852      	lsrs	r2, r2, #1
 800453a:	3a01      	subs	r2, #1
 800453c:	0652      	lsls	r2, r2, #25
 800453e:	430a      	orrs	r2, r1
 8004540:	4915      	ldr	r1, [pc, #84]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004542:	4313      	orrs	r3, r2
 8004544:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004546:	4b14      	ldr	r3, [pc, #80]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a13      	ldr	r2, [pc, #76]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800454c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004550:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004552:	f7fe f9c7 	bl	80028e4 <HAL_GetTick>
 8004556:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004558:	e009      	b.n	800456e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800455a:	f7fe f9c3 	bl	80028e4 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	2b02      	cmp	r3, #2
 8004566:	d902      	bls.n	800456e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	73fb      	strb	r3, [r7, #15]
          break;
 800456c:	e005      	b.n	800457a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800456e:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0ef      	beq.n	800455a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d106      	bne.n	800458e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004580:	4b05      	ldr	r3, [pc, #20]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	4903      	ldr	r1, [pc, #12]	; (8004598 <RCCEx_PLLSAI1_Config+0x1e0>)
 800458a:	4313      	orrs	r3, r2
 800458c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800458e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000

0800459c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d079      	beq.n	80046a2 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7fd ff5e 	bl	8002484 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d058      	beq.n	8004690 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	22ca      	movs	r2, #202	; 0xca
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	2253      	movs	r2, #83	; 0x53
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f9c6 	bl	8004980 <RTC_EnterInitMode>
 80045f4:	4603      	mov	r3, r0
 80045f6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d127      	bne.n	800464e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800460c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004610:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6899      	ldr	r1, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	685a      	ldr	r2, [r3, #4]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	431a      	orrs	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	431a      	orrs	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	68d2      	ldr	r2, [r2, #12]
 8004638:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6919      	ldr	r1, [r3, #16]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	041a      	lsls	r2, r3, #16
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f9ca 	bl	80049e8 <RTC_ExitInitMode>
 8004654:	4603      	mov	r3, r0
 8004656:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004658:	7bfb      	ldrb	r3, [r7, #15]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d113      	bne.n	8004686 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f022 0203 	bic.w	r2, r2, #3
 800466c:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	22ff      	movs	r2, #255	; 0xff
 800468c:	625a      	str	r2, [r3, #36]	; 0x24
 800468e:	e001      	b.n	8004694 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004694:	7bfb      	ldrb	r3, [r7, #15]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d103      	bne.n	80046a2 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  return status;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80046ac:	b590      	push	{r4, r7, lr}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d101      	bne.n	80046c6 <HAL_RTC_SetTime+0x1a>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e08b      	b.n	80047de <HAL_RTC_SetTime+0x132>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2202      	movs	r2, #2
 80046d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	22ca      	movs	r2, #202	; 0xca
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2253      	movs	r2, #83	; 0x53
 80046e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f94a 	bl	8004980 <RTC_EnterInitMode>
 80046ec:	4603      	mov	r3, r0
 80046ee:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80046f0:	7cfb      	ldrb	r3, [r7, #19]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d163      	bne.n	80047be <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d126      	bne.n	800474a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004706:	2b00      	cmp	r3, #0
 8004708:	d102      	bne.n	8004710 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2200      	movs	r2, #0
 800470e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f000 f9a5 	bl	8004a64 <RTC_ByteToBcd2>
 800471a:	4603      	mov	r3, r0
 800471c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	785b      	ldrb	r3, [r3, #1]
 8004722:	4618      	mov	r0, r3
 8004724:	f000 f99e 	bl	8004a64 <RTC_ByteToBcd2>
 8004728:	4603      	mov	r3, r0
 800472a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800472c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	789b      	ldrb	r3, [r3, #2]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 f996 	bl	8004a64 <RTC_ByteToBcd2>
 8004738:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800473a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	78db      	ldrb	r3, [r3, #3]
 8004742:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004744:	4313      	orrs	r3, r2
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	e018      	b.n	800477c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	689b      	ldr	r3, [r3, #8]
 8004750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004754:	2b00      	cmp	r3, #0
 8004756:	d102      	bne.n	800475e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2200      	movs	r2, #0
 800475c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	785b      	ldrb	r3, [r3, #1]
 8004768:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800476a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004770:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	78db      	ldrb	r3, [r3, #3]
 8004776:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004778:	4313      	orrs	r3, r2
 800477a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004786:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800478a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800479a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6899      	ldr	r1, [r3, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	68da      	ldr	r2, [r3, #12]
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f917 	bl	80049e8 <RTC_ExitInitMode>
 80047ba:	4603      	mov	r3, r0
 80047bc:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	22ff      	movs	r2, #255	; 0xff
 80047c4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80047c6:	7cfb      	ldrb	r3, [r7, #19]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d103      	bne.n	80047d4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80047dc:	7cfb      	ldrb	r3, [r7, #19]
}
 80047de:	4618      	mov	r0, r3
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd90      	pop	{r4, r7, pc}

080047e6 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b086      	sub	sp, #24
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	60f8      	str	r0, [r7, #12]
 80047ee:	60b9      	str	r1, [r7, #8]
 80047f0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004814:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004818:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	0c1b      	lsrs	r3, r3, #16
 800481e:	b2db      	uxtb	r3, r3
 8004820:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004824:	b2da      	uxtb	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	0a1b      	lsrs	r3, r3, #8
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004834:	b2da      	uxtb	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004842:	b2da      	uxtb	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	0d9b      	lsrs	r3, r3, #22
 800484c:	b2db      	uxtb	r3, r3
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	b2da      	uxtb	r2, r3
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d11a      	bne.n	8004894 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f000 f91e 	bl	8004aa4 <RTC_Bcd2ToByte>
 8004868:	4603      	mov	r3, r0
 800486a:	461a      	mov	r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	785b      	ldrb	r3, [r3, #1]
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f915 	bl	8004aa4 <RTC_Bcd2ToByte>
 800487a:	4603      	mov	r3, r0
 800487c:	461a      	mov	r2, r3
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	789b      	ldrb	r3, [r3, #2]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f90c 	bl	8004aa4 <RTC_Bcd2ToByte>
 800488c:	4603      	mov	r3, r0
 800488e:	461a      	mov	r2, r3
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	4618      	mov	r0, r3
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}

0800489e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800489e:	b580      	push	{r7, lr}
 80048a0:	b086      	sub	sp, #24
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	0a1b      	lsrs	r3, r3, #8
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	b2da      	uxtb	r2, r3
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	0b5b      	lsrs	r3, r3, #13
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d11a      	bne.n	800492e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	78db      	ldrb	r3, [r3, #3]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f000 f8d1 	bl	8004aa4 <RTC_Bcd2ToByte>
 8004902:	4603      	mov	r3, r0
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	785b      	ldrb	r3, [r3, #1]
 800490e:	4618      	mov	r0, r3
 8004910:	f000 f8c8 	bl	8004aa4 <RTC_Bcd2ToByte>
 8004914:	4603      	mov	r3, r0
 8004916:	461a      	mov	r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	789b      	ldrb	r3, [r3, #2]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 f8bf 	bl	8004aa4 <RTC_Bcd2ToByte>
 8004926:	4603      	mov	r3, r0
 8004928:	461a      	mov	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3718      	adds	r7, #24
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a0d      	ldr	r2, [pc, #52]	; (800497c <HAL_RTC_WaitForSynchro+0x44>)
 8004946:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004948:	f7fd ffcc 	bl	80028e4 <HAL_GetTick>
 800494c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800494e:	e009      	b.n	8004964 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004950:	f7fd ffc8 	bl	80028e4 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800495e:	d901      	bls.n	8004964 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004960:	2303      	movs	r3, #3
 8004962:	e007      	b.n	8004974 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0320 	and.w	r3, r3, #32
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0ee      	beq.n	8004950 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	0003ff5f 	.word	0x0003ff5f

08004980 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004988:	2300      	movs	r3, #0
 800498a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d120      	bne.n	80049dc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f04f 32ff 	mov.w	r2, #4294967295
 80049a2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80049a4:	f7fd ff9e 	bl	80028e4 <HAL_GetTick>
 80049a8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049aa:	e00d      	b.n	80049c8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80049ac:	f7fd ff9a 	bl	80028e4 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ba:	d905      	bls.n	80049c8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2203      	movs	r2, #3
 80049c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d102      	bne.n	80049dc <RTC_EnterInitMode+0x5c>
 80049d6:	7bfb      	ldrb	r3, [r7, #15]
 80049d8:	2b03      	cmp	r3, #3
 80049da:	d1e7      	bne.n	80049ac <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
	...

080049e8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80049f4:	4b1a      	ldr	r3, [pc, #104]	; (8004a60 <RTC_ExitInitMode+0x78>)
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	4a19      	ldr	r2, [pc, #100]	; (8004a60 <RTC_ExitInitMode+0x78>)
 80049fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fe:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004a00:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <RTC_ExitInitMode+0x78>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0320 	and.w	r3, r3, #32
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10c      	bne.n	8004a26 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ff93 	bl	8004938 <HAL_RTC_WaitForSynchro>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01e      	beq.n	8004a56 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2203      	movs	r2, #3
 8004a1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	73fb      	strb	r3, [r7, #15]
 8004a24:	e017      	b.n	8004a56 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a26:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <RTC_ExitInitMode+0x78>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	4a0d      	ldr	r2, [pc, #52]	; (8004a60 <RTC_ExitInitMode+0x78>)
 8004a2c:	f023 0320 	bic.w	r3, r3, #32
 8004a30:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7ff ff80 	bl	8004938 <HAL_RTC_WaitForSynchro>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2203      	movs	r2, #3
 8004a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004a4a:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <RTC_ExitInitMode+0x78>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <RTC_ExitInitMode+0x78>)
 8004a50:	f043 0320 	orr.w	r3, r3, #32
 8004a54:	6093      	str	r3, [r2, #8]
  }

  return status;
 8004a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3710      	adds	r7, #16
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}
 8004a60:	40002800 	.word	0x40002800

08004a64 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004a72:	79fb      	ldrb	r3, [r7, #7]
 8004a74:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8004a76:	e005      	b.n	8004a84 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004a7e:	7afb      	ldrb	r3, [r7, #11]
 8004a80:	3b0a      	subs	r3, #10
 8004a82:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004a84:	7afb      	ldrb	r3, [r7, #11]
 8004a86:	2b09      	cmp	r3, #9
 8004a88:	d8f6      	bhi.n	8004a78 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	7afb      	ldrb	r3, [r7, #11]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	b2db      	uxtb	r3, r3
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004aae:	79fb      	ldrb	r3, [r7, #7]
 8004ab0:	091b      	lsrs	r3, r3, #4
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	0092      	lsls	r2, r2, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	4413      	add	r3, r2
 8004aca:	b2db      	uxtb	r3, r3
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e049      	b.n	8004b7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd fcf0 	bl	80024e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f000 f9e4 	bl	8004ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}
	...

08004b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d001      	beq.n	8004ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e03b      	b.n	8004c18 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a19      	ldr	r2, [pc, #100]	; (8004c24 <HAL_TIM_Base_Start_IT+0x9c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0x4e>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bca:	d004      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0x4e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a15      	ldr	r2, [pc, #84]	; (8004c28 <HAL_TIM_Base_Start_IT+0xa0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d115      	bne.n	8004c02 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <HAL_TIM_Base_Start_IT+0xa4>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d015      	beq.n	8004c14 <HAL_TIM_Base_Start_IT+0x8c>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bee:	d011      	beq.n	8004c14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c00:	e008      	b.n	8004c14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0201 	orr.w	r2, r2, #1
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	e000      	b.n	8004c16 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c14:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	40012c00 	.word	0x40012c00
 8004c28:	40014000 	.word	0x40014000
 8004c2c:	00010007 	.word	0x00010007

08004c30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68da      	ldr	r2, [r3, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f022 0201 	bic.w	r2, r2, #1
 8004c46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6a1a      	ldr	r2, [r3, #32]
 8004c4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c52:	4013      	ands	r3, r2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10f      	bne.n	8004c78 <HAL_TIM_Base_Stop_IT+0x48>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6a1a      	ldr	r2, [r3, #32]
 8004c5e:	f240 4344 	movw	r3, #1092	; 0x444
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d107      	bne.n	8004c78 <HAL_TIM_Base_Stop_IT+0x48>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f022 0201 	bic.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr

08004c8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b084      	sub	sp, #16
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f003 0302 	and.w	r3, r3, #2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d020      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01b      	beq.n	8004cf2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f06f 0202 	mvn.w	r2, #2
 8004cc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f8e4 	bl	8004ea6 <HAL_TIM_IC_CaptureCallback>
 8004cde:	e005      	b.n	8004cec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f8d6 	bl	8004e92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f8e7 	bl	8004eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f003 0304 	and.w	r3, r3, #4
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d020      	beq.n	8004d3e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0304 	and.w	r3, r3, #4
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d01b      	beq.n	8004d3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f06f 0204 	mvn.w	r2, #4
 8004d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d003      	beq.n	8004d2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f8be 	bl	8004ea6 <HAL_TIM_IC_CaptureCallback>
 8004d2a:	e005      	b.n	8004d38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 f8b0 	bl	8004e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f8c1 	bl	8004eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d020      	beq.n	8004d8a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d01b      	beq.n	8004d8a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f06f 0208 	mvn.w	r2, #8
 8004d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2204      	movs	r2, #4
 8004d60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f898 	bl	8004ea6 <HAL_TIM_IC_CaptureCallback>
 8004d76:	e005      	b.n	8004d84 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f88a 	bl	8004e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f89b 	bl	8004eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f003 0310 	and.w	r3, r3, #16
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d020      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01b      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f06f 0210 	mvn.w	r2, #16
 8004da6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2208      	movs	r2, #8
 8004dac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f872 	bl	8004ea6 <HAL_TIM_IC_CaptureCallback>
 8004dc2:	e005      	b.n	8004dd0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f864 	bl	8004e92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f875 	bl	8004eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00c      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d007      	beq.n	8004dfa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f06f 0201 	mvn.w	r2, #1
 8004df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7fb ff6b 	bl	8000cd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00c      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 f937 	bl	800508c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00c      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d007      	beq.n	8004e42 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f92f 	bl	80050a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00c      	beq.n	8004e66 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d007      	beq.n	8004e66 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 f834 	bl	8004ece <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	f003 0320 	and.w	r3, r3, #32
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00c      	beq.n	8004e8a <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d007      	beq.n	8004e8a <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f06f 0220 	mvn.w	r2, #32
 8004e82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f8f7 	bl	8005078 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e8a:	bf00      	nop
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e92:	b480      	push	{r7}
 8004e94:	b083      	sub	sp, #12
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a2a      	ldr	r2, [pc, #168]	; (8004fa0 <TIM_Base_SetConfig+0xbc>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d003      	beq.n	8004f04 <TIM_Base_SetConfig+0x20>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f02:	d108      	bne.n	8004f16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <TIM_Base_SetConfig+0xbc>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d00b      	beq.n	8004f36 <TIM_Base_SetConfig+0x52>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f24:	d007      	beq.n	8004f36 <TIM_Base_SetConfig+0x52>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a1e      	ldr	r2, [pc, #120]	; (8004fa4 <TIM_Base_SetConfig+0xc0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d003      	beq.n	8004f36 <TIM_Base_SetConfig+0x52>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a1d      	ldr	r2, [pc, #116]	; (8004fa8 <TIM_Base_SetConfig+0xc4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d108      	bne.n	8004f48 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a0c      	ldr	r2, [pc, #48]	; (8004fa0 <TIM_Base_SetConfig+0xbc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d007      	beq.n	8004f84 <TIM_Base_SetConfig+0xa0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a0b      	ldr	r2, [pc, #44]	; (8004fa4 <TIM_Base_SetConfig+0xc0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <TIM_Base_SetConfig+0xa0>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a0a      	ldr	r2, [pc, #40]	; (8004fa8 <TIM_Base_SetConfig+0xc4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d103      	bne.n	8004f8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	615a      	str	r2, [r3, #20]
}
 8004f92:	bf00      	nop
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40014000 	.word	0x40014000
 8004fa8:	40014400 	.word	0x40014400

08004fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d101      	bne.n	8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	e04f      	b.n	8005064 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a21      	ldr	r2, [pc, #132]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d108      	bne.n	8005000 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004ff4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005006:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a14      	ldr	r2, [pc, #80]	; (8005070 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d009      	beq.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800502c:	d004      	beq.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a10      	ldr	r2, [pc, #64]	; (8005074 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d10c      	bne.n	8005052 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	68ba      	ldr	r2, [r7, #8]
 8005046:	4313      	orrs	r3, r2
 8005048:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3714      	adds	r7, #20
 8005068:	46bd      	mov	sp, r7
 800506a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506e:	4770      	bx	lr
 8005070:	40012c00 	.word	0x40012c00
 8005074:	40014000 	.word	0x40014000

08005078 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <_ZdlPvj>:
 80050b4:	f000 b811 	b.w	80050da <_ZdlPv>

080050b8 <_Znwj>:
 80050b8:	2801      	cmp	r0, #1
 80050ba:	bf38      	it	cc
 80050bc:	2001      	movcc	r0, #1
 80050be:	b510      	push	{r4, lr}
 80050c0:	4604      	mov	r4, r0
 80050c2:	4620      	mov	r0, r4
 80050c4:	f000 f81c 	bl	8005100 <malloc>
 80050c8:	b100      	cbz	r0, 80050cc <_Znwj+0x14>
 80050ca:	bd10      	pop	{r4, pc}
 80050cc:	f000 f808 	bl	80050e0 <_ZSt15get_new_handlerv>
 80050d0:	b908      	cbnz	r0, 80050d6 <_Znwj+0x1e>
 80050d2:	f000 f80d 	bl	80050f0 <abort>
 80050d6:	4780      	blx	r0
 80050d8:	e7f3      	b.n	80050c2 <_Znwj+0xa>

080050da <_ZdlPv>:
 80050da:	f000 b819 	b.w	8005110 <free>
	...

080050e0 <_ZSt15get_new_handlerv>:
 80050e0:	4b02      	ldr	r3, [pc, #8]	; (80050ec <_ZSt15get_new_handlerv+0xc>)
 80050e2:	6818      	ldr	r0, [r3, #0]
 80050e4:	f3bf 8f5b 	dmb	ish
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000238 	.word	0x20000238

080050f0 <abort>:
 80050f0:	b508      	push	{r3, lr}
 80050f2:	2006      	movs	r0, #6
 80050f4:	f000 fa08 	bl	8005508 <raise>
 80050f8:	2001      	movs	r0, #1
 80050fa:	f7fd faa1 	bl	8002640 <_exit>
	...

08005100 <malloc>:
 8005100:	4b02      	ldr	r3, [pc, #8]	; (800510c <malloc+0xc>)
 8005102:	4601      	mov	r1, r0
 8005104:	6818      	ldr	r0, [r3, #0]
 8005106:	f000 b82b 	b.w	8005160 <_malloc_r>
 800510a:	bf00      	nop
 800510c:	2000013c 	.word	0x2000013c

08005110 <free>:
 8005110:	4b02      	ldr	r3, [pc, #8]	; (800511c <free+0xc>)
 8005112:	4601      	mov	r1, r0
 8005114:	6818      	ldr	r0, [r3, #0]
 8005116:	f000 ba97 	b.w	8005648 <_free_r>
 800511a:	bf00      	nop
 800511c:	2000013c 	.word	0x2000013c

08005120 <sbrk_aligned>:
 8005120:	b570      	push	{r4, r5, r6, lr}
 8005122:	4e0e      	ldr	r6, [pc, #56]	; (800515c <sbrk_aligned+0x3c>)
 8005124:	460c      	mov	r4, r1
 8005126:	6831      	ldr	r1, [r6, #0]
 8005128:	4605      	mov	r5, r0
 800512a:	b911      	cbnz	r1, 8005132 <sbrk_aligned+0x12>
 800512c:	f000 fa3c 	bl	80055a8 <_sbrk_r>
 8005130:	6030      	str	r0, [r6, #0]
 8005132:	4621      	mov	r1, r4
 8005134:	4628      	mov	r0, r5
 8005136:	f000 fa37 	bl	80055a8 <_sbrk_r>
 800513a:	1c43      	adds	r3, r0, #1
 800513c:	d00a      	beq.n	8005154 <sbrk_aligned+0x34>
 800513e:	1cc4      	adds	r4, r0, #3
 8005140:	f024 0403 	bic.w	r4, r4, #3
 8005144:	42a0      	cmp	r0, r4
 8005146:	d007      	beq.n	8005158 <sbrk_aligned+0x38>
 8005148:	1a21      	subs	r1, r4, r0
 800514a:	4628      	mov	r0, r5
 800514c:	f000 fa2c 	bl	80055a8 <_sbrk_r>
 8005150:	3001      	adds	r0, #1
 8005152:	d101      	bne.n	8005158 <sbrk_aligned+0x38>
 8005154:	f04f 34ff 	mov.w	r4, #4294967295
 8005158:	4620      	mov	r0, r4
 800515a:	bd70      	pop	{r4, r5, r6, pc}
 800515c:	20000240 	.word	0x20000240

08005160 <_malloc_r>:
 8005160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005164:	1ccd      	adds	r5, r1, #3
 8005166:	f025 0503 	bic.w	r5, r5, #3
 800516a:	3508      	adds	r5, #8
 800516c:	2d0c      	cmp	r5, #12
 800516e:	bf38      	it	cc
 8005170:	250c      	movcc	r5, #12
 8005172:	2d00      	cmp	r5, #0
 8005174:	4607      	mov	r7, r0
 8005176:	db01      	blt.n	800517c <_malloc_r+0x1c>
 8005178:	42a9      	cmp	r1, r5
 800517a:	d905      	bls.n	8005188 <_malloc_r+0x28>
 800517c:	230c      	movs	r3, #12
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	2600      	movs	r6, #0
 8005182:	4630      	mov	r0, r6
 8005184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005188:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800525c <_malloc_r+0xfc>
 800518c:	f000 f868 	bl	8005260 <__malloc_lock>
 8005190:	f8d8 3000 	ldr.w	r3, [r8]
 8005194:	461c      	mov	r4, r3
 8005196:	bb5c      	cbnz	r4, 80051f0 <_malloc_r+0x90>
 8005198:	4629      	mov	r1, r5
 800519a:	4638      	mov	r0, r7
 800519c:	f7ff ffc0 	bl	8005120 <sbrk_aligned>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	4604      	mov	r4, r0
 80051a4:	d155      	bne.n	8005252 <_malloc_r+0xf2>
 80051a6:	f8d8 4000 	ldr.w	r4, [r8]
 80051aa:	4626      	mov	r6, r4
 80051ac:	2e00      	cmp	r6, #0
 80051ae:	d145      	bne.n	800523c <_malloc_r+0xdc>
 80051b0:	2c00      	cmp	r4, #0
 80051b2:	d048      	beq.n	8005246 <_malloc_r+0xe6>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	4631      	mov	r1, r6
 80051b8:	4638      	mov	r0, r7
 80051ba:	eb04 0903 	add.w	r9, r4, r3
 80051be:	f000 f9f3 	bl	80055a8 <_sbrk_r>
 80051c2:	4581      	cmp	r9, r0
 80051c4:	d13f      	bne.n	8005246 <_malloc_r+0xe6>
 80051c6:	6821      	ldr	r1, [r4, #0]
 80051c8:	1a6d      	subs	r5, r5, r1
 80051ca:	4629      	mov	r1, r5
 80051cc:	4638      	mov	r0, r7
 80051ce:	f7ff ffa7 	bl	8005120 <sbrk_aligned>
 80051d2:	3001      	adds	r0, #1
 80051d4:	d037      	beq.n	8005246 <_malloc_r+0xe6>
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	442b      	add	r3, r5
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	f8d8 3000 	ldr.w	r3, [r8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d038      	beq.n	8005256 <_malloc_r+0xf6>
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	42a2      	cmp	r2, r4
 80051e8:	d12b      	bne.n	8005242 <_malloc_r+0xe2>
 80051ea:	2200      	movs	r2, #0
 80051ec:	605a      	str	r2, [r3, #4]
 80051ee:	e00f      	b.n	8005210 <_malloc_r+0xb0>
 80051f0:	6822      	ldr	r2, [r4, #0]
 80051f2:	1b52      	subs	r2, r2, r5
 80051f4:	d41f      	bmi.n	8005236 <_malloc_r+0xd6>
 80051f6:	2a0b      	cmp	r2, #11
 80051f8:	d917      	bls.n	800522a <_malloc_r+0xca>
 80051fa:	1961      	adds	r1, r4, r5
 80051fc:	42a3      	cmp	r3, r4
 80051fe:	6025      	str	r5, [r4, #0]
 8005200:	bf18      	it	ne
 8005202:	6059      	strne	r1, [r3, #4]
 8005204:	6863      	ldr	r3, [r4, #4]
 8005206:	bf08      	it	eq
 8005208:	f8c8 1000 	streq.w	r1, [r8]
 800520c:	5162      	str	r2, [r4, r5]
 800520e:	604b      	str	r3, [r1, #4]
 8005210:	4638      	mov	r0, r7
 8005212:	f104 060b 	add.w	r6, r4, #11
 8005216:	f000 f829 	bl	800526c <__malloc_unlock>
 800521a:	f026 0607 	bic.w	r6, r6, #7
 800521e:	1d23      	adds	r3, r4, #4
 8005220:	1af2      	subs	r2, r6, r3
 8005222:	d0ae      	beq.n	8005182 <_malloc_r+0x22>
 8005224:	1b9b      	subs	r3, r3, r6
 8005226:	50a3      	str	r3, [r4, r2]
 8005228:	e7ab      	b.n	8005182 <_malloc_r+0x22>
 800522a:	42a3      	cmp	r3, r4
 800522c:	6862      	ldr	r2, [r4, #4]
 800522e:	d1dd      	bne.n	80051ec <_malloc_r+0x8c>
 8005230:	f8c8 2000 	str.w	r2, [r8]
 8005234:	e7ec      	b.n	8005210 <_malloc_r+0xb0>
 8005236:	4623      	mov	r3, r4
 8005238:	6864      	ldr	r4, [r4, #4]
 800523a:	e7ac      	b.n	8005196 <_malloc_r+0x36>
 800523c:	4634      	mov	r4, r6
 800523e:	6876      	ldr	r6, [r6, #4]
 8005240:	e7b4      	b.n	80051ac <_malloc_r+0x4c>
 8005242:	4613      	mov	r3, r2
 8005244:	e7cc      	b.n	80051e0 <_malloc_r+0x80>
 8005246:	230c      	movs	r3, #12
 8005248:	603b      	str	r3, [r7, #0]
 800524a:	4638      	mov	r0, r7
 800524c:	f000 f80e 	bl	800526c <__malloc_unlock>
 8005250:	e797      	b.n	8005182 <_malloc_r+0x22>
 8005252:	6025      	str	r5, [r4, #0]
 8005254:	e7dc      	b.n	8005210 <_malloc_r+0xb0>
 8005256:	605b      	str	r3, [r3, #4]
 8005258:	deff      	udf	#255	; 0xff
 800525a:	bf00      	nop
 800525c:	2000023c 	.word	0x2000023c

08005260 <__malloc_lock>:
 8005260:	4801      	ldr	r0, [pc, #4]	; (8005268 <__malloc_lock+0x8>)
 8005262:	f000 b9ee 	b.w	8005642 <__retarget_lock_acquire_recursive>
 8005266:	bf00      	nop
 8005268:	20000384 	.word	0x20000384

0800526c <__malloc_unlock>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__malloc_unlock+0x8>)
 800526e:	f000 b9e9 	b.w	8005644 <__retarget_lock_release_recursive>
 8005272:	bf00      	nop
 8005274:	20000384 	.word	0x20000384

08005278 <std>:
 8005278:	2300      	movs	r3, #0
 800527a:	b510      	push	{r4, lr}
 800527c:	4604      	mov	r4, r0
 800527e:	e9c0 3300 	strd	r3, r3, [r0]
 8005282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005286:	6083      	str	r3, [r0, #8]
 8005288:	8181      	strh	r1, [r0, #12]
 800528a:	6643      	str	r3, [r0, #100]	; 0x64
 800528c:	81c2      	strh	r2, [r0, #14]
 800528e:	6183      	str	r3, [r0, #24]
 8005290:	4619      	mov	r1, r3
 8005292:	2208      	movs	r2, #8
 8005294:	305c      	adds	r0, #92	; 0x5c
 8005296:	f000 f906 	bl	80054a6 <memset>
 800529a:	4b0d      	ldr	r3, [pc, #52]	; (80052d0 <std+0x58>)
 800529c:	6263      	str	r3, [r4, #36]	; 0x24
 800529e:	4b0d      	ldr	r3, [pc, #52]	; (80052d4 <std+0x5c>)
 80052a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80052a2:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <std+0x60>)
 80052a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <std+0x64>)
 80052a8:	6323      	str	r3, [r4, #48]	; 0x30
 80052aa:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <std+0x68>)
 80052ac:	6224      	str	r4, [r4, #32]
 80052ae:	429c      	cmp	r4, r3
 80052b0:	d006      	beq.n	80052c0 <std+0x48>
 80052b2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80052b6:	4294      	cmp	r4, r2
 80052b8:	d002      	beq.n	80052c0 <std+0x48>
 80052ba:	33d0      	adds	r3, #208	; 0xd0
 80052bc:	429c      	cmp	r4, r3
 80052be:	d105      	bne.n	80052cc <std+0x54>
 80052c0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80052c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c8:	f000 b9ba 	b.w	8005640 <__retarget_lock_init_recursive>
 80052cc:	bd10      	pop	{r4, pc}
 80052ce:	bf00      	nop
 80052d0:	08005421 	.word	0x08005421
 80052d4:	08005443 	.word	0x08005443
 80052d8:	0800547b 	.word	0x0800547b
 80052dc:	0800549f 	.word	0x0800549f
 80052e0:	20000244 	.word	0x20000244

080052e4 <stdio_exit_handler>:
 80052e4:	4a02      	ldr	r2, [pc, #8]	; (80052f0 <stdio_exit_handler+0xc>)
 80052e6:	4903      	ldr	r1, [pc, #12]	; (80052f4 <stdio_exit_handler+0x10>)
 80052e8:	4803      	ldr	r0, [pc, #12]	; (80052f8 <stdio_exit_handler+0x14>)
 80052ea:	f000 b869 	b.w	80053c0 <_fwalk_sglue>
 80052ee:	bf00      	nop
 80052f0:	200000e4 	.word	0x200000e4
 80052f4:	08005d95 	.word	0x08005d95
 80052f8:	200000f0 	.word	0x200000f0

080052fc <cleanup_stdio>:
 80052fc:	6841      	ldr	r1, [r0, #4]
 80052fe:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <cleanup_stdio+0x34>)
 8005300:	4299      	cmp	r1, r3
 8005302:	b510      	push	{r4, lr}
 8005304:	4604      	mov	r4, r0
 8005306:	d001      	beq.n	800530c <cleanup_stdio+0x10>
 8005308:	f000 fd44 	bl	8005d94 <_fflush_r>
 800530c:	68a1      	ldr	r1, [r4, #8]
 800530e:	4b09      	ldr	r3, [pc, #36]	; (8005334 <cleanup_stdio+0x38>)
 8005310:	4299      	cmp	r1, r3
 8005312:	d002      	beq.n	800531a <cleanup_stdio+0x1e>
 8005314:	4620      	mov	r0, r4
 8005316:	f000 fd3d 	bl	8005d94 <_fflush_r>
 800531a:	68e1      	ldr	r1, [r4, #12]
 800531c:	4b06      	ldr	r3, [pc, #24]	; (8005338 <cleanup_stdio+0x3c>)
 800531e:	4299      	cmp	r1, r3
 8005320:	d004      	beq.n	800532c <cleanup_stdio+0x30>
 8005322:	4620      	mov	r0, r4
 8005324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005328:	f000 bd34 	b.w	8005d94 <_fflush_r>
 800532c:	bd10      	pop	{r4, pc}
 800532e:	bf00      	nop
 8005330:	20000244 	.word	0x20000244
 8005334:	200002ac 	.word	0x200002ac
 8005338:	20000314 	.word	0x20000314

0800533c <global_stdio_init.part.0>:
 800533c:	b510      	push	{r4, lr}
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <global_stdio_init.part.0+0x30>)
 8005340:	4c0b      	ldr	r4, [pc, #44]	; (8005370 <global_stdio_init.part.0+0x34>)
 8005342:	4a0c      	ldr	r2, [pc, #48]	; (8005374 <global_stdio_init.part.0+0x38>)
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	4620      	mov	r0, r4
 8005348:	2200      	movs	r2, #0
 800534a:	2104      	movs	r1, #4
 800534c:	f7ff ff94 	bl	8005278 <std>
 8005350:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005354:	2201      	movs	r2, #1
 8005356:	2109      	movs	r1, #9
 8005358:	f7ff ff8e 	bl	8005278 <std>
 800535c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005360:	2202      	movs	r2, #2
 8005362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005366:	2112      	movs	r1, #18
 8005368:	f7ff bf86 	b.w	8005278 <std>
 800536c:	2000037c 	.word	0x2000037c
 8005370:	20000244 	.word	0x20000244
 8005374:	080052e5 	.word	0x080052e5

08005378 <__sfp_lock_acquire>:
 8005378:	4801      	ldr	r0, [pc, #4]	; (8005380 <__sfp_lock_acquire+0x8>)
 800537a:	f000 b962 	b.w	8005642 <__retarget_lock_acquire_recursive>
 800537e:	bf00      	nop
 8005380:	20000385 	.word	0x20000385

08005384 <__sfp_lock_release>:
 8005384:	4801      	ldr	r0, [pc, #4]	; (800538c <__sfp_lock_release+0x8>)
 8005386:	f000 b95d 	b.w	8005644 <__retarget_lock_release_recursive>
 800538a:	bf00      	nop
 800538c:	20000385 	.word	0x20000385

08005390 <__sinit>:
 8005390:	b510      	push	{r4, lr}
 8005392:	4604      	mov	r4, r0
 8005394:	f7ff fff0 	bl	8005378 <__sfp_lock_acquire>
 8005398:	6a23      	ldr	r3, [r4, #32]
 800539a:	b11b      	cbz	r3, 80053a4 <__sinit+0x14>
 800539c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053a0:	f7ff bff0 	b.w	8005384 <__sfp_lock_release>
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <__sinit+0x28>)
 80053a6:	6223      	str	r3, [r4, #32]
 80053a8:	4b04      	ldr	r3, [pc, #16]	; (80053bc <__sinit+0x2c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1f5      	bne.n	800539c <__sinit+0xc>
 80053b0:	f7ff ffc4 	bl	800533c <global_stdio_init.part.0>
 80053b4:	e7f2      	b.n	800539c <__sinit+0xc>
 80053b6:	bf00      	nop
 80053b8:	080052fd 	.word	0x080052fd
 80053bc:	2000037c 	.word	0x2000037c

080053c0 <_fwalk_sglue>:
 80053c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c4:	4607      	mov	r7, r0
 80053c6:	4688      	mov	r8, r1
 80053c8:	4614      	mov	r4, r2
 80053ca:	2600      	movs	r6, #0
 80053cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053d0:	f1b9 0901 	subs.w	r9, r9, #1
 80053d4:	d505      	bpl.n	80053e2 <_fwalk_sglue+0x22>
 80053d6:	6824      	ldr	r4, [r4, #0]
 80053d8:	2c00      	cmp	r4, #0
 80053da:	d1f7      	bne.n	80053cc <_fwalk_sglue+0xc>
 80053dc:	4630      	mov	r0, r6
 80053de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053e2:	89ab      	ldrh	r3, [r5, #12]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d907      	bls.n	80053f8 <_fwalk_sglue+0x38>
 80053e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053ec:	3301      	adds	r3, #1
 80053ee:	d003      	beq.n	80053f8 <_fwalk_sglue+0x38>
 80053f0:	4629      	mov	r1, r5
 80053f2:	4638      	mov	r0, r7
 80053f4:	47c0      	blx	r8
 80053f6:	4306      	orrs	r6, r0
 80053f8:	3568      	adds	r5, #104	; 0x68
 80053fa:	e7e9      	b.n	80053d0 <_fwalk_sglue+0x10>

080053fc <iprintf>:
 80053fc:	b40f      	push	{r0, r1, r2, r3}
 80053fe:	b507      	push	{r0, r1, r2, lr}
 8005400:	4906      	ldr	r1, [pc, #24]	; (800541c <iprintf+0x20>)
 8005402:	ab04      	add	r3, sp, #16
 8005404:	6808      	ldr	r0, [r1, #0]
 8005406:	f853 2b04 	ldr.w	r2, [r3], #4
 800540a:	6881      	ldr	r1, [r0, #8]
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	f000 f991 	bl	8005734 <_vfiprintf_r>
 8005412:	b003      	add	sp, #12
 8005414:	f85d eb04 	ldr.w	lr, [sp], #4
 8005418:	b004      	add	sp, #16
 800541a:	4770      	bx	lr
 800541c:	2000013c 	.word	0x2000013c

08005420 <__sread>:
 8005420:	b510      	push	{r4, lr}
 8005422:	460c      	mov	r4, r1
 8005424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005428:	f000 f898 	bl	800555c <_read_r>
 800542c:	2800      	cmp	r0, #0
 800542e:	bfab      	itete	ge
 8005430:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005432:	89a3      	ldrhlt	r3, [r4, #12]
 8005434:	181b      	addge	r3, r3, r0
 8005436:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800543a:	bfac      	ite	ge
 800543c:	6563      	strge	r3, [r4, #84]	; 0x54
 800543e:	81a3      	strhlt	r3, [r4, #12]
 8005440:	bd10      	pop	{r4, pc}

08005442 <__swrite>:
 8005442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005446:	461f      	mov	r7, r3
 8005448:	898b      	ldrh	r3, [r1, #12]
 800544a:	05db      	lsls	r3, r3, #23
 800544c:	4605      	mov	r5, r0
 800544e:	460c      	mov	r4, r1
 8005450:	4616      	mov	r6, r2
 8005452:	d505      	bpl.n	8005460 <__swrite+0x1e>
 8005454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005458:	2302      	movs	r3, #2
 800545a:	2200      	movs	r2, #0
 800545c:	f000 f86c 	bl	8005538 <_lseek_r>
 8005460:	89a3      	ldrh	r3, [r4, #12]
 8005462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800546a:	81a3      	strh	r3, [r4, #12]
 800546c:	4632      	mov	r2, r6
 800546e:	463b      	mov	r3, r7
 8005470:	4628      	mov	r0, r5
 8005472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005476:	f000 b8a7 	b.w	80055c8 <_write_r>

0800547a <__sseek>:
 800547a:	b510      	push	{r4, lr}
 800547c:	460c      	mov	r4, r1
 800547e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005482:	f000 f859 	bl	8005538 <_lseek_r>
 8005486:	1c43      	adds	r3, r0, #1
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	bf15      	itete	ne
 800548c:	6560      	strne	r0, [r4, #84]	; 0x54
 800548e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005492:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005496:	81a3      	strheq	r3, [r4, #12]
 8005498:	bf18      	it	ne
 800549a:	81a3      	strhne	r3, [r4, #12]
 800549c:	bd10      	pop	{r4, pc}

0800549e <__sclose>:
 800549e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054a2:	f000 b839 	b.w	8005518 <_close_r>

080054a6 <memset>:
 80054a6:	4402      	add	r2, r0
 80054a8:	4603      	mov	r3, r0
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d100      	bne.n	80054b0 <memset+0xa>
 80054ae:	4770      	bx	lr
 80054b0:	f803 1b01 	strb.w	r1, [r3], #1
 80054b4:	e7f9      	b.n	80054aa <memset+0x4>

080054b6 <_raise_r>:
 80054b6:	291f      	cmp	r1, #31
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	4604      	mov	r4, r0
 80054bc:	460d      	mov	r5, r1
 80054be:	d904      	bls.n	80054ca <_raise_r+0x14>
 80054c0:	2316      	movs	r3, #22
 80054c2:	6003      	str	r3, [r0, #0]
 80054c4:	f04f 30ff 	mov.w	r0, #4294967295
 80054c8:	bd38      	pop	{r3, r4, r5, pc}
 80054ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80054cc:	b112      	cbz	r2, 80054d4 <_raise_r+0x1e>
 80054ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80054d2:	b94b      	cbnz	r3, 80054e8 <_raise_r+0x32>
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 f865 	bl	80055a4 <_getpid_r>
 80054da:	462a      	mov	r2, r5
 80054dc:	4601      	mov	r1, r0
 80054de:	4620      	mov	r0, r4
 80054e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054e4:	f000 b84c 	b.w	8005580 <_kill_r>
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d00a      	beq.n	8005502 <_raise_r+0x4c>
 80054ec:	1c59      	adds	r1, r3, #1
 80054ee:	d103      	bne.n	80054f8 <_raise_r+0x42>
 80054f0:	2316      	movs	r3, #22
 80054f2:	6003      	str	r3, [r0, #0]
 80054f4:	2001      	movs	r0, #1
 80054f6:	e7e7      	b.n	80054c8 <_raise_r+0x12>
 80054f8:	2400      	movs	r4, #0
 80054fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80054fe:	4628      	mov	r0, r5
 8005500:	4798      	blx	r3
 8005502:	2000      	movs	r0, #0
 8005504:	e7e0      	b.n	80054c8 <_raise_r+0x12>
	...

08005508 <raise>:
 8005508:	4b02      	ldr	r3, [pc, #8]	; (8005514 <raise+0xc>)
 800550a:	4601      	mov	r1, r0
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	f7ff bfd2 	b.w	80054b6 <_raise_r>
 8005512:	bf00      	nop
 8005514:	2000013c 	.word	0x2000013c

08005518 <_close_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d06      	ldr	r5, [pc, #24]	; (8005534 <_close_r+0x1c>)
 800551c:	2300      	movs	r3, #0
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fd f8cf 	bl	80026c6 <_close>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_close_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_close_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	20000380 	.word	0x20000380

08005538 <_lseek_r>:
 8005538:	b538      	push	{r3, r4, r5, lr}
 800553a:	4d07      	ldr	r5, [pc, #28]	; (8005558 <_lseek_r+0x20>)
 800553c:	4604      	mov	r4, r0
 800553e:	4608      	mov	r0, r1
 8005540:	4611      	mov	r1, r2
 8005542:	2200      	movs	r2, #0
 8005544:	602a      	str	r2, [r5, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	f7fd f8e4 	bl	8002714 <_lseek>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d102      	bne.n	8005556 <_lseek_r+0x1e>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	b103      	cbz	r3, 8005556 <_lseek_r+0x1e>
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	bd38      	pop	{r3, r4, r5, pc}
 8005558:	20000380 	.word	0x20000380

0800555c <_read_r>:
 800555c:	b538      	push	{r3, r4, r5, lr}
 800555e:	4d07      	ldr	r5, [pc, #28]	; (800557c <_read_r+0x20>)
 8005560:	4604      	mov	r4, r0
 8005562:	4608      	mov	r0, r1
 8005564:	4611      	mov	r1, r2
 8005566:	2200      	movs	r2, #0
 8005568:	602a      	str	r2, [r5, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	f7fd f872 	bl	8002654 <_read>
 8005570:	1c43      	adds	r3, r0, #1
 8005572:	d102      	bne.n	800557a <_read_r+0x1e>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	b103      	cbz	r3, 800557a <_read_r+0x1e>
 8005578:	6023      	str	r3, [r4, #0]
 800557a:	bd38      	pop	{r3, r4, r5, pc}
 800557c:	20000380 	.word	0x20000380

08005580 <_kill_r>:
 8005580:	b538      	push	{r3, r4, r5, lr}
 8005582:	4d07      	ldr	r5, [pc, #28]	; (80055a0 <_kill_r+0x20>)
 8005584:	2300      	movs	r3, #0
 8005586:	4604      	mov	r4, r0
 8005588:	4608      	mov	r0, r1
 800558a:	4611      	mov	r1, r2
 800558c:	602b      	str	r3, [r5, #0]
 800558e:	f7fd f847 	bl	8002620 <_kill>
 8005592:	1c43      	adds	r3, r0, #1
 8005594:	d102      	bne.n	800559c <_kill_r+0x1c>
 8005596:	682b      	ldr	r3, [r5, #0]
 8005598:	b103      	cbz	r3, 800559c <_kill_r+0x1c>
 800559a:	6023      	str	r3, [r4, #0]
 800559c:	bd38      	pop	{r3, r4, r5, pc}
 800559e:	bf00      	nop
 80055a0:	20000380 	.word	0x20000380

080055a4 <_getpid_r>:
 80055a4:	f7fd b834 	b.w	8002610 <_getpid>

080055a8 <_sbrk_r>:
 80055a8:	b538      	push	{r3, r4, r5, lr}
 80055aa:	4d06      	ldr	r5, [pc, #24]	; (80055c4 <_sbrk_r+0x1c>)
 80055ac:	2300      	movs	r3, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	602b      	str	r3, [r5, #0]
 80055b4:	f7fd f8bc 	bl	8002730 <_sbrk>
 80055b8:	1c43      	adds	r3, r0, #1
 80055ba:	d102      	bne.n	80055c2 <_sbrk_r+0x1a>
 80055bc:	682b      	ldr	r3, [r5, #0]
 80055be:	b103      	cbz	r3, 80055c2 <_sbrk_r+0x1a>
 80055c0:	6023      	str	r3, [r4, #0]
 80055c2:	bd38      	pop	{r3, r4, r5, pc}
 80055c4:	20000380 	.word	0x20000380

080055c8 <_write_r>:
 80055c8:	b538      	push	{r3, r4, r5, lr}
 80055ca:	4d07      	ldr	r5, [pc, #28]	; (80055e8 <_write_r+0x20>)
 80055cc:	4604      	mov	r4, r0
 80055ce:	4608      	mov	r0, r1
 80055d0:	4611      	mov	r1, r2
 80055d2:	2200      	movs	r2, #0
 80055d4:	602a      	str	r2, [r5, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	f7fd f859 	bl	800268e <_write>
 80055dc:	1c43      	adds	r3, r0, #1
 80055de:	d102      	bne.n	80055e6 <_write_r+0x1e>
 80055e0:	682b      	ldr	r3, [r5, #0]
 80055e2:	b103      	cbz	r3, 80055e6 <_write_r+0x1e>
 80055e4:	6023      	str	r3, [r4, #0]
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
 80055e8:	20000380 	.word	0x20000380

080055ec <__errno>:
 80055ec:	4b01      	ldr	r3, [pc, #4]	; (80055f4 <__errno+0x8>)
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	2000013c 	.word	0x2000013c

080055f8 <__libc_init_array>:
 80055f8:	b570      	push	{r4, r5, r6, lr}
 80055fa:	4d0d      	ldr	r5, [pc, #52]	; (8005630 <__libc_init_array+0x38>)
 80055fc:	4c0d      	ldr	r4, [pc, #52]	; (8005634 <__libc_init_array+0x3c>)
 80055fe:	1b64      	subs	r4, r4, r5
 8005600:	10a4      	asrs	r4, r4, #2
 8005602:	2600      	movs	r6, #0
 8005604:	42a6      	cmp	r6, r4
 8005606:	d109      	bne.n	800561c <__libc_init_array+0x24>
 8005608:	4d0b      	ldr	r5, [pc, #44]	; (8005638 <__libc_init_array+0x40>)
 800560a:	4c0c      	ldr	r4, [pc, #48]	; (800563c <__libc_init_array+0x44>)
 800560c:	f000 fd04 	bl	8006018 <_init>
 8005610:	1b64      	subs	r4, r4, r5
 8005612:	10a4      	asrs	r4, r4, #2
 8005614:	2600      	movs	r6, #0
 8005616:	42a6      	cmp	r6, r4
 8005618:	d105      	bne.n	8005626 <__libc_init_array+0x2e>
 800561a:	bd70      	pop	{r4, r5, r6, pc}
 800561c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005620:	4798      	blx	r3
 8005622:	3601      	adds	r6, #1
 8005624:	e7ee      	b.n	8005604 <__libc_init_array+0xc>
 8005626:	f855 3b04 	ldr.w	r3, [r5], #4
 800562a:	4798      	blx	r3
 800562c:	3601      	adds	r6, #1
 800562e:	e7f2      	b.n	8005616 <__libc_init_array+0x1e>
 8005630:	080060d0 	.word	0x080060d0
 8005634:	080060d0 	.word	0x080060d0
 8005638:	080060d0 	.word	0x080060d0
 800563c:	080060d8 	.word	0x080060d8

08005640 <__retarget_lock_init_recursive>:
 8005640:	4770      	bx	lr

08005642 <__retarget_lock_acquire_recursive>:
 8005642:	4770      	bx	lr

08005644 <__retarget_lock_release_recursive>:
 8005644:	4770      	bx	lr
	...

08005648 <_free_r>:
 8005648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800564a:	2900      	cmp	r1, #0
 800564c:	d044      	beq.n	80056d8 <_free_r+0x90>
 800564e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005652:	9001      	str	r0, [sp, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	f1a1 0404 	sub.w	r4, r1, #4
 800565a:	bfb8      	it	lt
 800565c:	18e4      	addlt	r4, r4, r3
 800565e:	f7ff fdff 	bl	8005260 <__malloc_lock>
 8005662:	4a1e      	ldr	r2, [pc, #120]	; (80056dc <_free_r+0x94>)
 8005664:	9801      	ldr	r0, [sp, #4]
 8005666:	6813      	ldr	r3, [r2, #0]
 8005668:	b933      	cbnz	r3, 8005678 <_free_r+0x30>
 800566a:	6063      	str	r3, [r4, #4]
 800566c:	6014      	str	r4, [r2, #0]
 800566e:	b003      	add	sp, #12
 8005670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005674:	f7ff bdfa 	b.w	800526c <__malloc_unlock>
 8005678:	42a3      	cmp	r3, r4
 800567a:	d908      	bls.n	800568e <_free_r+0x46>
 800567c:	6825      	ldr	r5, [r4, #0]
 800567e:	1961      	adds	r1, r4, r5
 8005680:	428b      	cmp	r3, r1
 8005682:	bf01      	itttt	eq
 8005684:	6819      	ldreq	r1, [r3, #0]
 8005686:	685b      	ldreq	r3, [r3, #4]
 8005688:	1949      	addeq	r1, r1, r5
 800568a:	6021      	streq	r1, [r4, #0]
 800568c:	e7ed      	b.n	800566a <_free_r+0x22>
 800568e:	461a      	mov	r2, r3
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	b10b      	cbz	r3, 8005698 <_free_r+0x50>
 8005694:	42a3      	cmp	r3, r4
 8005696:	d9fa      	bls.n	800568e <_free_r+0x46>
 8005698:	6811      	ldr	r1, [r2, #0]
 800569a:	1855      	adds	r5, r2, r1
 800569c:	42a5      	cmp	r5, r4
 800569e:	d10b      	bne.n	80056b8 <_free_r+0x70>
 80056a0:	6824      	ldr	r4, [r4, #0]
 80056a2:	4421      	add	r1, r4
 80056a4:	1854      	adds	r4, r2, r1
 80056a6:	42a3      	cmp	r3, r4
 80056a8:	6011      	str	r1, [r2, #0]
 80056aa:	d1e0      	bne.n	800566e <_free_r+0x26>
 80056ac:	681c      	ldr	r4, [r3, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	6053      	str	r3, [r2, #4]
 80056b2:	440c      	add	r4, r1
 80056b4:	6014      	str	r4, [r2, #0]
 80056b6:	e7da      	b.n	800566e <_free_r+0x26>
 80056b8:	d902      	bls.n	80056c0 <_free_r+0x78>
 80056ba:	230c      	movs	r3, #12
 80056bc:	6003      	str	r3, [r0, #0]
 80056be:	e7d6      	b.n	800566e <_free_r+0x26>
 80056c0:	6825      	ldr	r5, [r4, #0]
 80056c2:	1961      	adds	r1, r4, r5
 80056c4:	428b      	cmp	r3, r1
 80056c6:	bf04      	itt	eq
 80056c8:	6819      	ldreq	r1, [r3, #0]
 80056ca:	685b      	ldreq	r3, [r3, #4]
 80056cc:	6063      	str	r3, [r4, #4]
 80056ce:	bf04      	itt	eq
 80056d0:	1949      	addeq	r1, r1, r5
 80056d2:	6021      	streq	r1, [r4, #0]
 80056d4:	6054      	str	r4, [r2, #4]
 80056d6:	e7ca      	b.n	800566e <_free_r+0x26>
 80056d8:	b003      	add	sp, #12
 80056da:	bd30      	pop	{r4, r5, pc}
 80056dc:	2000023c 	.word	0x2000023c

080056e0 <__sfputc_r>:
 80056e0:	6893      	ldr	r3, [r2, #8]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	b410      	push	{r4}
 80056e8:	6093      	str	r3, [r2, #8]
 80056ea:	da08      	bge.n	80056fe <__sfputc_r+0x1e>
 80056ec:	6994      	ldr	r4, [r2, #24]
 80056ee:	42a3      	cmp	r3, r4
 80056f0:	db01      	blt.n	80056f6 <__sfputc_r+0x16>
 80056f2:	290a      	cmp	r1, #10
 80056f4:	d103      	bne.n	80056fe <__sfputc_r+0x1e>
 80056f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056fa:	f000 bb73 	b.w	8005de4 <__swbuf_r>
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	1c58      	adds	r0, r3, #1
 8005702:	6010      	str	r0, [r2, #0]
 8005704:	7019      	strb	r1, [r3, #0]
 8005706:	4608      	mov	r0, r1
 8005708:	f85d 4b04 	ldr.w	r4, [sp], #4
 800570c:	4770      	bx	lr

0800570e <__sfputs_r>:
 800570e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005710:	4606      	mov	r6, r0
 8005712:	460f      	mov	r7, r1
 8005714:	4614      	mov	r4, r2
 8005716:	18d5      	adds	r5, r2, r3
 8005718:	42ac      	cmp	r4, r5
 800571a:	d101      	bne.n	8005720 <__sfputs_r+0x12>
 800571c:	2000      	movs	r0, #0
 800571e:	e007      	b.n	8005730 <__sfputs_r+0x22>
 8005720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005724:	463a      	mov	r2, r7
 8005726:	4630      	mov	r0, r6
 8005728:	f7ff ffda 	bl	80056e0 <__sfputc_r>
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	d1f3      	bne.n	8005718 <__sfputs_r+0xa>
 8005730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005734 <_vfiprintf_r>:
 8005734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005738:	460d      	mov	r5, r1
 800573a:	b09d      	sub	sp, #116	; 0x74
 800573c:	4614      	mov	r4, r2
 800573e:	4698      	mov	r8, r3
 8005740:	4606      	mov	r6, r0
 8005742:	b118      	cbz	r0, 800574c <_vfiprintf_r+0x18>
 8005744:	6a03      	ldr	r3, [r0, #32]
 8005746:	b90b      	cbnz	r3, 800574c <_vfiprintf_r+0x18>
 8005748:	f7ff fe22 	bl	8005390 <__sinit>
 800574c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800574e:	07d9      	lsls	r1, r3, #31
 8005750:	d405      	bmi.n	800575e <_vfiprintf_r+0x2a>
 8005752:	89ab      	ldrh	r3, [r5, #12]
 8005754:	059a      	lsls	r2, r3, #22
 8005756:	d402      	bmi.n	800575e <_vfiprintf_r+0x2a>
 8005758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800575a:	f7ff ff72 	bl	8005642 <__retarget_lock_acquire_recursive>
 800575e:	89ab      	ldrh	r3, [r5, #12]
 8005760:	071b      	lsls	r3, r3, #28
 8005762:	d501      	bpl.n	8005768 <_vfiprintf_r+0x34>
 8005764:	692b      	ldr	r3, [r5, #16]
 8005766:	b99b      	cbnz	r3, 8005790 <_vfiprintf_r+0x5c>
 8005768:	4629      	mov	r1, r5
 800576a:	4630      	mov	r0, r6
 800576c:	f000 fb78 	bl	8005e60 <__swsetup_r>
 8005770:	b170      	cbz	r0, 8005790 <_vfiprintf_r+0x5c>
 8005772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005774:	07dc      	lsls	r4, r3, #31
 8005776:	d504      	bpl.n	8005782 <_vfiprintf_r+0x4e>
 8005778:	f04f 30ff 	mov.w	r0, #4294967295
 800577c:	b01d      	add	sp, #116	; 0x74
 800577e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005782:	89ab      	ldrh	r3, [r5, #12]
 8005784:	0598      	lsls	r0, r3, #22
 8005786:	d4f7      	bmi.n	8005778 <_vfiprintf_r+0x44>
 8005788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800578a:	f7ff ff5b 	bl	8005644 <__retarget_lock_release_recursive>
 800578e:	e7f3      	b.n	8005778 <_vfiprintf_r+0x44>
 8005790:	2300      	movs	r3, #0
 8005792:	9309      	str	r3, [sp, #36]	; 0x24
 8005794:	2320      	movs	r3, #32
 8005796:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800579a:	f8cd 800c 	str.w	r8, [sp, #12]
 800579e:	2330      	movs	r3, #48	; 0x30
 80057a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005954 <_vfiprintf_r+0x220>
 80057a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057a8:	f04f 0901 	mov.w	r9, #1
 80057ac:	4623      	mov	r3, r4
 80057ae:	469a      	mov	sl, r3
 80057b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057b4:	b10a      	cbz	r2, 80057ba <_vfiprintf_r+0x86>
 80057b6:	2a25      	cmp	r2, #37	; 0x25
 80057b8:	d1f9      	bne.n	80057ae <_vfiprintf_r+0x7a>
 80057ba:	ebba 0b04 	subs.w	fp, sl, r4
 80057be:	d00b      	beq.n	80057d8 <_vfiprintf_r+0xa4>
 80057c0:	465b      	mov	r3, fp
 80057c2:	4622      	mov	r2, r4
 80057c4:	4629      	mov	r1, r5
 80057c6:	4630      	mov	r0, r6
 80057c8:	f7ff ffa1 	bl	800570e <__sfputs_r>
 80057cc:	3001      	adds	r0, #1
 80057ce:	f000 80a9 	beq.w	8005924 <_vfiprintf_r+0x1f0>
 80057d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057d4:	445a      	add	r2, fp
 80057d6:	9209      	str	r2, [sp, #36]	; 0x24
 80057d8:	f89a 3000 	ldrb.w	r3, [sl]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 80a1 	beq.w	8005924 <_vfiprintf_r+0x1f0>
 80057e2:	2300      	movs	r3, #0
 80057e4:	f04f 32ff 	mov.w	r2, #4294967295
 80057e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057ec:	f10a 0a01 	add.w	sl, sl, #1
 80057f0:	9304      	str	r3, [sp, #16]
 80057f2:	9307      	str	r3, [sp, #28]
 80057f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057f8:	931a      	str	r3, [sp, #104]	; 0x68
 80057fa:	4654      	mov	r4, sl
 80057fc:	2205      	movs	r2, #5
 80057fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005802:	4854      	ldr	r0, [pc, #336]	; (8005954 <_vfiprintf_r+0x220>)
 8005804:	f7fa fce4 	bl	80001d0 <memchr>
 8005808:	9a04      	ldr	r2, [sp, #16]
 800580a:	b9d8      	cbnz	r0, 8005844 <_vfiprintf_r+0x110>
 800580c:	06d1      	lsls	r1, r2, #27
 800580e:	bf44      	itt	mi
 8005810:	2320      	movmi	r3, #32
 8005812:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005816:	0713      	lsls	r3, r2, #28
 8005818:	bf44      	itt	mi
 800581a:	232b      	movmi	r3, #43	; 0x2b
 800581c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005820:	f89a 3000 	ldrb.w	r3, [sl]
 8005824:	2b2a      	cmp	r3, #42	; 0x2a
 8005826:	d015      	beq.n	8005854 <_vfiprintf_r+0x120>
 8005828:	9a07      	ldr	r2, [sp, #28]
 800582a:	4654      	mov	r4, sl
 800582c:	2000      	movs	r0, #0
 800582e:	f04f 0c0a 	mov.w	ip, #10
 8005832:	4621      	mov	r1, r4
 8005834:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005838:	3b30      	subs	r3, #48	; 0x30
 800583a:	2b09      	cmp	r3, #9
 800583c:	d94d      	bls.n	80058da <_vfiprintf_r+0x1a6>
 800583e:	b1b0      	cbz	r0, 800586e <_vfiprintf_r+0x13a>
 8005840:	9207      	str	r2, [sp, #28]
 8005842:	e014      	b.n	800586e <_vfiprintf_r+0x13a>
 8005844:	eba0 0308 	sub.w	r3, r0, r8
 8005848:	fa09 f303 	lsl.w	r3, r9, r3
 800584c:	4313      	orrs	r3, r2
 800584e:	9304      	str	r3, [sp, #16]
 8005850:	46a2      	mov	sl, r4
 8005852:	e7d2      	b.n	80057fa <_vfiprintf_r+0xc6>
 8005854:	9b03      	ldr	r3, [sp, #12]
 8005856:	1d19      	adds	r1, r3, #4
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	9103      	str	r1, [sp, #12]
 800585c:	2b00      	cmp	r3, #0
 800585e:	bfbb      	ittet	lt
 8005860:	425b      	neglt	r3, r3
 8005862:	f042 0202 	orrlt.w	r2, r2, #2
 8005866:	9307      	strge	r3, [sp, #28]
 8005868:	9307      	strlt	r3, [sp, #28]
 800586a:	bfb8      	it	lt
 800586c:	9204      	strlt	r2, [sp, #16]
 800586e:	7823      	ldrb	r3, [r4, #0]
 8005870:	2b2e      	cmp	r3, #46	; 0x2e
 8005872:	d10c      	bne.n	800588e <_vfiprintf_r+0x15a>
 8005874:	7863      	ldrb	r3, [r4, #1]
 8005876:	2b2a      	cmp	r3, #42	; 0x2a
 8005878:	d134      	bne.n	80058e4 <_vfiprintf_r+0x1b0>
 800587a:	9b03      	ldr	r3, [sp, #12]
 800587c:	1d1a      	adds	r2, r3, #4
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	9203      	str	r2, [sp, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	bfb8      	it	lt
 8005886:	f04f 33ff 	movlt.w	r3, #4294967295
 800588a:	3402      	adds	r4, #2
 800588c:	9305      	str	r3, [sp, #20]
 800588e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005964 <_vfiprintf_r+0x230>
 8005892:	7821      	ldrb	r1, [r4, #0]
 8005894:	2203      	movs	r2, #3
 8005896:	4650      	mov	r0, sl
 8005898:	f7fa fc9a 	bl	80001d0 <memchr>
 800589c:	b138      	cbz	r0, 80058ae <_vfiprintf_r+0x17a>
 800589e:	9b04      	ldr	r3, [sp, #16]
 80058a0:	eba0 000a 	sub.w	r0, r0, sl
 80058a4:	2240      	movs	r2, #64	; 0x40
 80058a6:	4082      	lsls	r2, r0
 80058a8:	4313      	orrs	r3, r2
 80058aa:	3401      	adds	r4, #1
 80058ac:	9304      	str	r3, [sp, #16]
 80058ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b2:	4829      	ldr	r0, [pc, #164]	; (8005958 <_vfiprintf_r+0x224>)
 80058b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058b8:	2206      	movs	r2, #6
 80058ba:	f7fa fc89 	bl	80001d0 <memchr>
 80058be:	2800      	cmp	r0, #0
 80058c0:	d03f      	beq.n	8005942 <_vfiprintf_r+0x20e>
 80058c2:	4b26      	ldr	r3, [pc, #152]	; (800595c <_vfiprintf_r+0x228>)
 80058c4:	bb1b      	cbnz	r3, 800590e <_vfiprintf_r+0x1da>
 80058c6:	9b03      	ldr	r3, [sp, #12]
 80058c8:	3307      	adds	r3, #7
 80058ca:	f023 0307 	bic.w	r3, r3, #7
 80058ce:	3308      	adds	r3, #8
 80058d0:	9303      	str	r3, [sp, #12]
 80058d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058d4:	443b      	add	r3, r7
 80058d6:	9309      	str	r3, [sp, #36]	; 0x24
 80058d8:	e768      	b.n	80057ac <_vfiprintf_r+0x78>
 80058da:	fb0c 3202 	mla	r2, ip, r2, r3
 80058de:	460c      	mov	r4, r1
 80058e0:	2001      	movs	r0, #1
 80058e2:	e7a6      	b.n	8005832 <_vfiprintf_r+0xfe>
 80058e4:	2300      	movs	r3, #0
 80058e6:	3401      	adds	r4, #1
 80058e8:	9305      	str	r3, [sp, #20]
 80058ea:	4619      	mov	r1, r3
 80058ec:	f04f 0c0a 	mov.w	ip, #10
 80058f0:	4620      	mov	r0, r4
 80058f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058f6:	3a30      	subs	r2, #48	; 0x30
 80058f8:	2a09      	cmp	r2, #9
 80058fa:	d903      	bls.n	8005904 <_vfiprintf_r+0x1d0>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0c6      	beq.n	800588e <_vfiprintf_r+0x15a>
 8005900:	9105      	str	r1, [sp, #20]
 8005902:	e7c4      	b.n	800588e <_vfiprintf_r+0x15a>
 8005904:	fb0c 2101 	mla	r1, ip, r1, r2
 8005908:	4604      	mov	r4, r0
 800590a:	2301      	movs	r3, #1
 800590c:	e7f0      	b.n	80058f0 <_vfiprintf_r+0x1bc>
 800590e:	ab03      	add	r3, sp, #12
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	462a      	mov	r2, r5
 8005914:	4b12      	ldr	r3, [pc, #72]	; (8005960 <_vfiprintf_r+0x22c>)
 8005916:	a904      	add	r1, sp, #16
 8005918:	4630      	mov	r0, r6
 800591a:	f3af 8000 	nop.w
 800591e:	4607      	mov	r7, r0
 8005920:	1c78      	adds	r0, r7, #1
 8005922:	d1d6      	bne.n	80058d2 <_vfiprintf_r+0x19e>
 8005924:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005926:	07d9      	lsls	r1, r3, #31
 8005928:	d405      	bmi.n	8005936 <_vfiprintf_r+0x202>
 800592a:	89ab      	ldrh	r3, [r5, #12]
 800592c:	059a      	lsls	r2, r3, #22
 800592e:	d402      	bmi.n	8005936 <_vfiprintf_r+0x202>
 8005930:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005932:	f7ff fe87 	bl	8005644 <__retarget_lock_release_recursive>
 8005936:	89ab      	ldrh	r3, [r5, #12]
 8005938:	065b      	lsls	r3, r3, #25
 800593a:	f53f af1d 	bmi.w	8005778 <_vfiprintf_r+0x44>
 800593e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005940:	e71c      	b.n	800577c <_vfiprintf_r+0x48>
 8005942:	ab03      	add	r3, sp, #12
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	462a      	mov	r2, r5
 8005948:	4b05      	ldr	r3, [pc, #20]	; (8005960 <_vfiprintf_r+0x22c>)
 800594a:	a904      	add	r1, sp, #16
 800594c:	4630      	mov	r0, r6
 800594e:	f000 f879 	bl	8005a44 <_printf_i>
 8005952:	e7e4      	b.n	800591e <_vfiprintf_r+0x1ea>
 8005954:	0800609c 	.word	0x0800609c
 8005958:	080060a6 	.word	0x080060a6
 800595c:	00000000 	.word	0x00000000
 8005960:	0800570f 	.word	0x0800570f
 8005964:	080060a2 	.word	0x080060a2

08005968 <_printf_common>:
 8005968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800596c:	4616      	mov	r6, r2
 800596e:	4699      	mov	r9, r3
 8005970:	688a      	ldr	r2, [r1, #8]
 8005972:	690b      	ldr	r3, [r1, #16]
 8005974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005978:	4293      	cmp	r3, r2
 800597a:	bfb8      	it	lt
 800597c:	4613      	movlt	r3, r2
 800597e:	6033      	str	r3, [r6, #0]
 8005980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005984:	4607      	mov	r7, r0
 8005986:	460c      	mov	r4, r1
 8005988:	b10a      	cbz	r2, 800598e <_printf_common+0x26>
 800598a:	3301      	adds	r3, #1
 800598c:	6033      	str	r3, [r6, #0]
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	0699      	lsls	r1, r3, #26
 8005992:	bf42      	ittt	mi
 8005994:	6833      	ldrmi	r3, [r6, #0]
 8005996:	3302      	addmi	r3, #2
 8005998:	6033      	strmi	r3, [r6, #0]
 800599a:	6825      	ldr	r5, [r4, #0]
 800599c:	f015 0506 	ands.w	r5, r5, #6
 80059a0:	d106      	bne.n	80059b0 <_printf_common+0x48>
 80059a2:	f104 0a19 	add.w	sl, r4, #25
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	6832      	ldr	r2, [r6, #0]
 80059aa:	1a9b      	subs	r3, r3, r2
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dc26      	bgt.n	80059fe <_printf_common+0x96>
 80059b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059b4:	1e13      	subs	r3, r2, #0
 80059b6:	6822      	ldr	r2, [r4, #0]
 80059b8:	bf18      	it	ne
 80059ba:	2301      	movne	r3, #1
 80059bc:	0692      	lsls	r2, r2, #26
 80059be:	d42b      	bmi.n	8005a18 <_printf_common+0xb0>
 80059c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059c4:	4649      	mov	r1, r9
 80059c6:	4638      	mov	r0, r7
 80059c8:	47c0      	blx	r8
 80059ca:	3001      	adds	r0, #1
 80059cc:	d01e      	beq.n	8005a0c <_printf_common+0xa4>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	6922      	ldr	r2, [r4, #16]
 80059d2:	f003 0306 	and.w	r3, r3, #6
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	bf02      	ittt	eq
 80059da:	68e5      	ldreq	r5, [r4, #12]
 80059dc:	6833      	ldreq	r3, [r6, #0]
 80059de:	1aed      	subeq	r5, r5, r3
 80059e0:	68a3      	ldr	r3, [r4, #8]
 80059e2:	bf0c      	ite	eq
 80059e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059e8:	2500      	movne	r5, #0
 80059ea:	4293      	cmp	r3, r2
 80059ec:	bfc4      	itt	gt
 80059ee:	1a9b      	subgt	r3, r3, r2
 80059f0:	18ed      	addgt	r5, r5, r3
 80059f2:	2600      	movs	r6, #0
 80059f4:	341a      	adds	r4, #26
 80059f6:	42b5      	cmp	r5, r6
 80059f8:	d11a      	bne.n	8005a30 <_printf_common+0xc8>
 80059fa:	2000      	movs	r0, #0
 80059fc:	e008      	b.n	8005a10 <_printf_common+0xa8>
 80059fe:	2301      	movs	r3, #1
 8005a00:	4652      	mov	r2, sl
 8005a02:	4649      	mov	r1, r9
 8005a04:	4638      	mov	r0, r7
 8005a06:	47c0      	blx	r8
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d103      	bne.n	8005a14 <_printf_common+0xac>
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a14:	3501      	adds	r5, #1
 8005a16:	e7c6      	b.n	80059a6 <_printf_common+0x3e>
 8005a18:	18e1      	adds	r1, r4, r3
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	2030      	movs	r0, #48	; 0x30
 8005a1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a22:	4422      	add	r2, r4
 8005a24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	e7c7      	b.n	80059c0 <_printf_common+0x58>
 8005a30:	2301      	movs	r3, #1
 8005a32:	4622      	mov	r2, r4
 8005a34:	4649      	mov	r1, r9
 8005a36:	4638      	mov	r0, r7
 8005a38:	47c0      	blx	r8
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d0e6      	beq.n	8005a0c <_printf_common+0xa4>
 8005a3e:	3601      	adds	r6, #1
 8005a40:	e7d9      	b.n	80059f6 <_printf_common+0x8e>
	...

08005a44 <_printf_i>:
 8005a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	7e0f      	ldrb	r7, [r1, #24]
 8005a4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005a4c:	2f78      	cmp	r7, #120	; 0x78
 8005a4e:	4691      	mov	r9, r2
 8005a50:	4680      	mov	r8, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	469a      	mov	sl, r3
 8005a56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005a5a:	d807      	bhi.n	8005a6c <_printf_i+0x28>
 8005a5c:	2f62      	cmp	r7, #98	; 0x62
 8005a5e:	d80a      	bhi.n	8005a76 <_printf_i+0x32>
 8005a60:	2f00      	cmp	r7, #0
 8005a62:	f000 80d4 	beq.w	8005c0e <_printf_i+0x1ca>
 8005a66:	2f58      	cmp	r7, #88	; 0x58
 8005a68:	f000 80c0 	beq.w	8005bec <_printf_i+0x1a8>
 8005a6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005a70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a74:	e03a      	b.n	8005aec <_printf_i+0xa8>
 8005a76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a7a:	2b15      	cmp	r3, #21
 8005a7c:	d8f6      	bhi.n	8005a6c <_printf_i+0x28>
 8005a7e:	a101      	add	r1, pc, #4	; (adr r1, 8005a84 <_printf_i+0x40>)
 8005a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a84:	08005add 	.word	0x08005add
 8005a88:	08005af1 	.word	0x08005af1
 8005a8c:	08005a6d 	.word	0x08005a6d
 8005a90:	08005a6d 	.word	0x08005a6d
 8005a94:	08005a6d 	.word	0x08005a6d
 8005a98:	08005a6d 	.word	0x08005a6d
 8005a9c:	08005af1 	.word	0x08005af1
 8005aa0:	08005a6d 	.word	0x08005a6d
 8005aa4:	08005a6d 	.word	0x08005a6d
 8005aa8:	08005a6d 	.word	0x08005a6d
 8005aac:	08005a6d 	.word	0x08005a6d
 8005ab0:	08005bf5 	.word	0x08005bf5
 8005ab4:	08005b1d 	.word	0x08005b1d
 8005ab8:	08005baf 	.word	0x08005baf
 8005abc:	08005a6d 	.word	0x08005a6d
 8005ac0:	08005a6d 	.word	0x08005a6d
 8005ac4:	08005c17 	.word	0x08005c17
 8005ac8:	08005a6d 	.word	0x08005a6d
 8005acc:	08005b1d 	.word	0x08005b1d
 8005ad0:	08005a6d 	.word	0x08005a6d
 8005ad4:	08005a6d 	.word	0x08005a6d
 8005ad8:	08005bb7 	.word	0x08005bb7
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	1d1a      	adds	r2, r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	602a      	str	r2, [r5, #0]
 8005ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005aec:	2301      	movs	r3, #1
 8005aee:	e09f      	b.n	8005c30 <_printf_i+0x1ec>
 8005af0:	6820      	ldr	r0, [r4, #0]
 8005af2:	682b      	ldr	r3, [r5, #0]
 8005af4:	0607      	lsls	r7, r0, #24
 8005af6:	f103 0104 	add.w	r1, r3, #4
 8005afa:	6029      	str	r1, [r5, #0]
 8005afc:	d501      	bpl.n	8005b02 <_printf_i+0xbe>
 8005afe:	681e      	ldr	r6, [r3, #0]
 8005b00:	e003      	b.n	8005b0a <_printf_i+0xc6>
 8005b02:	0646      	lsls	r6, r0, #25
 8005b04:	d5fb      	bpl.n	8005afe <_printf_i+0xba>
 8005b06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005b0a:	2e00      	cmp	r6, #0
 8005b0c:	da03      	bge.n	8005b16 <_printf_i+0xd2>
 8005b0e:	232d      	movs	r3, #45	; 0x2d
 8005b10:	4276      	negs	r6, r6
 8005b12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b16:	485a      	ldr	r0, [pc, #360]	; (8005c80 <_printf_i+0x23c>)
 8005b18:	230a      	movs	r3, #10
 8005b1a:	e012      	b.n	8005b42 <_printf_i+0xfe>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	6820      	ldr	r0, [r4, #0]
 8005b20:	1d19      	adds	r1, r3, #4
 8005b22:	6029      	str	r1, [r5, #0]
 8005b24:	0605      	lsls	r5, r0, #24
 8005b26:	d501      	bpl.n	8005b2c <_printf_i+0xe8>
 8005b28:	681e      	ldr	r6, [r3, #0]
 8005b2a:	e002      	b.n	8005b32 <_printf_i+0xee>
 8005b2c:	0641      	lsls	r1, r0, #25
 8005b2e:	d5fb      	bpl.n	8005b28 <_printf_i+0xe4>
 8005b30:	881e      	ldrh	r6, [r3, #0]
 8005b32:	4853      	ldr	r0, [pc, #332]	; (8005c80 <_printf_i+0x23c>)
 8005b34:	2f6f      	cmp	r7, #111	; 0x6f
 8005b36:	bf0c      	ite	eq
 8005b38:	2308      	moveq	r3, #8
 8005b3a:	230a      	movne	r3, #10
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b42:	6865      	ldr	r5, [r4, #4]
 8005b44:	60a5      	str	r5, [r4, #8]
 8005b46:	2d00      	cmp	r5, #0
 8005b48:	bfa2      	ittt	ge
 8005b4a:	6821      	ldrge	r1, [r4, #0]
 8005b4c:	f021 0104 	bicge.w	r1, r1, #4
 8005b50:	6021      	strge	r1, [r4, #0]
 8005b52:	b90e      	cbnz	r6, 8005b58 <_printf_i+0x114>
 8005b54:	2d00      	cmp	r5, #0
 8005b56:	d04b      	beq.n	8005bf0 <_printf_i+0x1ac>
 8005b58:	4615      	mov	r5, r2
 8005b5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8005b5e:	fb03 6711 	mls	r7, r3, r1, r6
 8005b62:	5dc7      	ldrb	r7, [r0, r7]
 8005b64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005b68:	4637      	mov	r7, r6
 8005b6a:	42bb      	cmp	r3, r7
 8005b6c:	460e      	mov	r6, r1
 8005b6e:	d9f4      	bls.n	8005b5a <_printf_i+0x116>
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d10b      	bne.n	8005b8c <_printf_i+0x148>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	07de      	lsls	r6, r3, #31
 8005b78:	d508      	bpl.n	8005b8c <_printf_i+0x148>
 8005b7a:	6923      	ldr	r3, [r4, #16]
 8005b7c:	6861      	ldr	r1, [r4, #4]
 8005b7e:	4299      	cmp	r1, r3
 8005b80:	bfde      	ittt	le
 8005b82:	2330      	movle	r3, #48	; 0x30
 8005b84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005b88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005b8c:	1b52      	subs	r2, r2, r5
 8005b8e:	6122      	str	r2, [r4, #16]
 8005b90:	f8cd a000 	str.w	sl, [sp]
 8005b94:	464b      	mov	r3, r9
 8005b96:	aa03      	add	r2, sp, #12
 8005b98:	4621      	mov	r1, r4
 8005b9a:	4640      	mov	r0, r8
 8005b9c:	f7ff fee4 	bl	8005968 <_printf_common>
 8005ba0:	3001      	adds	r0, #1
 8005ba2:	d14a      	bne.n	8005c3a <_printf_i+0x1f6>
 8005ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba8:	b004      	add	sp, #16
 8005baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bae:	6823      	ldr	r3, [r4, #0]
 8005bb0:	f043 0320 	orr.w	r3, r3, #32
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	4833      	ldr	r0, [pc, #204]	; (8005c84 <_printf_i+0x240>)
 8005bb8:	2778      	movs	r7, #120	; 0x78
 8005bba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	6829      	ldr	r1, [r5, #0]
 8005bc2:	061f      	lsls	r7, r3, #24
 8005bc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005bc8:	d402      	bmi.n	8005bd0 <_printf_i+0x18c>
 8005bca:	065f      	lsls	r7, r3, #25
 8005bcc:	bf48      	it	mi
 8005bce:	b2b6      	uxthmi	r6, r6
 8005bd0:	07df      	lsls	r7, r3, #31
 8005bd2:	bf48      	it	mi
 8005bd4:	f043 0320 	orrmi.w	r3, r3, #32
 8005bd8:	6029      	str	r1, [r5, #0]
 8005bda:	bf48      	it	mi
 8005bdc:	6023      	strmi	r3, [r4, #0]
 8005bde:	b91e      	cbnz	r6, 8005be8 <_printf_i+0x1a4>
 8005be0:	6823      	ldr	r3, [r4, #0]
 8005be2:	f023 0320 	bic.w	r3, r3, #32
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	2310      	movs	r3, #16
 8005bea:	e7a7      	b.n	8005b3c <_printf_i+0xf8>
 8005bec:	4824      	ldr	r0, [pc, #144]	; (8005c80 <_printf_i+0x23c>)
 8005bee:	e7e4      	b.n	8005bba <_printf_i+0x176>
 8005bf0:	4615      	mov	r5, r2
 8005bf2:	e7bd      	b.n	8005b70 <_printf_i+0x12c>
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	6826      	ldr	r6, [r4, #0]
 8005bf8:	6961      	ldr	r1, [r4, #20]
 8005bfa:	1d18      	adds	r0, r3, #4
 8005bfc:	6028      	str	r0, [r5, #0]
 8005bfe:	0635      	lsls	r5, r6, #24
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	d501      	bpl.n	8005c08 <_printf_i+0x1c4>
 8005c04:	6019      	str	r1, [r3, #0]
 8005c06:	e002      	b.n	8005c0e <_printf_i+0x1ca>
 8005c08:	0670      	lsls	r0, r6, #25
 8005c0a:	d5fb      	bpl.n	8005c04 <_printf_i+0x1c0>
 8005c0c:	8019      	strh	r1, [r3, #0]
 8005c0e:	2300      	movs	r3, #0
 8005c10:	6123      	str	r3, [r4, #16]
 8005c12:	4615      	mov	r5, r2
 8005c14:	e7bc      	b.n	8005b90 <_printf_i+0x14c>
 8005c16:	682b      	ldr	r3, [r5, #0]
 8005c18:	1d1a      	adds	r2, r3, #4
 8005c1a:	602a      	str	r2, [r5, #0]
 8005c1c:	681d      	ldr	r5, [r3, #0]
 8005c1e:	6862      	ldr	r2, [r4, #4]
 8005c20:	2100      	movs	r1, #0
 8005c22:	4628      	mov	r0, r5
 8005c24:	f7fa fad4 	bl	80001d0 <memchr>
 8005c28:	b108      	cbz	r0, 8005c2e <_printf_i+0x1ea>
 8005c2a:	1b40      	subs	r0, r0, r5
 8005c2c:	6060      	str	r0, [r4, #4]
 8005c2e:	6863      	ldr	r3, [r4, #4]
 8005c30:	6123      	str	r3, [r4, #16]
 8005c32:	2300      	movs	r3, #0
 8005c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c38:	e7aa      	b.n	8005b90 <_printf_i+0x14c>
 8005c3a:	6923      	ldr	r3, [r4, #16]
 8005c3c:	462a      	mov	r2, r5
 8005c3e:	4649      	mov	r1, r9
 8005c40:	4640      	mov	r0, r8
 8005c42:	47d0      	blx	sl
 8005c44:	3001      	adds	r0, #1
 8005c46:	d0ad      	beq.n	8005ba4 <_printf_i+0x160>
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	079b      	lsls	r3, r3, #30
 8005c4c:	d413      	bmi.n	8005c76 <_printf_i+0x232>
 8005c4e:	68e0      	ldr	r0, [r4, #12]
 8005c50:	9b03      	ldr	r3, [sp, #12]
 8005c52:	4298      	cmp	r0, r3
 8005c54:	bfb8      	it	lt
 8005c56:	4618      	movlt	r0, r3
 8005c58:	e7a6      	b.n	8005ba8 <_printf_i+0x164>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4632      	mov	r2, r6
 8005c5e:	4649      	mov	r1, r9
 8005c60:	4640      	mov	r0, r8
 8005c62:	47d0      	blx	sl
 8005c64:	3001      	adds	r0, #1
 8005c66:	d09d      	beq.n	8005ba4 <_printf_i+0x160>
 8005c68:	3501      	adds	r5, #1
 8005c6a:	68e3      	ldr	r3, [r4, #12]
 8005c6c:	9903      	ldr	r1, [sp, #12]
 8005c6e:	1a5b      	subs	r3, r3, r1
 8005c70:	42ab      	cmp	r3, r5
 8005c72:	dcf2      	bgt.n	8005c5a <_printf_i+0x216>
 8005c74:	e7eb      	b.n	8005c4e <_printf_i+0x20a>
 8005c76:	2500      	movs	r5, #0
 8005c78:	f104 0619 	add.w	r6, r4, #25
 8005c7c:	e7f5      	b.n	8005c6a <_printf_i+0x226>
 8005c7e:	bf00      	nop
 8005c80:	080060ad 	.word	0x080060ad
 8005c84:	080060be 	.word	0x080060be

08005c88 <__sflush_r>:
 8005c88:	898a      	ldrh	r2, [r1, #12]
 8005c8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8e:	4605      	mov	r5, r0
 8005c90:	0710      	lsls	r0, r2, #28
 8005c92:	460c      	mov	r4, r1
 8005c94:	d458      	bmi.n	8005d48 <__sflush_r+0xc0>
 8005c96:	684b      	ldr	r3, [r1, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	dc05      	bgt.n	8005ca8 <__sflush_r+0x20>
 8005c9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	dc02      	bgt.n	8005ca8 <__sflush_r+0x20>
 8005ca2:	2000      	movs	r0, #0
 8005ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005caa:	2e00      	cmp	r6, #0
 8005cac:	d0f9      	beq.n	8005ca2 <__sflush_r+0x1a>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005cb4:	682f      	ldr	r7, [r5, #0]
 8005cb6:	6a21      	ldr	r1, [r4, #32]
 8005cb8:	602b      	str	r3, [r5, #0]
 8005cba:	d032      	beq.n	8005d22 <__sflush_r+0x9a>
 8005cbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	075a      	lsls	r2, r3, #29
 8005cc2:	d505      	bpl.n	8005cd0 <__sflush_r+0x48>
 8005cc4:	6863      	ldr	r3, [r4, #4]
 8005cc6:	1ac0      	subs	r0, r0, r3
 8005cc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005cca:	b10b      	cbz	r3, 8005cd0 <__sflush_r+0x48>
 8005ccc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005cce:	1ac0      	subs	r0, r0, r3
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005cd6:	6a21      	ldr	r1, [r4, #32]
 8005cd8:	4628      	mov	r0, r5
 8005cda:	47b0      	blx	r6
 8005cdc:	1c43      	adds	r3, r0, #1
 8005cde:	89a3      	ldrh	r3, [r4, #12]
 8005ce0:	d106      	bne.n	8005cf0 <__sflush_r+0x68>
 8005ce2:	6829      	ldr	r1, [r5, #0]
 8005ce4:	291d      	cmp	r1, #29
 8005ce6:	d82b      	bhi.n	8005d40 <__sflush_r+0xb8>
 8005ce8:	4a29      	ldr	r2, [pc, #164]	; (8005d90 <__sflush_r+0x108>)
 8005cea:	410a      	asrs	r2, r1
 8005cec:	07d6      	lsls	r6, r2, #31
 8005cee:	d427      	bmi.n	8005d40 <__sflush_r+0xb8>
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	6062      	str	r2, [r4, #4]
 8005cf4:	04d9      	lsls	r1, r3, #19
 8005cf6:	6922      	ldr	r2, [r4, #16]
 8005cf8:	6022      	str	r2, [r4, #0]
 8005cfa:	d504      	bpl.n	8005d06 <__sflush_r+0x7e>
 8005cfc:	1c42      	adds	r2, r0, #1
 8005cfe:	d101      	bne.n	8005d04 <__sflush_r+0x7c>
 8005d00:	682b      	ldr	r3, [r5, #0]
 8005d02:	b903      	cbnz	r3, 8005d06 <__sflush_r+0x7e>
 8005d04:	6560      	str	r0, [r4, #84]	; 0x54
 8005d06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d08:	602f      	str	r7, [r5, #0]
 8005d0a:	2900      	cmp	r1, #0
 8005d0c:	d0c9      	beq.n	8005ca2 <__sflush_r+0x1a>
 8005d0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d12:	4299      	cmp	r1, r3
 8005d14:	d002      	beq.n	8005d1c <__sflush_r+0x94>
 8005d16:	4628      	mov	r0, r5
 8005d18:	f7ff fc96 	bl	8005648 <_free_r>
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	6360      	str	r0, [r4, #52]	; 0x34
 8005d20:	e7c0      	b.n	8005ca4 <__sflush_r+0x1c>
 8005d22:	2301      	movs	r3, #1
 8005d24:	4628      	mov	r0, r5
 8005d26:	47b0      	blx	r6
 8005d28:	1c41      	adds	r1, r0, #1
 8005d2a:	d1c8      	bne.n	8005cbe <__sflush_r+0x36>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0c5      	beq.n	8005cbe <__sflush_r+0x36>
 8005d32:	2b1d      	cmp	r3, #29
 8005d34:	d001      	beq.n	8005d3a <__sflush_r+0xb2>
 8005d36:	2b16      	cmp	r3, #22
 8005d38:	d101      	bne.n	8005d3e <__sflush_r+0xb6>
 8005d3a:	602f      	str	r7, [r5, #0]
 8005d3c:	e7b1      	b.n	8005ca2 <__sflush_r+0x1a>
 8005d3e:	89a3      	ldrh	r3, [r4, #12]
 8005d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d44:	81a3      	strh	r3, [r4, #12]
 8005d46:	e7ad      	b.n	8005ca4 <__sflush_r+0x1c>
 8005d48:	690f      	ldr	r7, [r1, #16]
 8005d4a:	2f00      	cmp	r7, #0
 8005d4c:	d0a9      	beq.n	8005ca2 <__sflush_r+0x1a>
 8005d4e:	0793      	lsls	r3, r2, #30
 8005d50:	680e      	ldr	r6, [r1, #0]
 8005d52:	bf08      	it	eq
 8005d54:	694b      	ldreq	r3, [r1, #20]
 8005d56:	600f      	str	r7, [r1, #0]
 8005d58:	bf18      	it	ne
 8005d5a:	2300      	movne	r3, #0
 8005d5c:	eba6 0807 	sub.w	r8, r6, r7
 8005d60:	608b      	str	r3, [r1, #8]
 8005d62:	f1b8 0f00 	cmp.w	r8, #0
 8005d66:	dd9c      	ble.n	8005ca2 <__sflush_r+0x1a>
 8005d68:	6a21      	ldr	r1, [r4, #32]
 8005d6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005d6c:	4643      	mov	r3, r8
 8005d6e:	463a      	mov	r2, r7
 8005d70:	4628      	mov	r0, r5
 8005d72:	47b0      	blx	r6
 8005d74:	2800      	cmp	r0, #0
 8005d76:	dc06      	bgt.n	8005d86 <__sflush_r+0xfe>
 8005d78:	89a3      	ldrh	r3, [r4, #12]
 8005d7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d7e:	81a3      	strh	r3, [r4, #12]
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295
 8005d84:	e78e      	b.n	8005ca4 <__sflush_r+0x1c>
 8005d86:	4407      	add	r7, r0
 8005d88:	eba8 0800 	sub.w	r8, r8, r0
 8005d8c:	e7e9      	b.n	8005d62 <__sflush_r+0xda>
 8005d8e:	bf00      	nop
 8005d90:	dfbffffe 	.word	0xdfbffffe

08005d94 <_fflush_r>:
 8005d94:	b538      	push	{r3, r4, r5, lr}
 8005d96:	690b      	ldr	r3, [r1, #16]
 8005d98:	4605      	mov	r5, r0
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	b913      	cbnz	r3, 8005da4 <_fflush_r+0x10>
 8005d9e:	2500      	movs	r5, #0
 8005da0:	4628      	mov	r0, r5
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
 8005da4:	b118      	cbz	r0, 8005dae <_fflush_r+0x1a>
 8005da6:	6a03      	ldr	r3, [r0, #32]
 8005da8:	b90b      	cbnz	r3, 8005dae <_fflush_r+0x1a>
 8005daa:	f7ff faf1 	bl	8005390 <__sinit>
 8005dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0f3      	beq.n	8005d9e <_fflush_r+0xa>
 8005db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005db8:	07d0      	lsls	r0, r2, #31
 8005dba:	d404      	bmi.n	8005dc6 <_fflush_r+0x32>
 8005dbc:	0599      	lsls	r1, r3, #22
 8005dbe:	d402      	bmi.n	8005dc6 <_fflush_r+0x32>
 8005dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dc2:	f7ff fc3e 	bl	8005642 <__retarget_lock_acquire_recursive>
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	4621      	mov	r1, r4
 8005dca:	f7ff ff5d 	bl	8005c88 <__sflush_r>
 8005dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dd0:	07da      	lsls	r2, r3, #31
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	d4e4      	bmi.n	8005da0 <_fflush_r+0xc>
 8005dd6:	89a3      	ldrh	r3, [r4, #12]
 8005dd8:	059b      	lsls	r3, r3, #22
 8005dda:	d4e1      	bmi.n	8005da0 <_fflush_r+0xc>
 8005ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dde:	f7ff fc31 	bl	8005644 <__retarget_lock_release_recursive>
 8005de2:	e7dd      	b.n	8005da0 <_fflush_r+0xc>

08005de4 <__swbuf_r>:
 8005de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005de6:	460e      	mov	r6, r1
 8005de8:	4614      	mov	r4, r2
 8005dea:	4605      	mov	r5, r0
 8005dec:	b118      	cbz	r0, 8005df6 <__swbuf_r+0x12>
 8005dee:	6a03      	ldr	r3, [r0, #32]
 8005df0:	b90b      	cbnz	r3, 8005df6 <__swbuf_r+0x12>
 8005df2:	f7ff facd 	bl	8005390 <__sinit>
 8005df6:	69a3      	ldr	r3, [r4, #24]
 8005df8:	60a3      	str	r3, [r4, #8]
 8005dfa:	89a3      	ldrh	r3, [r4, #12]
 8005dfc:	071a      	lsls	r2, r3, #28
 8005dfe:	d525      	bpl.n	8005e4c <__swbuf_r+0x68>
 8005e00:	6923      	ldr	r3, [r4, #16]
 8005e02:	b31b      	cbz	r3, 8005e4c <__swbuf_r+0x68>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	6922      	ldr	r2, [r4, #16]
 8005e08:	1a98      	subs	r0, r3, r2
 8005e0a:	6963      	ldr	r3, [r4, #20]
 8005e0c:	b2f6      	uxtb	r6, r6
 8005e0e:	4283      	cmp	r3, r0
 8005e10:	4637      	mov	r7, r6
 8005e12:	dc04      	bgt.n	8005e1e <__swbuf_r+0x3a>
 8005e14:	4621      	mov	r1, r4
 8005e16:	4628      	mov	r0, r5
 8005e18:	f7ff ffbc 	bl	8005d94 <_fflush_r>
 8005e1c:	b9e0      	cbnz	r0, 8005e58 <__swbuf_r+0x74>
 8005e1e:	68a3      	ldr	r3, [r4, #8]
 8005e20:	3b01      	subs	r3, #1
 8005e22:	60a3      	str	r3, [r4, #8]
 8005e24:	6823      	ldr	r3, [r4, #0]
 8005e26:	1c5a      	adds	r2, r3, #1
 8005e28:	6022      	str	r2, [r4, #0]
 8005e2a:	701e      	strb	r6, [r3, #0]
 8005e2c:	6962      	ldr	r2, [r4, #20]
 8005e2e:	1c43      	adds	r3, r0, #1
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d004      	beq.n	8005e3e <__swbuf_r+0x5a>
 8005e34:	89a3      	ldrh	r3, [r4, #12]
 8005e36:	07db      	lsls	r3, r3, #31
 8005e38:	d506      	bpl.n	8005e48 <__swbuf_r+0x64>
 8005e3a:	2e0a      	cmp	r6, #10
 8005e3c:	d104      	bne.n	8005e48 <__swbuf_r+0x64>
 8005e3e:	4621      	mov	r1, r4
 8005e40:	4628      	mov	r0, r5
 8005e42:	f7ff ffa7 	bl	8005d94 <_fflush_r>
 8005e46:	b938      	cbnz	r0, 8005e58 <__swbuf_r+0x74>
 8005e48:	4638      	mov	r0, r7
 8005e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e4c:	4621      	mov	r1, r4
 8005e4e:	4628      	mov	r0, r5
 8005e50:	f000 f806 	bl	8005e60 <__swsetup_r>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d0d5      	beq.n	8005e04 <__swbuf_r+0x20>
 8005e58:	f04f 37ff 	mov.w	r7, #4294967295
 8005e5c:	e7f4      	b.n	8005e48 <__swbuf_r+0x64>
	...

08005e60 <__swsetup_r>:
 8005e60:	b538      	push	{r3, r4, r5, lr}
 8005e62:	4b2a      	ldr	r3, [pc, #168]	; (8005f0c <__swsetup_r+0xac>)
 8005e64:	4605      	mov	r5, r0
 8005e66:	6818      	ldr	r0, [r3, #0]
 8005e68:	460c      	mov	r4, r1
 8005e6a:	b118      	cbz	r0, 8005e74 <__swsetup_r+0x14>
 8005e6c:	6a03      	ldr	r3, [r0, #32]
 8005e6e:	b90b      	cbnz	r3, 8005e74 <__swsetup_r+0x14>
 8005e70:	f7ff fa8e 	bl	8005390 <__sinit>
 8005e74:	89a3      	ldrh	r3, [r4, #12]
 8005e76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e7a:	0718      	lsls	r0, r3, #28
 8005e7c:	d422      	bmi.n	8005ec4 <__swsetup_r+0x64>
 8005e7e:	06d9      	lsls	r1, r3, #27
 8005e80:	d407      	bmi.n	8005e92 <__swsetup_r+0x32>
 8005e82:	2309      	movs	r3, #9
 8005e84:	602b      	str	r3, [r5, #0]
 8005e86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e8a:	81a3      	strh	r3, [r4, #12]
 8005e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e90:	e034      	b.n	8005efc <__swsetup_r+0x9c>
 8005e92:	0758      	lsls	r0, r3, #29
 8005e94:	d512      	bpl.n	8005ebc <__swsetup_r+0x5c>
 8005e96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e98:	b141      	cbz	r1, 8005eac <__swsetup_r+0x4c>
 8005e9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e9e:	4299      	cmp	r1, r3
 8005ea0:	d002      	beq.n	8005ea8 <__swsetup_r+0x48>
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f7ff fbd0 	bl	8005648 <_free_r>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	6363      	str	r3, [r4, #52]	; 0x34
 8005eac:	89a3      	ldrh	r3, [r4, #12]
 8005eae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eb2:	81a3      	strh	r3, [r4, #12]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	6063      	str	r3, [r4, #4]
 8005eb8:	6923      	ldr	r3, [r4, #16]
 8005eba:	6023      	str	r3, [r4, #0]
 8005ebc:	89a3      	ldrh	r3, [r4, #12]
 8005ebe:	f043 0308 	orr.w	r3, r3, #8
 8005ec2:	81a3      	strh	r3, [r4, #12]
 8005ec4:	6923      	ldr	r3, [r4, #16]
 8005ec6:	b94b      	cbnz	r3, 8005edc <__swsetup_r+0x7c>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ece:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed2:	d003      	beq.n	8005edc <__swsetup_r+0x7c>
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f000 f840 	bl	8005f5c <__smakebuf_r>
 8005edc:	89a0      	ldrh	r0, [r4, #12]
 8005ede:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ee2:	f010 0301 	ands.w	r3, r0, #1
 8005ee6:	d00a      	beq.n	8005efe <__swsetup_r+0x9e>
 8005ee8:	2300      	movs	r3, #0
 8005eea:	60a3      	str	r3, [r4, #8]
 8005eec:	6963      	ldr	r3, [r4, #20]
 8005eee:	425b      	negs	r3, r3
 8005ef0:	61a3      	str	r3, [r4, #24]
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	b943      	cbnz	r3, 8005f08 <__swsetup_r+0xa8>
 8005ef6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005efa:	d1c4      	bne.n	8005e86 <__swsetup_r+0x26>
 8005efc:	bd38      	pop	{r3, r4, r5, pc}
 8005efe:	0781      	lsls	r1, r0, #30
 8005f00:	bf58      	it	pl
 8005f02:	6963      	ldrpl	r3, [r4, #20]
 8005f04:	60a3      	str	r3, [r4, #8]
 8005f06:	e7f4      	b.n	8005ef2 <__swsetup_r+0x92>
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e7f7      	b.n	8005efc <__swsetup_r+0x9c>
 8005f0c:	2000013c 	.word	0x2000013c

08005f10 <__swhatbuf_r>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	460c      	mov	r4, r1
 8005f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	b096      	sub	sp, #88	; 0x58
 8005f1c:	4615      	mov	r5, r2
 8005f1e:	461e      	mov	r6, r3
 8005f20:	da0d      	bge.n	8005f3e <__swhatbuf_r+0x2e>
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005f28:	f04f 0100 	mov.w	r1, #0
 8005f2c:	bf0c      	ite	eq
 8005f2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005f32:	2340      	movne	r3, #64	; 0x40
 8005f34:	2000      	movs	r0, #0
 8005f36:	6031      	str	r1, [r6, #0]
 8005f38:	602b      	str	r3, [r5, #0]
 8005f3a:	b016      	add	sp, #88	; 0x58
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
 8005f3e:	466a      	mov	r2, sp
 8005f40:	f000 f848 	bl	8005fd4 <_fstat_r>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	dbec      	blt.n	8005f22 <__swhatbuf_r+0x12>
 8005f48:	9901      	ldr	r1, [sp, #4]
 8005f4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005f4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005f52:	4259      	negs	r1, r3
 8005f54:	4159      	adcs	r1, r3
 8005f56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f5a:	e7eb      	b.n	8005f34 <__swhatbuf_r+0x24>

08005f5c <__smakebuf_r>:
 8005f5c:	898b      	ldrh	r3, [r1, #12]
 8005f5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f60:	079d      	lsls	r5, r3, #30
 8005f62:	4606      	mov	r6, r0
 8005f64:	460c      	mov	r4, r1
 8005f66:	d507      	bpl.n	8005f78 <__smakebuf_r+0x1c>
 8005f68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	6123      	str	r3, [r4, #16]
 8005f70:	2301      	movs	r3, #1
 8005f72:	6163      	str	r3, [r4, #20]
 8005f74:	b002      	add	sp, #8
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	ab01      	add	r3, sp, #4
 8005f7a:	466a      	mov	r2, sp
 8005f7c:	f7ff ffc8 	bl	8005f10 <__swhatbuf_r>
 8005f80:	9900      	ldr	r1, [sp, #0]
 8005f82:	4605      	mov	r5, r0
 8005f84:	4630      	mov	r0, r6
 8005f86:	f7ff f8eb 	bl	8005160 <_malloc_r>
 8005f8a:	b948      	cbnz	r0, 8005fa0 <__smakebuf_r+0x44>
 8005f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f90:	059a      	lsls	r2, r3, #22
 8005f92:	d4ef      	bmi.n	8005f74 <__smakebuf_r+0x18>
 8005f94:	f023 0303 	bic.w	r3, r3, #3
 8005f98:	f043 0302 	orr.w	r3, r3, #2
 8005f9c:	81a3      	strh	r3, [r4, #12]
 8005f9e:	e7e3      	b.n	8005f68 <__smakebuf_r+0xc>
 8005fa0:	89a3      	ldrh	r3, [r4, #12]
 8005fa2:	6020      	str	r0, [r4, #0]
 8005fa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fa8:	81a3      	strh	r3, [r4, #12]
 8005faa:	9b00      	ldr	r3, [sp, #0]
 8005fac:	6163      	str	r3, [r4, #20]
 8005fae:	9b01      	ldr	r3, [sp, #4]
 8005fb0:	6120      	str	r0, [r4, #16]
 8005fb2:	b15b      	cbz	r3, 8005fcc <__smakebuf_r+0x70>
 8005fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f81d 	bl	8005ff8 <_isatty_r>
 8005fbe:	b128      	cbz	r0, 8005fcc <__smakebuf_r+0x70>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	f043 0301 	orr.w	r3, r3, #1
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	431d      	orrs	r5, r3
 8005fd0:	81a5      	strh	r5, [r4, #12]
 8005fd2:	e7cf      	b.n	8005f74 <__smakebuf_r+0x18>

08005fd4 <_fstat_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4d07      	ldr	r5, [pc, #28]	; (8005ff4 <_fstat_r+0x20>)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	f7fc fb7c 	bl	80026de <_fstat>
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	d102      	bne.n	8005ff0 <_fstat_r+0x1c>
 8005fea:	682b      	ldr	r3, [r5, #0]
 8005fec:	b103      	cbz	r3, 8005ff0 <_fstat_r+0x1c>
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	bd38      	pop	{r3, r4, r5, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20000380 	.word	0x20000380

08005ff8 <_isatty_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d06      	ldr	r5, [pc, #24]	; (8006014 <_isatty_r+0x1c>)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4604      	mov	r4, r0
 8006000:	4608      	mov	r0, r1
 8006002:	602b      	str	r3, [r5, #0]
 8006004:	f7fc fb7b 	bl	80026fe <_isatty>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d102      	bne.n	8006012 <_isatty_r+0x1a>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	b103      	cbz	r3, 8006012 <_isatty_r+0x1a>
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	20000380 	.word	0x20000380

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr
